"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assetTransactionSkeletonSize = exports.assetTransactionSize = exports.isTransactionSkeletonSizeInRange = exports.isTransactionSizeInRange = exports.getTransactionSkeletonSize = exports.getTransactionSize = void 0;
const base_1 = require("@ckb-lumos/base");
const lumos_1 = require("@ckb-lumos/lumos");
/**
 * Calculates the size of a transaction.
 *
 * Note: Why adding 4 bytes to the size of transaction:
 * [Calculate transaction fee](https://github.com/nervosnetwork/ckb/wiki/Transaction-%C2%BB-Transaction-Fee#calculate-transaction-fee)
 */
function getTransactionSize(tx) {
    const serializedTx = base_1.blockchain.Transaction.pack(tx);
    return 4 + serializedTx.buffer.byteLength;
}
exports.getTransactionSize = getTransactionSize;
/**
 * Calculates the size of a TransactionSkeleton.
 */
function getTransactionSkeletonSize(txSkeleton) {
    const tx = lumos_1.helpers.createTransactionFromSkeleton(txSkeleton);
    return getTransactionSize(tx);
}
exports.getTransactionSkeletonSize = getTransactionSkeletonSize;
/**
 * Check if the Transaction's size (in bytes) is as expected.
 * Expected: min < size <= max.
 */
function isTransactionSizeInRange(tx, min, max) {
    const size = getTransactionSize(tx);
    return size <= (min ?? 0) || size > (max ?? Infinity);
}
exports.isTransactionSizeInRange = isTransactionSizeInRange;
/**
 * Check if the TransactionSkeleton's size (in bytes) is as expected.
 * Expected: min < size <= max.
 */
function isTransactionSkeletonSizeInRange(txSkeleton, min, max) {
    const tx = lumos_1.helpers.createTransactionFromSkeleton(txSkeleton);
    return isTransactionSizeInRange(tx, min, max);
}
exports.isTransactionSkeletonSizeInRange = isTransactionSkeletonSizeInRange;
/**
 * Throw an error if the Transaction's size (in bytes) is not as expected.
 * Expected: min < size <= max.
 */
function assetTransactionSize(tx, min, max) {
    min = min ?? 0;
    max = max ?? Infinity;
    const size = getTransactionSize(tx);
    if (size <= min) {
        throw new Error(`Expected the transaction size to be > ${min}, actual size: ${size}`);
    }
    if (size > max) {
        throw new Error(`Expected the transaction size to be <= ${max}, actual size: ${size}`);
    }
}
exports.assetTransactionSize = assetTransactionSize;
/**
 * Throw an error if the TransactionSkeleton's size (in bytes) is not as expected.
 * Expected: min < size <= max.
 */
function assetTransactionSkeletonSize(txSkeleton, min, max) {
    const tx = lumos_1.helpers.createTransactionFromSkeleton(txSkeleton);
    assetTransactionSize(tx, min, max);
}
exports.assetTransactionSkeletonSize = assetTransactionSkeletonSize;
//# sourceMappingURL=transaction.js.map