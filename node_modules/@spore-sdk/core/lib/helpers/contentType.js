"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setContentTypeParameters = exports.decodeContentType = exports.encodeContentType = exports.isContentTypeValid = void 0;
const whatwg_mimetype_1 = __importDefault(require("whatwg-mimetype"));
// @ts-ignore
const parser_1 = __importDefault(require("whatwg-mimetype/lib/parser"));
// @ts-ignore
const serializer_1 = __importDefault(require("whatwg-mimetype/lib/serializer"));
/**
 * Check if the target ContentType's format is valid.
 * The function simply checks that the MIME format is valid,
 * it does not check the existence of type, subtype, or parameters.
 *
 * - A typical MIME example: "image/jpeg".
 * - A more complex example: "image/svg+xml;q=0.9,/;q=0.8".
 */
function isContentTypeValid(contentType) {
    try {
        const encoded = new whatwg_mimetype_1.default(contentType);
        return encoded.toString() === contentType;
    }
    catch {
        return false;
    }
}
exports.isContentTypeValid = isContentTypeValid;
/**
 * Convert ContentType object to string.
 */
function encodeContentType(contentType) {
    try {
        return (0, serializer_1.default)({
            type: contentType.type,
            subtype: contentType.subtype,
            parameters: Object.entries(contentType.parameters),
        });
    }
    catch {
        throw new Error('Cannot encode ContentType');
    }
}
exports.encodeContentType = encodeContentType;
/**
 * Convert ContentType string to object.
 */
function decodeContentType(contentType) {
    try {
        const decoded = (0, parser_1.default)(contentType);
        return {
            type: decoded.type,
            subtype: decoded.subtype,
            mediaType: `${decoded.type}/${decoded.subtype}`,
            parameters: Object.fromEntries(decoded.parameters),
        };
    }
    catch {
        throw new Error(`Cannot decode ContentType "${contentType}"`);
    }
}
exports.decodeContentType = decodeContentType;
/**
 * Update the parameters of a content type string.
 * Note the function may change the order the provided content type.
 *
 * An example:
 * ```typescript
 * setContentTypeParameters('image/jpeg;a=1;b=2', { a: '3' }); // image/jpeg;a=3;b=2
 * ```
 */
function setContentTypeParameters(contentType, parameters) {
    const decoded = decodeContentType(contentType);
    for (const [key, value] of Object.entries(parameters)) {
        decoded.parameters[key] = value;
    }
    return encodeContentType(decoded);
}
exports.setContentTypeParameters = setContentTypeParameters;
//# sourceMappingURL=contentType.js.map