"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.forkSporeConfig = exports.isVersionedSporeScript = exports.isDirectSporeScript = exports.isSporeScriptSupported = exports.isSporeScriptSupportedByName = exports.getSporeScriptVersion = exports.getSporeScript = exports.getSporeConfig = exports.setSporeConfig = void 0;
const cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
const predefined_1 = require("./predefined");
const helpers_1 = require("../helpers");
const env = {
    config: predefined_1.predefinedSporeConfigs.Aggron4,
};
/**
 * Set the global default SporeConfig.
 * The default config is "predefinedSporeConfigs.Aggron4".
 */
function setSporeConfig(config) {
    env.config = config;
}
exports.setSporeConfig = setSporeConfig;
/**
 * Get the global default SporeConfig.
 * The default config is "predefinedSporeConfigs.Aggron4".
 */
function getSporeConfig() {
    return env.config;
}
exports.getSporeConfig = getSporeConfig;
function getSporeScript(config, scriptName, scriptId) {
    const script = config.scripts[scriptName];
    if (!script) {
        throw new Error(`${scriptName} script is not defined in the SporeConfig`);
    }
    if (!scriptId || isDirectSporeScript(script, scriptId)) {
        return script;
    }
    const versioned = getSporeScriptVersion(script, scriptId);
    if (!versioned) {
        throw new Error(`${scriptName} script with a version is not defined in the SporeConfig`);
    }
    return versioned;
}
exports.getSporeScript = getSporeScript;
/**
 * Find any version of a SporeScript by the specified ScriptId.
 */
function getSporeScriptVersion(sporeScript, scriptId) {
    const versions = sporeScript.versions ?? [];
    if (versions.length) {
        for (const version of versions) {
            if ((0, helpers_1.isScriptIdEquals)(version.script, scriptId)) {
                return version;
            }
        }
    }
    return void 0;
}
exports.getSporeScriptVersion = getSporeScriptVersion;
/**
 * Check if the target ScriptId is any version of the specified SporeScript.
 * The difference between this function and the `isSporeScriptSupported` is,
 * this function accepts SporeConfig and the name of SporeScript as parameters.
 */
function isSporeScriptSupportedByName(config, scriptName, scriptId) {
    const script = getSporeScript(config, scriptName);
    return isSporeScriptSupported(script, scriptId);
}
exports.isSporeScriptSupportedByName = isSporeScriptSupportedByName;
/**
 * Check if the target ScriptId is any version of the specified SporeScript.
 */
function isSporeScriptSupported(sporeScript, scriptId) {
    if (isDirectSporeScript(sporeScript, scriptId))
        return true;
    return isVersionedSporeScript(sporeScript, scriptId);
}
exports.isSporeScriptSupported = isSporeScriptSupported;
/**
 * Check if the target ScriptId is the latest version of the specified SporeScript.
 */
function isDirectSporeScript(sporeScript, scriptId) {
    return (0, helpers_1.isScriptIdEquals)(sporeScript.script, scriptId);
}
exports.isDirectSporeScript = isDirectSporeScript;
/**
 * Check if the target ScriptId is an historical version of the specified SporeScript.
 */
function isVersionedSporeScript(sporeScript, scriptId) {
    return getSporeScriptVersion(sporeScript, scriptId) !== void 0;
}
exports.isVersionedSporeScript = isVersionedSporeScript;
/**
 * Clone and create a new SporeConfig.
 */
function forkSporeConfig(origin, change) {
    origin = (0, cloneDeep_1.default)(origin);
    const extensions = origin.extensions;
    if (change.extensions) {
        for (const extension of change.extensions) {
            const originExtensionIndex = extensions.findIndex((row) => {
                return row.name === extension.name && row.dataHash === extension.dataHash;
            });
            if (originExtensionIndex !== -1) {
                extensions.splice(originExtensionIndex, 1);
            }
            extensions.push(extension);
        }
    }
    const scripts = {
        ...origin.scripts,
        ...change.scripts,
    };
    return {
        ...origin,
        ...change,
        scripts,
        extensions,
    };
}
exports.forkSporeConfig = forkSporeConfig;
//# sourceMappingURL=helpers.js.map