"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImmortalParameter = exports.isImmortalParameterValid = exports.useImmortal = void 0;
const helpers_1 = require("../../helpers");
const codec_1 = require("../../codec");
/**
 * A core extension of Spore NFT, to allow a spore cell to be indestructible on-chain.
 *
 * When setting a spore cell to be "immortal", the spore cell will be indestructible,
 * it cannot be melted, therefore the cell can be lived on the blockchain forever.
 */
function useImmortal() {
    return {
        name: 'immortal',
        dataHash: '0x',
        hooks: {
            onCreateSpore(context) {
                const outputs = context.txSkeleton.get('outputs');
                const spore = outputs.get(context.outputIndex);
                if (spore !== void 0) {
                    const data = codec_1.SporeData.unpack(spore.data);
                    const contentType = (0, helpers_1.decodeContentType)(data.contentType);
                    const immortal = contentType.parameters.immortal;
                    if (immortal && !isImmortalParameterValid(immortal)) {
                        throw new Error(`Spore at Transaction.outputs[${context.outputIndex}] has provided invalid param: immortal=${immortal}`);
                    }
                }
                return context.txSkeleton;
            },
            onMeltSpore(context) {
                const outputs = context.txSkeleton.get('outputs');
                const spore = outputs.get(context.inputIndex);
                if (spore) {
                    const data = codec_1.SporeData.unpack(spore.data);
                    const contentType = (0, helpers_1.decodeContentType)(data.contentType);
                    if (contentType.parameters.immortal === 'true') {
                        throw new Error(`Spore at Transaction.inputs[${context.inputIndex}] cannot be melted because it's immortal`);
                    }
                }
                return context.txSkeleton;
            },
        },
    };
}
exports.useImmortal = useImmortal;
function isImmortalParameterValid(immortal) {
    return typeof immortal === 'string' && (immortal === 'true' || immortal === 'false');
}
exports.isImmortalParameterValid = isImmortalParameterValid;
function getImmortalParameter() { }
exports.getImmortalParameter = getImmortalParameter;
//# sourceMappingURL=immortal.js.map