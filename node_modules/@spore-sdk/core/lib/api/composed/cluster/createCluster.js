"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCluster = void 0;
const lumos_1 = require("@ckb-lumos/lumos");
const config_1 = require("../../../config");
const helpers_1 = require("../../../helpers");
const __1 = require("../..");
async function createCluster(props) {
    // Env
    const config = props.config ?? (0, config_1.getSporeConfig)();
    const indexer = new lumos_1.Indexer(config.ckbIndexerUrl, config.ckbNodeUrl);
    const capacityMargin = lumos_1.BI.from(props.capacityMargin ?? 1_0000_0000);
    const maxTransactionSize = props.maxTransactionSize ?? config.maxTransactionSize ?? false;
    // Get TransactionSkeleton
    let txSkeleton = lumos_1.helpers.TransactionSkeleton({
        cellProvider: indexer,
    });
    // Generate and inject cluster cell
    const injectNewClusterResult = (0, __1.injectNewClusterOutput)({
        ...props,
        txSkeleton,
        capacityMargin,
        updateOutput: props.updateOutput,
    });
    txSkeleton = injectNewClusterResult.txSkeleton;
    // Inject needed capacity and pay fee
    const injectCapacityAndPayFeeResult = await (0, helpers_1.injectCapacityAndPayFee)({
        txSkeleton,
        changeAddress: props.changeAddress,
        fromInfos: props.fromInfos,
        fee: lumos_1.BI.from(0),
        config,
    });
    txSkeleton = injectCapacityAndPayFeeResult.txSkeleton;
    // Generate and inject cluster ID
    txSkeleton = (0, __1.injectNewClusterIds)({
        outputIndices: [injectNewClusterResult.outputIndex],
        txSkeleton,
        config,
    });
    // Make sure the tx size is in range (if needed)
    if (typeof maxTransactionSize === 'number') {
        (0, helpers_1.assetTransactionSkeletonSize)(txSkeleton, void 0, maxTransactionSize);
    }
    return {
        txSkeleton,
        outputIndex: injectNewClusterResult.outputIndex,
    };
}
exports.createCluster = createCluster;
//# sourceMappingURL=createCluster.js.map