"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferSpore = void 0;
const lumos_1 = require("@ckb-lumos/lumos");
const config_1 = require("../../../config");
const helpers_1 = require("../../../helpers");
const __1 = require("../..");
async function transferSpore(props) {
    // Env
    const config = props.config ?? (0, config_1.getSporeConfig)();
    const indexer = new lumos_1.Indexer(config.ckbIndexerUrl, config.ckbNodeUrl);
    const useCapacityMarginAsFee = props.useCapacityMarginAsFee ?? true;
    // Check capacity margin related props
    if (!useCapacityMarginAsFee && !props.fromInfos) {
        throw new Error('When useCapacityMarginAsFee is enabled, fromInfos is also required');
    }
    if (useCapacityMarginAsFee && props.capacityMargin !== void 0) {
        throw new Error('When useCapacityMarginAsFee is enabled, cannot set capacity margin of the spore');
    }
    // Get TransactionSkeleton
    let txSkeleton = lumos_1.helpers.TransactionSkeleton({
        cellProvider: indexer,
    });
    // Inject live spore to Transaction.inputs and Transaction.outputs
    const sporeCell = await (0, __1.getSporeByOutPoint)(props.outPoint, config);
    const injectLiveSporeCellResult = await (0, __1.injectLiveSporeCell)({
        cell: sporeCell,
        txSkeleton,
        addOutput: true,
        updateWitness: props.updateWitness,
        capacityMargin: props.capacityMargin,
        updateOutput(cell) {
            cell.cellOutput.lock = props.toLock;
            if (props.updateOutput instanceof Function) {
                cell = props.updateOutput(cell);
            }
            return cell;
        },
        config,
    });
    txSkeleton = injectLiveSporeCellResult.txSkeleton;
    if (!useCapacityMarginAsFee) {
        // Inject needed capacity from fromInfos and pay fee
        const injectCapacityAndPayFeeResult = await (0, helpers_1.injectCapacityAndPayFee)({
            txSkeleton,
            changeAddress: props.changeAddress,
            fromInfos: props.fromInfos,
            fee: lumos_1.BI.from(0),
            config,
        });
        txSkeleton = injectCapacityAndPayFeeResult.txSkeleton;
    }
    else {
        // Pay fee by the spore cell's capacity margin
        txSkeleton = await (0, helpers_1.payFeeByOutput)({
            outputIndex: injectLiveSporeCellResult.outputIndex,
            txSkeleton,
            config,
        });
    }
    return {
        txSkeleton,
        inputIndex: injectLiveSporeCellResult.inputIndex,
        outputIndex: injectLiveSporeCellResult.outputIndex,
    };
}
exports.transferSpore = transferSpore;
//# sourceMappingURL=transferSpore.js.map