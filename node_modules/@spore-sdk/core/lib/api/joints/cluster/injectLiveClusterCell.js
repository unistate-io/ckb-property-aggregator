"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectLiveClusterCell = void 0;
const helper_1 = require("@ckb-lumos/common-scripts/lib/helper");
const config_1 = require("../../../config");
const helpers_1 = require("../../../helpers");
async function injectLiveClusterCell(props) {
    // Env
    const clusterCell = props.cell;
    const config = props.config ?? (0, config_1.getSporeConfig)();
    // Get TransactionSkeleton
    let txSkeleton = props.txSkeleton;
    // Check target cell type
    const clusterCellType = clusterCell.cellOutput.type;
    const clusterScript = (0, config_1.getSporeScript)(config, 'Cluster', clusterCellType);
    if (!clusterCellType || !clusterScript) {
        throw new Error('Cannot inject cluster because target cell is not Cluster');
    }
    // Add cluster cell to Transaction.inputs
    const setupCellResult = await (0, helpers_1.setupCell)({
        txSkeleton,
        input: props.cell,
        config: config.lumos,
        addOutput: props.addOutput,
        updateOutput(cell) {
            if (props.capacityMargin !== void 0) {
                cell = (0, helpers_1.setAbsoluteCapacityMargin)(cell, props.capacityMargin);
            }
            if (props.updateOutput instanceof Function) {
                cell = props.updateOutput(cell);
            }
            return cell;
        },
        defaultWitness: props.defaultWitness,
        updateWitness: props.updateWitness,
        since: props.since,
    });
    txSkeleton = setupCellResult.txSkeleton;
    // If the cluster is added to Transaction.outputs
    if (props.addOutput) {
        // Make sure the cell's output has declared enough capacity
        const output = txSkeleton.get('outputs').get(setupCellResult.outputIndex);
        (0, helpers_1.assetCellMinimalCapacity)(output);
        // Fix the cell's output index
        txSkeleton = txSkeleton.update('fixedEntries', (fixedEntries) => {
            return fixedEntries.push({
                field: 'outputs',
                index: setupCellResult.outputIndex,
            });
        });
    }
    // Add cluster required cellDeps
    txSkeleton = (0, helper_1.addCellDep)(txSkeleton, clusterScript.cellDep);
    return {
        txSkeleton,
        inputIndex: setupCellResult.inputIndex,
        outputIndex: setupCellResult.outputIndex,
    };
}
exports.injectLiveClusterCell = injectLiveClusterCell;
//# sourceMappingURL=injectLiveClusterCell.js.map