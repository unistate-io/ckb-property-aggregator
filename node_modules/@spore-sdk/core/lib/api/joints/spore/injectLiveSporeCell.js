"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectLiveSporeCell = void 0;
const helper_1 = require("@ckb-lumos/common-scripts/lib/helper");
const helpers_1 = require("../../../helpers");
const config_1 = require("../../../config");
async function injectLiveSporeCell(props) {
    // Env
    const config = props.config ?? (0, config_1.getSporeConfig)();
    const sporeCell = props.cell;
    // Get TransactionSkeleton
    let txSkeleton = props.txSkeleton;
    // Check target cell's type script id
    const sporeType = sporeCell.cellOutput.type;
    const sporeScript = (0, config_1.getSporeScript)(config, 'Spore', sporeType);
    if (!sporeType || !sporeScript) {
        throw new Error('Cannot inject live spore because target cell type is not Spore');
    }
    // Add spore to Transaction.inputs
    const setupCellResult = await (0, helpers_1.setupCell)({
        txSkeleton,
        input: sporeCell,
        addOutput: props.addOutput,
        updateOutput(cell) {
            if (props.capacityMargin !== void 0) {
                cell = (0, helpers_1.setAbsoluteCapacityMargin)(cell, props.capacityMargin);
            }
            if (props.updateOutput instanceof Function) {
                cell = props.updateOutput(cell);
            }
            return cell;
        },
        defaultWitness: props.defaultWitness,
        updateWitness: props.updateWitness,
        config: config.lumos,
        since: props.since,
    });
    txSkeleton = setupCellResult.txSkeleton;
    // If added to outputs, fix the cell's output index
    if (props.addOutput) {
        txSkeleton = txSkeleton.update('fixedEntries', (fixedEntries) => {
            return fixedEntries.push({
                field: 'outputs',
                index: setupCellResult.outputIndex,
            });
        });
    }
    // Add spore type as cellDep
    txSkeleton = (0, helper_1.addCellDep)(txSkeleton, sporeScript.cellDep);
    return {
        txSkeleton,
        inputIndex: setupCellResult.inputIndex,
        outputIndex: setupCellResult.outputIndex,
    };
}
exports.injectLiveSporeCell = injectLiveSporeCell;
//# sourceMappingURL=injectLiveSporeCell.js.map