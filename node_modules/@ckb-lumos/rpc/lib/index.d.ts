import { Base } from "./Base";
import { Method } from "./method";
import { CKBComponents } from "./types/api";
import { formatter as paramsFormatter } from "./paramsFormatter";
import * as resultFormatter from "./resultFormatter";
import { RPCConfig } from "./types/common";
export declare const ParamsFormatter: {
    toOptional: (format?: ((args: any) => any) | undefined) => (arg: any) => any;
    toArray: (format?: ((args: any) => any) | undefined) => (arg: any) => any;
    toHash: (hash: string) => string;
    toNumber: (number: string | bigint) => string;
    toScript: (script: import("@ckb-lumos/base").Script) => import("./types/rpc").RPC.Script;
    toOutPoint: (outPoint: import("@ckb-lumos/base").OutPoint) => import("./types/rpc").RPC.OutPoint;
    toInput: (input: import("@ckb-lumos/base").Input) => import("./types/rpc").RPC.CellInput;
    toOutput: (output: import("@ckb-lumos/base").Output) => import("./types/rpc").RPC.CellOutput;
    toDepType: (type: CKBComponents.DepType) => "code" | "dep_group";
    toOrder: (order: CKBComponents.Order) => CKBComponents.Order;
    toCellDep: (cellDep: import("@ckb-lumos/base").CellDep) => import("./types/rpc").RPC.CellDep;
    toRawTransaction: (transaction: CKBComponents.RawTransaction) => import("./types/rpc").RPC.RawTransaction;
    toPageNumber: (pageNo?: string | bigint) => string;
    toPageSize: (pageSize?: string | bigint) => string;
    toReverseOrder: (reverse?: boolean) => boolean;
    toOutputsValidator: (outputsValidator: CKBComponents.OutputsValidator) => "default" | "passthrough" | undefined;
    toBoolean: (value: boolean) => boolean;
    toTransactionProof: (proof: import("@ckb-lumos/base").TransactionProof) => import("./types/rpc").RPC.TransactionProof;
    toTransactionAndWitnessProof: (proof: CKBComponents.TransactionAndWitnessProof) => import("./types/rpc").RPC.TransactionAndWitnessProof;
    toSearchFilter: (data: CKBComponents.SearchFilter) => import("./types/rpc").RPC.SearchFilter;
    toSearchKey: (data: CKBComponents.SearchKey) => import("./types/rpc").RPC.SearchKey;
    toGetCellsSearchKey: (data: CKBComponents.GetCellsSearchKey<boolean>) => import("./types/rpc").RPC.GetCellsSearchKey;
    toGetTransactionsSearchKey: (data: CKBComponents.GetTransactionsSearchKey<boolean>) => import("./types/rpc").RPC.GetTransactionsSearchKey;
};
export declare const ResultFormatter: typeof resultFormatter;
export declare class CKBRPC extends Base {
    #private;
    get node(): CKBComponents.Node;
    get paramsFormatter(): typeof paramsFormatter;
    get resultFormatter(): typeof resultFormatter;
    constructor(url: string, config?: Partial<RPCConfig>);
    setNode(node: CKBComponents.Node): CKBComponents.Node;
    addMethod: (options: CKBComponents.Method, config?: RPCConfig) => void;
    createBatchRequest: <N extends keyof Base, P extends (string | number | object)[], R = any[]>(params?: any) => any;
}
export { CKBRPC as RPC };
//# sourceMappingURL=index.d.ts.map