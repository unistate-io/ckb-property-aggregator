"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Method = void 0;
var _exceptions = require("./exceptions");
var _abortController = _interopRequireDefault(require("abort-controller"));
var _crossFetch = _interopRequireDefault(require("cross-fetch"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
var _name = /*#__PURE__*/new WeakMap();
var _config = /*#__PURE__*/new WeakMap();
var _options = /*#__PURE__*/new WeakMap();
var _node = /*#__PURE__*/new WeakMap();
class Method {
  get name() {
    return _classPrivateFieldGet(this, _name);
  }
  constructor(node, options, config = {}) {
    _classPrivateFieldInitSpec(this, _name, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _config, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _options, {
      writable: true,
      value: {
        name: "",
        method: "",
        paramsFormatters: [],
        resultFormatters: undefined
      }
    });
    _classPrivateFieldInitSpec(this, _node, {
      writable: true,
      value: void 0
    });
    /* eslint-disable @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types */
    _defineProperty(this, "call", async (...params) => {
      const payload = this.getPayload(...params);
      const controller = new _abortController.default();
      const signal = controller.signal;
      const timeout = setTimeout(() => controller.abort(), _classPrivateFieldGet(this, _config).timeout);
      const res = await _classPrivateFieldGet(this, _config).fetch(_classPrivateFieldGet(this, _node).url, {
        method: "POST",
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(payload),
        signal
      }).then(res => res.json()).then(res => {
        var _classPrivateFieldGet2, _classPrivateFieldGet3, _classPrivateFieldGet4;
        if (res.id !== payload.id) {
          throw new _exceptions.IdNotMatchException(payload.id, res.id);
        }
        if (res.error) {
          throw new _exceptions.ResponseException(JSON.stringify(res.error));
        }
        return (_classPrivateFieldGet2 = (_classPrivateFieldGet3 = (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _options)).resultFormatters) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.call(_classPrivateFieldGet4, res.result)) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : res.result;
      });
      clearTimeout(timeout);
      return res;
    });
    _defineProperty(this, "getPayload", (...params) => {
      const data = params.map((p, i) => _classPrivateFieldGet(this, _options).paramsFormatters[i] && _classPrivateFieldGet(this, _options).paramsFormatters[i](p) || p);
      const id = Math.round(Math.random() * 10000);
      const payload = {
        id,
        method: _classPrivateFieldGet(this, _options).method,
        params: data,
        jsonrpc: "2.0"
      };
      return payload;
    });
    _classPrivateFieldSet(this, _node, node);
    _classPrivateFieldSet(this, _options, options);
    _classPrivateFieldSet(this, _name, options.name);
    const {
      timeout: _timeout = 30000,
      fetch = _crossFetch.default
    } = config;
    _classPrivateFieldSet(this, _config, {
      timeout: _timeout,
      fetch
    });
    Object.defineProperty(this.call, "name", {
      value: options.name,
      configurable: false,
      writable: false
    });
  }
}
/* eslint-enable @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types */
exports.Method = Method;
//# sourceMappingURL=method.js.map