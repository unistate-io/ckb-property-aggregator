"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PayloadInBatchException = exports.MethodInBatchNotFoundException = exports.IdNotMatchedInBatchException = void 0;
var _ErrorCode = _interopRequireDefault(require("./ErrorCode"));
var _rpc = require("./rpc");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const ERROR_LABEL = "Batch Request";
class MethodInBatchNotFoundException extends Error {
  constructor(name) {
    super(`[${ERROR_LABEL}]: Method ${name} is not found`);
    _defineProperty(this, "code", _ErrorCode.default.MethodNotFound);
  }
}
exports.MethodInBatchNotFoundException = MethodInBatchNotFoundException;
class PayloadInBatchException extends Error {
  constructor(index, message) {
    super(`[${ERROR_LABEL} ${index}]: ${message}`);
    _defineProperty(this, "code", _ErrorCode.default.PayloadMessage);
    this.index = index;
  }
}
exports.PayloadInBatchException = PayloadInBatchException;
class IdNotMatchedInBatchException extends _rpc.IdNotMatchException {
  constructor(index, requestId, responseId) {
    super(requestId, responseId);
    this.message = `[${ERROR_LABEL} ${index}]: ${this.message}`;
    this.index = index;
  }
}
exports.IdNotMatchedInBatchException = IdNotMatchedInBatchException;
var _default = {
  MethodInBatchNotFoundException,
  PayloadInBatchException,
  IdNotMatchedInBatchException
};
exports.default = _default;
//# sourceMappingURL=batch.js.map