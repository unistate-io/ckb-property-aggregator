"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpcProperties = exports.Base = void 0;
var _chain = _interopRequireDefault(require("./chain"));
var _experimental = _interopRequireDefault(require("./experimental"));
var _net = _interopRequireDefault(require("./net"));
var _pool = _interopRequireDefault(require("./pool"));
var _stats = _interopRequireDefault(require("./stats"));
var _indexer = _interopRequireDefault(require("./indexer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
const rpcProperties = {
  ..._chain.default,
  ..._experimental.default,
  ..._indexer.default,
  // skip minerRpc
  ..._net.default,
  ..._pool.default,
  ..._stats.default
  // skip subscription
};

// prettier-ignore

// prettier-ignore

// prettier-ignore
exports.rpcProperties = rpcProperties;
var _rpcProperties = /*#__PURE__*/new WeakMap();
class Base {
  constructor() {
    _classPrivateFieldInitSpec(this, _rpcProperties, {
      writable: true,
      value: rpcProperties
    });
  }
  get rpcProperties() {
    return _classPrivateFieldGet(this, _rpcProperties);
  }
}
exports.Base = Base;
//# sourceMappingURL=index.js.map