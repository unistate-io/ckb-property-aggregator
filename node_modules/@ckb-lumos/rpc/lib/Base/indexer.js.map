{"version":3,"file":"indexer.js","names":["_paramsFormatter","require","resultFmts","_interopRequireWildcard","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","schemas","getIndexerTip","method","paramsFormatters","resultFormatters","toTip","getCells","paramsFmts","toGetCellsSearchKey","toOrder","toNumber","toOptional","toHash","toGetCellsResult","getTransactions","toGetTransactionsSearchKey","toGetTransactionsResult","getCellsCapacity","toSearchKey","toCellsCapacity","getBlockFilter","toNullable","toBlockFilter","getTransactionAndWitnessProof","toArray","toTransactionAndWitnessProof","verifyTransactionAndWitnessProof","getForkBlock","toForkBlockResult","getBlockMedianTime","estimateCycles","toRawTransaction","toEstimateCycles","getFeeRateStatistics","toFeeRateStatistics","getFeeRateStatics","_default","exports"],"sources":["../../src/Base/indexer.ts"],"sourcesContent":["import { formatter as paramsFmts } from \"../paramsFormatter\";\nimport * as resultFmts from \"../resultFormatter\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\ntype MethodSchema = {\n  method: string;\n  paramsFormatters: ((arg: any) => any)[];\n  resultFormatters: (arg: any) => any;\n};\n\nconst schemas: Record<string, MethodSchema> = {\n  getIndexerTip: {\n    method: \"get_indexer_tip\",\n    paramsFormatters: [],\n    resultFormatters: resultFmts.toTip,\n  },\n\n  getCells: {\n    method: \"get_cells\",\n    paramsFormatters: [\n      paramsFmts.toGetCellsSearchKey,\n      paramsFmts.toOrder,\n      paramsFmts.toNumber,\n      paramsFmts.toOptional(paramsFmts.toHash),\n    ],\n    resultFormatters: resultFmts.toGetCellsResult,\n  },\n\n  getTransactions: {\n    method: \"get_transactions\",\n    paramsFormatters: [\n      paramsFmts.toGetTransactionsSearchKey,\n      paramsFmts.toOrder,\n      paramsFmts.toNumber,\n      paramsFmts.toOptional(paramsFmts.toHash),\n    ],\n    resultFormatters: resultFmts.toGetTransactionsResult,\n  },\n\n  getCellsCapacity: {\n    method: \"get_cells_capacity\",\n    paramsFormatters: [paramsFmts.toSearchKey],\n    resultFormatters: resultFmts.toCellsCapacity,\n  },\n\n  getBlockFilter: {\n    method: \"get_block_filter\",\n    paramsFormatters: [paramsFmts.toHash],\n    resultFormatters: resultFmts.toNullable(resultFmts.toBlockFilter),\n  },\n  getTransactionAndWitnessProof: {\n    method: \"get_transaction_and_witness_proof\",\n    paramsFormatters: [\n      paramsFmts.toArray(paramsFmts.toHash),\n      paramsFmts.toOptional(paramsFmts.toHash),\n    ],\n    resultFormatters: resultFmts.toTransactionAndWitnessProof,\n  },\n  verifyTransactionAndWitnessProof: {\n    method: \"verify_transaction_and_witness_proof\",\n    paramsFormatters: [paramsFmts.toTransactionAndWitnessProof],\n    resultFormatters: resultFmts.toArray(resultFmts.toHash),\n  },\n\n  getForkBlock: {\n    method: \"get_fork_block\",\n    paramsFormatters: [\n      paramsFmts.toHash,\n      paramsFmts.toOptional(paramsFmts.toNumber),\n    ],\n    resultFormatters: resultFmts.toNullable(resultFmts.toForkBlockResult),\n  },\n\n  getBlockMedianTime: {\n    method: \"get_block_median_time\",\n    paramsFormatters: [paramsFmts.toHash],\n    resultFormatters: resultFmts.toNullable(resultFmts.toNumber),\n  },\n\n  estimateCycles: {\n    method: \"estimate_cycles\",\n    paramsFormatters: [paramsFmts.toRawTransaction],\n    resultFormatters: resultFmts.toEstimateCycles,\n  },\n\n  getFeeRateStatistics: {\n    method: \"get_fee_rate_statistics\",\n    paramsFormatters: [paramsFmts.toOptional(paramsFmts.toNumber)],\n    resultFormatters: resultFmts.toNullable(resultFmts.toFeeRateStatistics),\n  },\n\n  getFeeRateStatics: {\n    method: \"get_fee_rate_statics\",\n    paramsFormatters: [paramsFmts.toOptional(paramsFmts.toNumber)],\n    resultFormatters: resultFmts.toNullable(resultFmts.toFeeRateStatistics),\n  },\n};\n\nexport default schemas;\n"],"mappings":"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"}