"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _paramsFormatter = require("../paramsFormatter");
var resultFmts = _interopRequireWildcard(require("../resultFormatter"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable @typescript-eslint/no-explicit-any */

const schemas = {
  getIndexerTip: {
    method: "get_indexer_tip",
    paramsFormatters: [],
    resultFormatters: resultFmts.toTip
  },
  getCells: {
    method: "get_cells",
    paramsFormatters: [_paramsFormatter.formatter.toGetCellsSearchKey, _paramsFormatter.formatter.toOrder, _paramsFormatter.formatter.toNumber, _paramsFormatter.formatter.toOptional(_paramsFormatter.formatter.toHash)],
    resultFormatters: resultFmts.toGetCellsResult
  },
  getTransactions: {
    method: "get_transactions",
    paramsFormatters: [_paramsFormatter.formatter.toGetTransactionsSearchKey, _paramsFormatter.formatter.toOrder, _paramsFormatter.formatter.toNumber, _paramsFormatter.formatter.toOptional(_paramsFormatter.formatter.toHash)],
    resultFormatters: resultFmts.toGetTransactionsResult
  },
  getCellsCapacity: {
    method: "get_cells_capacity",
    paramsFormatters: [_paramsFormatter.formatter.toSearchKey],
    resultFormatters: resultFmts.toCellsCapacity
  },
  getBlockFilter: {
    method: "get_block_filter",
    paramsFormatters: [_paramsFormatter.formatter.toHash],
    resultFormatters: resultFmts.toNullable(resultFmts.toBlockFilter)
  },
  getTransactionAndWitnessProof: {
    method: "get_transaction_and_witness_proof",
    paramsFormatters: [_paramsFormatter.formatter.toArray(_paramsFormatter.formatter.toHash), _paramsFormatter.formatter.toOptional(_paramsFormatter.formatter.toHash)],
    resultFormatters: resultFmts.toTransactionAndWitnessProof
  },
  verifyTransactionAndWitnessProof: {
    method: "verify_transaction_and_witness_proof",
    paramsFormatters: [_paramsFormatter.formatter.toTransactionAndWitnessProof],
    resultFormatters: resultFmts.toArray(resultFmts.toHash)
  },
  getForkBlock: {
    method: "get_fork_block",
    paramsFormatters: [_paramsFormatter.formatter.toHash, _paramsFormatter.formatter.toOptional(_paramsFormatter.formatter.toNumber)],
    resultFormatters: resultFmts.toNullable(resultFmts.toForkBlockResult)
  },
  getBlockMedianTime: {
    method: "get_block_median_time",
    paramsFormatters: [_paramsFormatter.formatter.toHash],
    resultFormatters: resultFmts.toNullable(resultFmts.toNumber)
  },
  estimateCycles: {
    method: "estimate_cycles",
    paramsFormatters: [_paramsFormatter.formatter.toRawTransaction],
    resultFormatters: resultFmts.toEstimateCycles
  },
  getFeeRateStatistics: {
    method: "get_fee_rate_statistics",
    paramsFormatters: [_paramsFormatter.formatter.toOptional(_paramsFormatter.formatter.toNumber)],
    resultFormatters: resultFmts.toNullable(resultFmts.toFeeRateStatistics)
  },
  getFeeRateStatics: {
    method: "get_fee_rate_statics",
    paramsFormatters: [_paramsFormatter.formatter.toOptional(_paramsFormatter.formatter.toNumber)],
    resultFormatters: resultFmts.toNullable(resultFmts.toFeeRateStatistics)
  }
};
var _default = schemas;
exports.default = _default;
//# sourceMappingURL=indexer.js.map