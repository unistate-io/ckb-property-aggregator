{"version":3,"file":"resultFormatter.js","names":["isTxPoolIds","rawTxPool","Array","isArray","pending","toArray","format","arg","map","exports","toNullable","origin","toNumber","number","toString","toHash","hash","toHeader","header","compact_target","compactTarget","transactions_root","transactionsRoot","proposals_hash","proposalsHash","extra_hash","extraHash","parent_hash","parentHash","rest","toScript","script","code_hash","codeHash","hash_type","hashType","toInput","input","previous_output","previousOutput","toOutPoint","toOutput","output","lock","type","outPoint","tx_hash","txHash","toDepType","toCellDep","cellDep","out_point","dep_type","depType","toTransaction","tx","cell_deps","cellDeps","inputs","outputs","outputs_data","outputsData","header_deps","headerDeps","toUncleBlock","uncleBlock","toTip","tip","blockHash","block_hash","blockNumber","block_number","toBlock","res","cycles","block","uncles","transactions","toAlertMessage","alertMessage","notice_until","noticeUntil","toBlockchainInfo","info","is_initial_block_download","isInitialBlockDownload","median_time","medianTime","alerts","toLocalNodeInfo","node_id","nodeId","protocols","id","name","support_versions","supportVersions","toRemoteNodeInfo","connected_duration","connectedDuration","is_outbound","isOutbound","last_ping_duration","lastPingDuration","sync_state","syncState","bestKnownHeaderHash","best_known_header_hash","bestKnownHeaderNumber","best_known_header_number","canFetchCount","can_fetch_count","inflightCount","inflight_count","lastCommonHeaderHash","last_common_header_hash","lastCommonHeaderNumber","last_common_header_number","unknownHeaderListSize","unknown_header_list_size","toTxPoolInfo","last_txs_updated_at","lastTxsUpdatedAt","tip_hash","tipHash","tip_number","tipNumber","total_tx_cycles","totalTxCycles","total_tx_size","totalTxSize","min_fee_rate","minFeeRate","toPeers","nodes","toCell","cell","undefined","toLiveCell","liveCell","data","toLiveCellWithStatus","cellWithStatus","toCells","cells","toCellIncludingOutPoint","output_data_len","outputDataLen","toCellsIncludingOutPoint","toTransactionWithStatus","txWithStatus","transaction","tx_status","status","time_added_to_pool","txStatus","reason","timeAddedToPool","toEpoch","epoch","start_number","startNumber","toTransactionPoint","transactionPoint","toTransactionsByLockHash","consumedBy","consumed_by","createdBy","created_by","toLiveCellsByLockHash","cellOutput","cell_output","cellbase","toLockHashIndexState","index","lock_hash","lockHash","toLockHashIndexStates","states","toBannedAddress","bannedAddress","ban_reason","banReason","ban_until","banUntil","created_at","createdAt","toBannedAddresses","bannedAddresses","banAddr","toCellbaseOutputCapacityDetails","details","proposal_reward","proposalReward","tx_fee","txFee","toFeeRate","feeRateObj","fee_rate","feeRate","toCapacityByLockHash","capacityByLockHash","cells_count","cellsCount","capacity","toBlockEconomicState","blockEconomicState","finalized_at","finalizedAt","miner_reward","minerReward","txs_fee","txsFee","toSyncState","state","bestKnownBlockNumber","best_known_block_number","bestKnownBlockTimestamp","best_known_block_timestamp","fastTime","fast_time","ibd","inflightBlocksCount","inflight_blocks_count","lowTime","low_time","normalTime","normal_time","orphanBlocksCount","orphan_blocks_count","toTransactionProof","proof","witnesses_root","witnessesRoot","toHardforkFeature","feature","rfc","epochNumber","epoch_number","toDeployment","deployment","bit","start","timeout","minActivationEpoch","min_activation_epoch","period","threshold","toSoftFork","softFork","rfc0043","toConsensus","consensus","rpcHardforkFeatures","hardfork_features","softforks","lightClient","light_client","testdummy","blockVersion","block_version","cellbaseMaturity","cellbase_maturity","daoTypeHash","dao_type_hash","epochDurationTarget","epoch_duration_target","genesisHash","genesis_hash","initialPrimaryEpochReward","initial_primary_epoch_reward","maxBlockBytes","max_block_bytes","maxBlockCycles","max_block_cycles","maxBlockProposalsLimit","max_block_proposals_limit","maxUnclesNum","max_uncles_num","medianTimeBlockCount","median_time_block_count","orphanRateTarget","orphan_rate_target","permanentDifficultyInDummy","permanent_difficulty_in_dummy","primaryEpochRewardHalvingInterval","primary_epoch_reward_halving_interval","proposerRewardRatio","proposer_reward_ratio","secondaryEpochReward","secondary_epoch_reward","secp256k1Blake160MultisigAllTypeHash","secp256k1_blake160_multisig_all_type_hash","secp256k1Blake160SighashAllTypeHash","secp256k1_blake160_sighash_all_type_hash","txProposalWindow","tx_proposal_window","txVersion","tx_version","typeIdCodeHash","type_id_code_hash","hardforkFeatures","toRawTxPool","toTxVerbosity","ancestors_count","ancestorsCount","ancestors_cycles","ancestorsCycles","ancestors_size","ancestorsSize","proposed","Object","keys","forEach","toIndexerCell","indexerCell","outputData","output_data","txIndex","tx_index","toGetCellsResult","getCellsResult","lastCursor","last_cursor","objects","object","isUngroupedIndexerTransaction","value","toIndexerTransaction","indexerTransaction","ioIndex","io_index","ioType","io_type","toGetTransactionsResult","getTransactionsResult","toCellsCapacity","cellsCapacity","toBlockFilter","blockFilter","toTransactionAndWitnessProof","transactionsProof","transactions_proof","witnessesProof","witnesses_proof","toFeeRateStatistics","statistics","mean","median","toForkBlockResult","result","proposals","extension","toEstimateCycles","cycle","toDeployState","toDeploymentInfo","deploymentInfo","since","toDeploymentsInfo","deployments"],"sources":["../src/resultFormatter.ts"],"sourcesContent":["/* eslint-disable camelcase, @typescript-eslint/no-explicit-any */\nimport { CKBComponents } from \"./types/api\";\nimport { RPC } from \"./types/rpc\";\n\nconst isTxPoolIds = (rawTxPool: RPC.RawTxPool): rawTxPool is RPC.TxPoolIds => {\n  return Array.isArray(rawTxPool.pending);\n};\nconst toArray =\n  <I, O>(format?: (args: I) => O) =>\n  (arg: I[]): O[] | I[] => {\n    if (typeof format !== \"function\" || !Array.isArray(arg)) {\n      return arg;\n    }\n    return arg.map(format);\n  };\n\nconst toNullable =\n  <I, O>(format?: (args: I) => O) =>\n  (origin: I | null): I | O | null => {\n    if (!format || origin === null) return origin as never;\n    return format(origin);\n  };\n\nconst toNumber = (number: RPC.BlockNumber): CKBComponents.BlockNumber =>\n  number.toString();\nconst toHash = (hash: RPC.Hash256): CKBComponents.Hash256 => hash;\n\nfunction toHeader(header: RPC.Header): CKBComponents.BlockHeader;\nfunction toHeader(header: string): string;\nfunction toHeader(\n  header: string | RPC.Header\n): string | CKBComponents.BlockHeader {\n  if (typeof header === \"string\") return header;\n  if (!header) return header;\n  const {\n    compact_target: compactTarget,\n    transactions_root: transactionsRoot,\n    proposals_hash: proposalsHash,\n    extra_hash: extraHash,\n    parent_hash: parentHash,\n    ...rest\n  } = header;\n  return {\n    compactTarget,\n    parentHash,\n    transactionsRoot,\n    proposalsHash,\n    extraHash,\n    ...rest,\n  };\n}\n\nconst toScript = (script: RPC.Script): CKBComponents.Script => {\n  if (!script) return script;\n  const { code_hash: codeHash, hash_type: hashType, ...rest } = script;\n  return {\n    codeHash,\n    hashType,\n    ...rest,\n  };\n};\nconst toInput = (input: RPC.CellInput): CKBComponents.CellInput => {\n  if (!input) return input;\n  const { previous_output: previousOutput, ...rest } = input;\n  return {\n    previousOutput: previousOutput\n      ? toOutPoint(previousOutput)\n      : previousOutput,\n    ...rest,\n  };\n};\nconst toOutput = (output: RPC.CellOutput): CKBComponents.CellOutput => {\n  if (!output) return output;\n  const { lock, type, ...rest } = output;\n  return {\n    lock: toScript(lock),\n    type: type ? toScript(type) : type,\n    ...rest,\n  };\n};\nconst toOutPoint = (outPoint: RPC.OutPoint): CKBComponents.OutPoint => {\n  const { tx_hash: txHash, ...rest } = outPoint;\n  return {\n    txHash,\n    ...rest,\n  };\n};\nconst toDepType = (type: RPC.DepType): CKBComponents.DepType => {\n  if (type === \"dep_group\") {\n    return \"depGroup\";\n  }\n  return type;\n};\n\nconst toCellDep = (cellDep: RPC.CellDep): CKBComponents.CellDep => {\n  if (!cellDep) return cellDep;\n  const { out_point: outPoint, dep_type = \"code\", ...rest } = cellDep;\n  return {\n    outPoint: toOutPoint(outPoint),\n    depType: toDepType(dep_type),\n    ...rest,\n  };\n};\nfunction toTransaction(tx: RPC.RawTransaction): CKBComponents.RawTransaction;\nfunction toTransaction(tx: RPC.Transaction): CKBComponents.Transaction;\nfunction toTransaction(\n  tx: RPC.RawTransaction | RPC.Transaction\n): CKBComponents.Transaction | CKBComponents.RawTransaction {\n  if (!tx || typeof tx !== \"object\") return tx;\n  const {\n    cell_deps: cellDeps = [],\n    inputs = [],\n    outputs = [],\n    outputs_data: outputsData = [],\n    header_deps: headerDeps = [],\n    ...rest\n  } = tx;\n  return {\n    cellDeps: cellDeps.map(toCellDep),\n    inputs: inputs.map(toInput),\n    outputs: outputs.map(toOutput),\n    outputsData,\n    headerDeps,\n    ...rest,\n  };\n}\nconst toUncleBlock = (uncleBlock: RPC.UncleBlock): CKBComponents.UncleBlock => {\n  if (!uncleBlock) return uncleBlock;\n  const { header, ...rest } = uncleBlock;\n  return {\n    header: toHeader(header),\n    ...rest,\n  };\n};\n\nconst toTip = (tip: RPC.Tip): CKBComponents.Tip => ({\n  blockHash: tip.block_hash,\n  blockNumber: tip.block_number,\n});\n\ntype BlockWithCycles = { block: RPC.Block | string; cycles: string[] };\nfunction toBlock(block: string): string;\nfunction toBlock(block: RPC.Block): CKBComponents.Block;\nfunction toBlock<T extends BlockWithCycles>(block: T): T;\nfunction toBlock(res: string | RPC.Block | BlockWithCycles): any {\n  if (!res) return res;\n  if (typeof res === \"string\") return res;\n\n  if (\"block\" in res && \"cycles\" in res) {\n    return {\n      cycles: res.cycles,\n      block: toBlock(res.block as any),\n    };\n  }\n\n  const { header, uncles = [], transactions = [], ...rest } = res;\n  return {\n    header: toHeader(header),\n    uncles: uncles.map(toUncleBlock),\n    transactions: transactions.map(toTransaction),\n    ...rest,\n  };\n}\nconst toAlertMessage = (\n  alertMessage: RPC.AlertMessage\n): CKBComponents.AlertMessage => {\n  if (!alertMessage) return alertMessage;\n  const { notice_until: noticeUntil, ...rest } = alertMessage;\n  return {\n    noticeUntil,\n    ...rest,\n  };\n};\nconst toBlockchainInfo = (\n  info: RPC.BlockchainInfo\n): CKBComponents.BlockchainInfo => {\n  if (!info) return info;\n  const {\n    is_initial_block_download: isInitialBlockDownload,\n    median_time: medianTime,\n    alerts,\n    ...rest\n  } = info;\n  return {\n    isInitialBlockDownload,\n    medianTime,\n    alerts: alerts.map(toAlertMessage),\n    ...rest,\n  };\n};\nconst toLocalNodeInfo = (\n  info: RPC.LocalNodeInfo\n): CKBComponents.LocalNodeInfo => {\n  if (!info) return info;\n  const { node_id: nodeId, protocols, ...rest } = info;\n  return {\n    nodeId,\n    protocols: protocols.map(\n      ({ id, name, support_versions: supportVersions }) => ({\n        id,\n        name,\n        supportVersions,\n      })\n    ),\n    ...rest,\n  };\n};\nconst toRemoteNodeInfo = (\n  info: RPC.RemoteNodeInfo\n): CKBComponents.RemoteNodeInfo => {\n  if (!info) return info;\n  const {\n    node_id: nodeId,\n    connected_duration: connectedDuration,\n    is_outbound: isOutbound,\n    last_ping_duration: lastPingDuration,\n    sync_state,\n    ...rest\n  } = info;\n  return {\n    nodeId,\n    connectedDuration,\n    isOutbound,\n    lastPingDuration,\n    syncState: {\n      bestKnownHeaderHash: sync_state.best_known_header_hash,\n      bestKnownHeaderNumber: sync_state.best_known_header_number,\n      canFetchCount: sync_state.can_fetch_count,\n      inflightCount: sync_state.inflight_count,\n      lastCommonHeaderHash: sync_state.last_common_header_hash,\n      lastCommonHeaderNumber: sync_state.last_common_header_number,\n      unknownHeaderListSize: sync_state.unknown_header_list_size,\n    },\n    ...rest,\n  };\n};\nconst toTxPoolInfo = (info: RPC.TxPoolInfo): CKBComponents.TxPoolInfo => {\n  if (!info) return info;\n  const {\n    last_txs_updated_at: lastTxsUpdatedAt,\n    tip_hash: tipHash,\n    tip_number: tipNumber,\n    total_tx_cycles: totalTxCycles,\n    total_tx_size: totalTxSize,\n    min_fee_rate: minFeeRate,\n    ...rest\n  } = info;\n  return {\n    lastTxsUpdatedAt,\n    tipHash,\n    tipNumber,\n    totalTxCycles,\n    totalTxSize,\n    minFeeRate,\n    ...rest,\n  };\n};\nconst toPeers = (\n  nodes: RPC.RemoteNodeInfo[]\n): CKBComponents.RemoteNodeInfo[] => {\n  if (!Array.isArray(nodes)) return [];\n  return nodes.map(toRemoteNodeInfo);\n};\nconst toCell = (cell: RPC.Cell): CKBComponents.Cell => {\n  if (!cell) return cell;\n  const { lock, type, ...rest } = cell;\n  return {\n    lock: toScript(lock),\n    type: type ? toScript(type) : undefined,\n    ...rest,\n  };\n};\nconst toLiveCell = (liveCell: RPC.LiveCell): CKBComponents.LiveCell => {\n  if (!liveCell) return liveCell;\n  const { data, output, ...rest } = liveCell;\n  return {\n    data,\n    output: toOutput(output),\n    ...rest,\n  };\n};\nconst toLiveCellWithStatus = (cellWithStatus: {\n  cell: RPC.LiveCell;\n  status: string;\n}): { cell: CKBComponents.LiveCell; status: string } => {\n  if (!cellWithStatus) return cellWithStatus;\n  const { cell, ...rest } = cellWithStatus;\n  return {\n    cell: toLiveCell(cell),\n    ...rest,\n  };\n};\nconst toCells = (cells: RPC.Cell[]): CKBComponents.Cell[] => {\n  if (!Array.isArray(cells)) return [];\n  return cells.map(toCell);\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst toCellIncludingOutPoint = (cell: RPC.CellIncludingOutPoint) => {\n  if (!cell) return cell;\n  const {\n    lock,\n    block_hash: blockHash,\n    out_point,\n    output_data_len: outputDataLen,\n    ...rest\n  } = cell;\n  return {\n    blockHash,\n    lock: toScript(lock),\n    outPoint: toOutPoint(out_point),\n    outputDataLen,\n    ...rest,\n  };\n};\nconst toCellsIncludingOutPoint = (\n  cells: RPC.CellIncludingOutPoint[]\n): CKBComponents.CellIncludingOutPoint[] => {\n  if (!Array.isArray(cells)) return [];\n  return cells.map(toCellIncludingOutPoint);\n};\nconst toTransactionWithStatus = <Tx>(\n  txWithStatus: RPC.TransactionWithStatus\n): CKBComponents.TransactionWithStatus<Tx> => {\n  if (!txWithStatus) return txWithStatus;\n  const {\n    transaction,\n    tx_status: { block_hash: blockHash, status },\n    time_added_to_pool,\n    ...rest\n  } = txWithStatus;\n  return {\n    transaction: toTransaction(transaction) as Tx,\n    txStatus: {\n      blockHash,\n      status,\n      ...(\"reason\" in txWithStatus.tx_status\n        ? { reason: txWithStatus.tx_status.reason }\n        : {}),\n    },\n    timeAddedToPool: time_added_to_pool,\n    ...rest,\n  };\n};\nconst toEpoch = (epoch: RPC.Epoch): CKBComponents.Epoch => {\n  if (!epoch) return epoch;\n  const {\n    start_number: startNumber,\n    compact_target: compactTarget,\n    ...rest\n  } = epoch;\n  return {\n    compactTarget,\n    startNumber,\n    ...rest,\n  };\n};\nconst toTransactionPoint = (\n  transactionPoint: RPC.TransactionPoint\n): CKBComponents.TransactionPoint => {\n  if (!transactionPoint) return transactionPoint;\n  const {\n    block_number: blockNumber,\n    tx_hash: txHash,\n    ...rest\n  } = transactionPoint;\n  return {\n    blockNumber,\n    txHash,\n    ...rest,\n  };\n};\nconst toTransactionsByLockHash = (\n  transactions: RPC.TransactionsByLockHash\n): CKBComponents.TransactionsByLockHash => {\n  if (!transactions) return transactions;\n  return transactions.map((tx) => ({\n    consumedBy: tx.consumed_by\n      ? toTransactionPoint(tx.consumed_by)\n      : tx.consumed_by,\n    createdBy: toTransactionPoint(tx.created_by),\n  }));\n};\nconst toLiveCellsByLockHash = (\n  cells: RPC.LiveCellsByLockHash\n): CKBComponents.LiveCellsByLockHash => {\n  if (!cells) return cells;\n  return cells.map((cell) => ({\n    cellOutput: toCell(cell.cell_output),\n    createdBy: toTransactionPoint(cell.created_by),\n    cellbase: cell.cellbase,\n    outputDataLen: cell.output_data_len,\n  }));\n};\nconst toLockHashIndexState = (\n  index: RPC.LockHashIndexState\n): CKBComponents.LockHashIndexState => {\n  if (!index) return index;\n  const {\n    block_hash: blockHash,\n    block_number: blockNumber,\n    lock_hash: lockHash,\n    ...rest\n  } = index;\n  return {\n    blockHash,\n    blockNumber,\n    lockHash,\n    ...rest,\n  };\n};\nconst toLockHashIndexStates = (\n  states: RPC.LockHashIndexStates\n): CKBComponents.LockHashIndexStates => {\n  if (!states) return states;\n  return states.map(toLockHashIndexState);\n};\nconst toBannedAddress = (\n  bannedAddress: RPC.BannedAddress\n): CKBComponents.BannedAddress => {\n  if (!bannedAddress) return bannedAddress;\n  const {\n    ban_reason: banReason,\n    ban_until: banUntil,\n    created_at: createdAt,\n    ...rest\n  } = bannedAddress;\n  return {\n    banReason,\n    banUntil,\n    createdAt,\n    ...rest,\n  };\n};\nconst toBannedAddresses = (\n  bannedAddresses: RPC.BannedAddresses\n): CKBComponents.BannedAddresses => {\n  if (!bannedAddresses) return bannedAddresses;\n  return bannedAddresses.map((banAddr) => toBannedAddress(banAddr));\n};\nconst toCellbaseOutputCapacityDetails = (\n  details: RPC.CellbaseOutputCapacityDetails\n): CKBComponents.CellbaseOutputCapacityDetails => {\n  if (!details) return details;\n  const { proposal_reward: proposalReward, tx_fee: txFee, ...rest } = details;\n  return {\n    proposalReward,\n    txFee,\n    ...rest,\n  };\n};\n\nconst toFeeRate = (feeRateObj: RPC.FeeRate): CKBComponents.FeeRate => {\n  if (!feeRateObj) {\n    return feeRateObj;\n  }\n  const { fee_rate: feeRate, ...rest } = feeRateObj;\n  return {\n    feeRate,\n    ...rest,\n  };\n};\nconst toCapacityByLockHash = (\n  capacityByLockHash: RPC.CapacityByLockHash\n): CKBComponents.CapacityByLockHash => {\n  if (!capacityByLockHash) {\n    return capacityByLockHash;\n  }\n  const {\n    cells_count: cellsCount,\n    block_number: blockNumber,\n    capacity,\n    ...rest\n  } = capacityByLockHash;\n  return {\n    blockNumber,\n    capacity,\n    cellsCount,\n    ...rest,\n  };\n};\nconst toBlockEconomicState = (\n  blockEconomicState: RPC.BlockEconomicState\n): CKBComponents.BlockEconomicState => {\n  if (!blockEconomicState) {\n    return blockEconomicState;\n  }\n  const {\n    finalized_at: finalizedAt,\n    miner_reward: minerReward,\n    txs_fee: txsFee,\n    ...rest\n  } = blockEconomicState;\n  return {\n    finalizedAt,\n    minerReward,\n    txsFee,\n    ...rest,\n  };\n};\nconst toSyncState = (state: RPC.SyncState): CKBComponents.SyncState => {\n  if (!state) {\n    return state;\n  }\n  return {\n    bestKnownBlockNumber: state.best_known_block_number,\n    bestKnownBlockTimestamp: state.best_known_block_timestamp,\n    fastTime: state.fast_time,\n    ibd: state.ibd,\n    inflightBlocksCount: state.inflight_blocks_count,\n    lowTime: state.low_time,\n    normalTime: state.normal_time,\n    orphanBlocksCount: state.orphan_blocks_count,\n  };\n};\nconst toTransactionProof = (\n  proof: RPC.TransactionProof\n): CKBComponents.TransactionProof => {\n  if (!proof) {\n    return proof;\n  }\n  const {\n    block_hash: blockHash,\n    witnesses_root: witnessesRoot,\n    ...rest\n  } = proof;\n  return {\n    blockHash,\n    witnessesRoot,\n    ...rest,\n  };\n};\n\nconst toHardforkFeature = (\n  feature: RPC.HardforkFeature\n): CKBComponents.HardForkFeature => {\n  return {\n    rfc: feature.rfc,\n    epochNumber: feature.epoch_number,\n  };\n};\n\nconst toDeployment = (deployment: RPC.Deployment): CKBComponents.Deployment => {\n  return {\n    bit: deployment.bit,\n    start: deployment.start,\n    timeout: deployment.timeout,\n    minActivationEpoch: deployment.min_activation_epoch,\n    period: deployment.period,\n    threshold: deployment.threshold,\n  };\n};\n\nconst toSoftFork = (softFork: RPC.SoftFork): CKBComponents.SoftFork => {\n  if (\"rfc0043\" in softFork) {\n    return {\n      status: softFork.status,\n      rfc0043: toDeployment(softFork.rfc0043),\n    };\n  }\n  return softFork;\n};\n\nconst toConsensus = (consensus: RPC.Consensus): CKBComponents.Consensus => {\n  if (!consensus) return consensus;\n\n  const rpcHardforkFeatures = consensus.hardfork_features;\n\n  const softforks = consensus.softforks;\n  const lightClient =\n    softforks.light_client && toSoftFork(softforks.light_client);\n  const testdummy = softforks.testdummy && toSoftFork(softforks.testdummy);\n\n  return {\n    blockVersion: consensus.block_version,\n    cellbaseMaturity: consensus.cellbase_maturity,\n    daoTypeHash: consensus.dao_type_hash,\n    epochDurationTarget: consensus.epoch_duration_target,\n    genesisHash: consensus.genesis_hash,\n    id: consensus.id,\n    initialPrimaryEpochReward: consensus.initial_primary_epoch_reward,\n    maxBlockBytes: consensus.max_block_bytes,\n    maxBlockCycles: consensus.max_block_cycles,\n    maxBlockProposalsLimit: consensus.max_block_proposals_limit,\n    maxUnclesNum: consensus.max_uncles_num,\n    medianTimeBlockCount: consensus.median_time_block_count,\n    orphanRateTarget: consensus.orphan_rate_target,\n    permanentDifficultyInDummy: consensus.permanent_difficulty_in_dummy,\n    primaryEpochRewardHalvingInterval:\n      consensus.primary_epoch_reward_halving_interval,\n    proposerRewardRatio: consensus.proposer_reward_ratio,\n    secondaryEpochReward: consensus.secondary_epoch_reward,\n    secp256k1Blake160MultisigAllTypeHash:\n      consensus.secp256k1_blake160_multisig_all_type_hash,\n    secp256k1Blake160SighashAllTypeHash:\n      consensus.secp256k1_blake160_sighash_all_type_hash,\n    txProposalWindow: consensus.tx_proposal_window,\n    txVersion: consensus.tx_version,\n    typeIdCodeHash: consensus.type_id_code_hash,\n    hardforkFeatures: rpcHardforkFeatures.map(toHardforkFeature),\n    softforks: {\n      ...(lightClient && { lightClient }),\n      ...(testdummy && { testdummy }),\n    },\n  };\n};\n\nconst toRawTxPool = (rawTxPool: RPC.RawTxPool): CKBComponents.RawTxPool => {\n  if (!rawTxPool) return rawTxPool;\n\n  if (isTxPoolIds(rawTxPool)) {\n    return rawTxPool;\n  }\n\n  const toTxVerbosity = ({\n    ancestors_count: ancestorsCount,\n    ancestors_cycles: ancestorsCycles,\n    ancestors_size: ancestorsSize,\n    ...rest\n  }: RPC.TxVerbosity): CKBComponents.TxVerbosity => ({\n    ancestorsCount,\n    ancestorsCycles,\n    ancestorsSize,\n    ...rest,\n  });\n  const proposed: Record<CKBComponents.Hash256, CKBComponents.TxVerbosity> = {};\n  const pending: Record<CKBComponents.Hash256, CKBComponents.TxVerbosity> = {};\n\n  Object.keys(rawTxPool.proposed).forEach((hash) => {\n    proposed[hash] = toTxVerbosity(rawTxPool.proposed[hash]);\n  });\n\n  Object.keys(rawTxPool.pending).forEach((hash) => {\n    pending[hash] = toTxVerbosity(rawTxPool.pending[hash]);\n  });\n\n  return { proposed, pending };\n};\n\nconst toIndexerCell = (\n  indexerCell: RPC.IndexerCell\n): CKBComponents.IndexerCell => {\n  if (!indexerCell) return indexerCell;\n  return {\n    blockNumber: indexerCell.block_number,\n    outPoint: toOutPoint(indexerCell.out_point),\n    output: toOutput(indexerCell.output),\n    outputData: indexerCell.output_data,\n    txIndex: indexerCell.tx_index,\n  };\n};\n\nconst toGetCellsResult = <WithData extends boolean = true>(\n  getCellsResult: RPC.GetLiveCellsResult\n): CKBComponents.GetLiveCellsResult<WithData> => ({\n  lastCursor: getCellsResult.last_cursor,\n  objects: getCellsResult.objects.map((object) =>\n    toIndexerCell(object)\n  ) as CKBComponents.GetLiveCellsResult<WithData>[\"objects\"],\n});\n\nconst isUngroupedIndexerTransaction = (\n  value: RPC.GroupedIndexerTransaction | RPC.UngroupedIndexerTransaction\n): value is RPC.UngroupedIndexerTransaction => {\n  if ((value as RPC.GroupedIndexerTransaction).cells) {\n    return false;\n  }\n\n  return true;\n};\n\nconst toIndexerTransaction = (\n  indexerTransaction:\n    | RPC.GroupedIndexerTransaction\n    | RPC.UngroupedIndexerTransaction\n):\n  | CKBComponents.GroupedIndexerTransaction\n  | CKBComponents.UngroupedIndexerTransaction => {\n  if (!indexerTransaction) return indexerTransaction;\n  if (isUngroupedIndexerTransaction(indexerTransaction)) {\n    return {\n      txHash: indexerTransaction.tx_hash,\n      blockNumber: indexerTransaction.block_number,\n      ioIndex: indexerTransaction.io_index,\n      ioType: indexerTransaction.io_type,\n      txIndex: indexerTransaction.tx_index,\n    };\n  }\n\n  return {\n    txHash: indexerTransaction.tx_hash,\n    txIndex: indexerTransaction.tx_index,\n    blockNumber: indexerTransaction.block_number,\n    cells: indexerTransaction.cells,\n  };\n};\n\nconst toGetTransactionsResult = <Goruped extends boolean = false>(\n  getTransactionsResult: RPC.GetTransactionsResult<Goruped>\n): CKBComponents.GetTransactionsResult<Goruped> => {\n  if (!getTransactionsResult) return getTransactionsResult;\n\n  return {\n    lastCursor: getTransactionsResult.last_cursor,\n    objects: getTransactionsResult.objects.map(\n      (object) =>\n        toIndexerTransaction(\n          object\n        ) as CKBComponents.IndexerTransaction<Goruped>\n    ),\n  };\n};\n\nconst toCellsCapacity = (\n  cellsCapacity: RPC.CellsCapacity\n): CKBComponents.CellsCapacity => {\n  if (!cellsCapacity) return cellsCapacity;\n  return {\n    capacity: cellsCapacity.capacity,\n    blockHash: cellsCapacity.block_hash,\n    blockNumber: cellsCapacity.block_number,\n  };\n};\n\nconst toBlockFilter = (\n  blockFilter: RPC.BlockFilter\n): CKBComponents.BlockFilter => {\n  return {\n    hash: blockFilter.hash,\n    data: blockFilter.data,\n  };\n};\n\nconst toTransactionAndWitnessProof = (\n  proof: RPC.TransactionAndWitnessProof\n): CKBComponents.TransactionAndWitnessProof => {\n  return {\n    blockHash: proof.block_hash,\n    transactionsProof: proof.transactions_proof,\n    witnessesProof: proof.witnesses_proof,\n  };\n};\n\nconst toFeeRateStatistics = (\n  statistics: RPC.FeeRateStatistics\n): CKBComponents.FeeRateStatistics => {\n  return {\n    mean: statistics.mean,\n    median: statistics.median,\n  };\n};\n\nconst toForkBlockResult = (\n  result: RPC.BlockView | RPC.SerializedBlock\n): CKBComponents.BlockView | CKBComponents.SerializedBlock => {\n  if (typeof result === \"string\") {\n    return result;\n  }\n\n  return {\n    header: toHeader(result.header),\n    uncles: result.uncles.map(toUncleBlock),\n    transactions: result.transactions.map(toTransaction),\n    proposals: result.proposals,\n    extension: result.extension,\n  };\n};\n\nconst toEstimateCycles = (\n  cycle: RPC.EstimateCycles\n): CKBComponents.EstimateCycles => {\n  return {\n    cycles: cycle.cycles,\n  };\n};\n\nconst toDeployState = (\n  state: RPC.DeploymentState\n): CKBComponents.DeploymentState => {\n  if (state === \"locked_in\") {\n    return \"lockedIn\";\n  }\n  return state;\n};\n\nconst toDeploymentInfo = (\n  deploymentInfo: RPC.DeploymentInfo\n): CKBComponents.DeploymentInfo => {\n  return {\n    bit: deploymentInfo.bit,\n    /// specifies the first epoch in which the bit gains meaning.\n    start: deploymentInfo.start,\n    timeout: deploymentInfo.timeout,\n    minActivationEpoch: deploymentInfo.min_activation_epoch,\n    period: deploymentInfo.period,\n    threshold: deploymentInfo.threshold,\n    since: deploymentInfo.since,\n    state: toDeployState(deploymentInfo.state),\n  };\n};\n\nconst toDeploymentsInfo = (\n  deploymentInfo: RPC.DeploymentsInfo\n): CKBComponents.DeploymentsInfo => {\n  const { light_client, testdummy } = deploymentInfo.deployments;\n\n  return {\n    hash: deploymentInfo.hash,\n    epoch: deploymentInfo.epoch,\n    deployments: {\n      ...(light_client ? { lightClient: toDeploymentInfo(light_client) } : {}),\n      ...(testdummy ? { testdummy: toDeploymentInfo(testdummy) } : {}),\n    },\n  };\n};\n\nexport {\n  toNumber,\n  toHash,\n  toArray,\n  toNullable,\n  toHeader,\n  toScript,\n  toInput,\n  toOutput,\n  toOutPoint,\n  toDepType,\n  toCellDep,\n  toTransaction,\n  toUncleBlock,\n  toBlock,\n  toTip,\n  toAlertMessage,\n  toBlockchainInfo,\n  toLocalNodeInfo,\n  toRemoteNodeInfo,\n  toTxPoolInfo,\n  toPeers,\n  toLiveCell,\n  toLiveCellWithStatus,\n  toCell,\n  toCells,\n  toCellIncludingOutPoint,\n  toCellsIncludingOutPoint,\n  toTransactionWithStatus,\n  toEpoch,\n  toTransactionPoint,\n  toTransactionsByLockHash,\n  toLiveCellsByLockHash,\n  toLockHashIndexState,\n  toLockHashIndexStates,\n  toBannedAddress,\n  toBannedAddresses,\n  toCellbaseOutputCapacityDetails,\n  toFeeRate,\n  toCapacityByLockHash,\n  toBlockEconomicState,\n  toSyncState,\n  toTransactionProof,\n  toConsensus,\n  toRawTxPool,\n  toCellsCapacity,\n  toGetCellsResult,\n  toGetTransactionsResult,\n  toBlockFilter,\n  toTransactionAndWitnessProof,\n  toFeeRateStatistics,\n  toForkBlockResult,\n  toEstimateCycles,\n  toDeployment,\n  toDeployState,\n  toDeploymentInfo,\n  toDeploymentsInfo,\n};\n/* eslint-enable camelcase */\n"],"mappings":";;;;;;;;;;;;AAAA;;AAIA,MAAMA,WAAW,GAAIC,SAAwB,IAAiC;EAC5E,OAAOC,KAAK,CAACC,OAAO,CAACF,SAAS,CAACG,OAAO,CAAC;AACzC,CAAC;AACD,MAAMC,OAAO,GACJC,MAAuB,IAC7BC,GAAQ,IAAgB;EACvB,IAAI,OAAOD,MAAM,KAAK,UAAU,IAAI,CAACJ,KAAK,CAACC,OAAO,CAACI,GAAG,CAAC,EAAE;IACvD,OAAOA,GAAG;EACZ;EACA,OAAOA,GAAG,CAACC,GAAG,CAACF,MAAM,CAAC;AACxB,CAAC;AAACG,OAAA,CAAAJ,OAAA,GAAAA,OAAA;AAEJ,MAAMK,UAAU,GACPJ,MAAuB,IAC7BK,MAAgB,IAAmB;EAClC,IAAI,CAACL,MAAM,IAAIK,MAAM,KAAK,IAAI,EAAE,OAAOA,MAAM;EAC7C,OAAOL,MAAM,CAACK,MAAM,CAAC;AACvB,CAAC;AAACF,OAAA,CAAAC,UAAA,GAAAA,UAAA;AAEJ,MAAME,QAAQ,GAAIC,MAAuB,IACvCA,MAAM,CAACC,QAAQ,CAAC,CAAC;AAACL,OAAA,CAAAG,QAAA,GAAAA,QAAA;AACpB,MAAMG,MAAM,GAAIC,IAAiB,IAA4BA,IAAI;AAACP,OAAA,CAAAM,MAAA,GAAAA,MAAA;AAIlE,SAASE,QAAQA,CACfC,MAA2B,EACS;EACpC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE,OAAOA,MAAM;EAC7C,IAAI,CAACA,MAAM,EAAE,OAAOA,MAAM;EAC1B,MAAM;IACJC,cAAc,EAAEC,aAAa;IAC7BC,iBAAiB,EAAEC,gBAAgB;IACnCC,cAAc,EAAEC,aAAa;IAC7BC,UAAU,EAAEC,SAAS;IACrBC,WAAW,EAAEC,UAAU;IACvB,GAAGC;EACL,CAAC,GAAGX,MAAM;EACV,OAAO;IACLE,aAAa;IACbQ,UAAU;IACVN,gBAAgB;IAChBE,aAAa;IACbE,SAAS;IACT,GAAGG;EACL,CAAC;AACH;AAEA,MAAMC,QAAQ,GAAIC,MAAkB,IAA2B;EAC7D,IAAI,CAACA,MAAM,EAAE,OAAOA,MAAM;EAC1B,MAAM;IAAEC,SAAS,EAAEC,QAAQ;IAAEC,SAAS,EAAEC,QAAQ;IAAE,GAAGN;EAAK,CAAC,GAAGE,MAAM;EACpE,OAAO;IACLE,QAAQ;IACRE,QAAQ;IACR,GAAGN;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAqB,QAAA,GAAAA,QAAA;AACF,MAAMM,OAAO,GAAIC,KAAoB,IAA8B;EACjE,IAAI,CAACA,KAAK,EAAE,OAAOA,KAAK;EACxB,MAAM;IAAEC,eAAe,EAAEC,cAAc;IAAE,GAAGV;EAAK,CAAC,GAAGQ,KAAK;EAC1D,OAAO;IACLE,cAAc,EAAEA,cAAc,GAC1BC,UAAU,CAACD,cAAc,CAAC,GAC1BA,cAAc;IAClB,GAAGV;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAA2B,OAAA,GAAAA,OAAA;AACF,MAAMK,QAAQ,GAAIC,MAAsB,IAA+B;EACrE,IAAI,CAACA,MAAM,EAAE,OAAOA,MAAM;EAC1B,MAAM;IAAEC,IAAI;IAAEC,IAAI;IAAE,GAAGf;EAAK,CAAC,GAAGa,MAAM;EACtC,OAAO;IACLC,IAAI,EAAEb,QAAQ,CAACa,IAAI,CAAC;IACpBC,IAAI,EAAEA,IAAI,GAAGd,QAAQ,CAACc,IAAI,CAAC,GAAGA,IAAI;IAClC,GAAGf;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAgC,QAAA,GAAAA,QAAA;AACF,MAAMD,UAAU,GAAIK,QAAsB,IAA6B;EACrE,MAAM;IAAEC,OAAO,EAAEC,MAAM;IAAE,GAAGlB;EAAK,CAAC,GAAGgB,QAAQ;EAC7C,OAAO;IACLE,MAAM;IACN,GAAGlB;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAA+B,UAAA,GAAAA,UAAA;AACF,MAAMQ,SAAS,GAAIJ,IAAiB,IAA4B;EAC9D,IAAIA,IAAI,KAAK,WAAW,EAAE;IACxB,OAAO,UAAU;EACnB;EACA,OAAOA,IAAI;AACb,CAAC;AAACnC,OAAA,CAAAuC,SAAA,GAAAA,SAAA;AAEF,MAAMC,SAAS,GAAIC,OAAoB,IAA4B;EACjE,IAAI,CAACA,OAAO,EAAE,OAAOA,OAAO;EAC5B,MAAM;IAAEC,SAAS,EAAEN,QAAQ;IAAEO,QAAQ,GAAG,MAAM;IAAE,GAAGvB;EAAK,CAAC,GAAGqB,OAAO;EACnE,OAAO;IACLL,QAAQ,EAAEL,UAAU,CAACK,QAAQ,CAAC;IAC9BQ,OAAO,EAAEL,SAAS,CAACI,QAAQ,CAAC;IAC5B,GAAGvB;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAwC,SAAA,GAAAA,SAAA;AAGF,SAASK,aAAaA,CACpBC,EAAwC,EACkB;EAC1D,IAAI,CAACA,EAAE,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE,OAAOA,EAAE;EAC5C,MAAM;IACJC,SAAS,EAAEC,QAAQ,GAAG,EAAE;IACxBC,MAAM,GAAG,EAAE;IACXC,OAAO,GAAG,EAAE;IACZC,YAAY,EAAEC,WAAW,GAAG,EAAE;IAC9BC,WAAW,EAAEC,UAAU,GAAG,EAAE;IAC5B,GAAGlC;EACL,CAAC,GAAG0B,EAAE;EACN,OAAO;IACLE,QAAQ,EAAEA,QAAQ,CAACjD,GAAG,CAACyC,SAAS,CAAC;IACjCS,MAAM,EAAEA,MAAM,CAAClD,GAAG,CAAC4B,OAAO,CAAC;IAC3BuB,OAAO,EAAEA,OAAO,CAACnD,GAAG,CAACiC,QAAQ,CAAC;IAC9BoB,WAAW;IACXE,UAAU;IACV,GAAGlC;EACL,CAAC;AACH;AACA,MAAMmC,YAAY,GAAIC,UAA0B,IAA+B;EAC7E,IAAI,CAACA,UAAU,EAAE,OAAOA,UAAU;EAClC,MAAM;IAAE/C,MAAM;IAAE,GAAGW;EAAK,CAAC,GAAGoC,UAAU;EACtC,OAAO;IACL/C,MAAM,EAAED,QAAQ,CAACC,MAAM,CAAC;IACxB,GAAGW;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAuD,YAAA,GAAAA,YAAA;AAEF,MAAME,KAAK,GAAIC,GAAY,KAAyB;EAClDC,SAAS,EAAED,GAAG,CAACE,UAAU;EACzBC,WAAW,EAAEH,GAAG,CAACI;AACnB,CAAC,CAAC;AAAC9D,OAAA,CAAAyD,KAAA,GAAAA,KAAA;AAMH,SAASM,OAAOA,CAACC,GAAyC,EAAO;EAC/D,IAAI,CAACA,GAAG,EAAE,OAAOA,GAAG;EACpB,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAOA,GAAG;EAEvC,IAAI,OAAO,IAAIA,GAAG,IAAI,QAAQ,IAAIA,GAAG,EAAE;IACrC,OAAO;MACLC,MAAM,EAAED,GAAG,CAACC,MAAM;MAClBC,KAAK,EAAEH,OAAO,CAACC,GAAG,CAACE,KAAY;IACjC,CAAC;EACH;EAEA,MAAM;IAAEzD,MAAM;IAAE0D,MAAM,GAAG,EAAE;IAAEC,YAAY,GAAG,EAAE;IAAE,GAAGhD;EAAK,CAAC,GAAG4C,GAAG;EAC/D,OAAO;IACLvD,MAAM,EAAED,QAAQ,CAACC,MAAM,CAAC;IACxB0D,MAAM,EAAEA,MAAM,CAACpE,GAAG,CAACwD,YAAY,CAAC;IAChCa,YAAY,EAAEA,YAAY,CAACrE,GAAG,CAAC8C,aAAa,CAAC;IAC7C,GAAGzB;EACL,CAAC;AACH;AACA,MAAMiD,cAAc,GAClBC,YAA8B,IACC;EAC/B,IAAI,CAACA,YAAY,EAAE,OAAOA,YAAY;EACtC,MAAM;IAAEC,YAAY,EAAEC,WAAW;IAAE,GAAGpD;EAAK,CAAC,GAAGkD,YAAY;EAC3D,OAAO;IACLE,WAAW;IACX,GAAGpD;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAqE,cAAA,GAAAA,cAAA;AACF,MAAMI,gBAAgB,GACpBC,IAAwB,IACS;EACjC,IAAI,CAACA,IAAI,EAAE,OAAOA,IAAI;EACtB,MAAM;IACJC,yBAAyB,EAAEC,sBAAsB;IACjDC,WAAW,EAAEC,UAAU;IACvBC,MAAM;IACN,GAAG3D;EACL,CAAC,GAAGsD,IAAI;EACR,OAAO;IACLE,sBAAsB;IACtBE,UAAU;IACVC,MAAM,EAAEA,MAAM,CAAChF,GAAG,CAACsE,cAAc,CAAC;IAClC,GAAGjD;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAyE,gBAAA,GAAAA,gBAAA;AACF,MAAMO,eAAe,GACnBN,IAAuB,IACS;EAChC,IAAI,CAACA,IAAI,EAAE,OAAOA,IAAI;EACtB,MAAM;IAAEO,OAAO,EAAEC,MAAM;IAAEC,SAAS;IAAE,GAAG/D;EAAK,CAAC,GAAGsD,IAAI;EACpD,OAAO;IACLQ,MAAM;IACNC,SAAS,EAAEA,SAAS,CAACpF,GAAG,CACtB,CAAC;MAAEqF,EAAE;MAAEC,IAAI;MAAEC,gBAAgB,EAAEC;IAAgB,CAAC,MAAM;MACpDH,EAAE;MACFC,IAAI;MACJE;IACF,CAAC,CACH,CAAC;IACD,GAAGnE;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAgF,eAAA,GAAAA,eAAA;AACF,MAAMQ,gBAAgB,GACpBd,IAAwB,IACS;EACjC,IAAI,CAACA,IAAI,EAAE,OAAOA,IAAI;EACtB,MAAM;IACJO,OAAO,EAAEC,MAAM;IACfO,kBAAkB,EAAEC,iBAAiB;IACrCC,WAAW,EAAEC,UAAU;IACvBC,kBAAkB,EAAEC,gBAAgB;IACpCC,UAAU;IACV,GAAG3E;EACL,CAAC,GAAGsD,IAAI;EACR,OAAO;IACLQ,MAAM;IACNQ,iBAAiB;IACjBE,UAAU;IACVE,gBAAgB;IAChBE,SAAS,EAAE;MACTC,mBAAmB,EAAEF,UAAU,CAACG,sBAAsB;MACtDC,qBAAqB,EAAEJ,UAAU,CAACK,wBAAwB;MAC1DC,aAAa,EAAEN,UAAU,CAACO,eAAe;MACzCC,aAAa,EAAER,UAAU,CAACS,cAAc;MACxCC,oBAAoB,EAAEV,UAAU,CAACW,uBAAuB;MACxDC,sBAAsB,EAAEZ,UAAU,CAACa,yBAAyB;MAC5DC,qBAAqB,EAAEd,UAAU,CAACe;IACpC,CAAC;IACD,GAAG1F;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAwF,gBAAA,GAAAA,gBAAA;AACF,MAAMuB,YAAY,GAAIrC,IAAoB,IAA+B;EACvE,IAAI,CAACA,IAAI,EAAE,OAAOA,IAAI;EACtB,MAAM;IACJsC,mBAAmB,EAAEC,gBAAgB;IACrCC,QAAQ,EAAEC,OAAO;IACjBC,UAAU,EAAEC,SAAS;IACrBC,eAAe,EAAEC,aAAa;IAC9BC,aAAa,EAAEC,WAAW;IAC1BC,YAAY,EAAEC,UAAU;IACxB,GAAGvG;EACL,CAAC,GAAGsD,IAAI;EACR,OAAO;IACLuC,gBAAgB;IAChBE,OAAO;IACPE,SAAS;IACTE,aAAa;IACbE,WAAW;IACXE,UAAU;IACV,GAAGvG;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAA+G,YAAA,GAAAA,YAAA;AACF,MAAMa,OAAO,GACXC,KAA2B,IACQ;EACnC,IAAI,CAACpI,KAAK,CAACC,OAAO,CAACmI,KAAK,CAAC,EAAE,OAAO,EAAE;EACpC,OAAOA,KAAK,CAAC9H,GAAG,CAACyF,gBAAgB,CAAC;AACpC,CAAC;AAACxF,OAAA,CAAA4H,OAAA,GAAAA,OAAA;AACF,MAAME,MAAM,GAAIC,IAAc,IAAyB;EACrD,IAAI,CAACA,IAAI,EAAE,OAAOA,IAAI;EACtB,MAAM;IAAE7F,IAAI;IAAEC,IAAI;IAAE,GAAGf;EAAK,CAAC,GAAG2G,IAAI;EACpC,OAAO;IACL7F,IAAI,EAAEb,QAAQ,CAACa,IAAI,CAAC;IACpBC,IAAI,EAAEA,IAAI,GAAGd,QAAQ,CAACc,IAAI,CAAC,GAAG6F,SAAS;IACvC,GAAG5G;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAA8H,MAAA,GAAAA,MAAA;AACF,MAAMG,UAAU,GAAIC,QAAsB,IAA6B;EACrE,IAAI,CAACA,QAAQ,EAAE,OAAOA,QAAQ;EAC9B,MAAM;IAAEC,IAAI;IAAElG,MAAM;IAAE,GAAGb;EAAK,CAAC,GAAG8G,QAAQ;EAC1C,OAAO;IACLC,IAAI;IACJlG,MAAM,EAAED,QAAQ,CAACC,MAAM,CAAC;IACxB,GAAGb;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAiI,UAAA,GAAAA,UAAA;AACF,MAAMG,oBAAoB,GAAIC,cAG7B,IAAuD;EACtD,IAAI,CAACA,cAAc,EAAE,OAAOA,cAAc;EAC1C,MAAM;IAAEN,IAAI;IAAE,GAAG3G;EAAK,CAAC,GAAGiH,cAAc;EACxC,OAAO;IACLN,IAAI,EAAEE,UAAU,CAACF,IAAI,CAAC;IACtB,GAAG3G;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAoI,oBAAA,GAAAA,oBAAA;AACF,MAAME,OAAO,GAAIC,KAAiB,IAA2B;EAC3D,IAAI,CAAC9I,KAAK,CAACC,OAAO,CAAC6I,KAAK,CAAC,EAAE,OAAO,EAAE;EACpC,OAAOA,KAAK,CAACxI,GAAG,CAAC+H,MAAM,CAAC;AAC1B,CAAC;AACD;AAAA9H,OAAA,CAAAsI,OAAA,GAAAA,OAAA;AACA,MAAME,uBAAuB,GAAIT,IAA+B,IAAK;EACnE,IAAI,CAACA,IAAI,EAAE,OAAOA,IAAI;EACtB,MAAM;IACJ7F,IAAI;IACJ0B,UAAU,EAAED,SAAS;IACrBjB,SAAS;IACT+F,eAAe,EAAEC,aAAa;IAC9B,GAAGtH;EACL,CAAC,GAAG2G,IAAI;EACR,OAAO;IACLpE,SAAS;IACTzB,IAAI,EAAEb,QAAQ,CAACa,IAAI,CAAC;IACpBE,QAAQ,EAAEL,UAAU,CAACW,SAAS,CAAC;IAC/BgG,aAAa;IACb,GAAGtH;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAwI,uBAAA,GAAAA,uBAAA;AACF,MAAMG,wBAAwB,GAC5BJ,KAAkC,IACQ;EAC1C,IAAI,CAAC9I,KAAK,CAACC,OAAO,CAAC6I,KAAK,CAAC,EAAE,OAAO,EAAE;EACpC,OAAOA,KAAK,CAACxI,GAAG,CAACyI,uBAAuB,CAAC;AAC3C,CAAC;AAACxI,OAAA,CAAA2I,wBAAA,GAAAA,wBAAA;AACF,MAAMC,uBAAuB,GAC3BC,YAAuC,IACK;EAC5C,IAAI,CAACA,YAAY,EAAE,OAAOA,YAAY;EACtC,MAAM;IACJC,WAAW;IACXC,SAAS,EAAE;MAAEnF,UAAU,EAAED,SAAS;MAAEqF;IAAO,CAAC;IAC5CC,kBAAkB;IAClB,GAAG7H;EACL,CAAC,GAAGyH,YAAY;EAChB,OAAO;IACLC,WAAW,EAAEjG,aAAa,CAACiG,WAAW,CAAO;IAC7CI,QAAQ,EAAE;MACRvF,SAAS;MACTqF,MAAM;MACN,IAAI,QAAQ,IAAIH,YAAY,CAACE,SAAS,GAClC;QAAEI,MAAM,EAAEN,YAAY,CAACE,SAAS,CAACI;MAAO,CAAC,GACzC,CAAC,CAAC;IACR,CAAC;IACDC,eAAe,EAAEH,kBAAkB;IACnC,GAAG7H;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAA4I,uBAAA,GAAAA,uBAAA;AACF,MAAMS,OAAO,GAAIC,KAAgB,IAA0B;EACzD,IAAI,CAACA,KAAK,EAAE,OAAOA,KAAK;EACxB,MAAM;IACJC,YAAY,EAAEC,WAAW;IACzB9I,cAAc,EAAEC,aAAa;IAC7B,GAAGS;EACL,CAAC,GAAGkI,KAAK;EACT,OAAO;IACL3I,aAAa;IACb6I,WAAW;IACX,GAAGpI;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAqJ,OAAA,GAAAA,OAAA;AACF,MAAMI,kBAAkB,GACtBC,gBAAsC,IACH;EACnC,IAAI,CAACA,gBAAgB,EAAE,OAAOA,gBAAgB;EAC9C,MAAM;IACJ5F,YAAY,EAAED,WAAW;IACzBxB,OAAO,EAAEC,MAAM;IACf,GAAGlB;EACL,CAAC,GAAGsI,gBAAgB;EACpB,OAAO;IACL7F,WAAW;IACXvB,MAAM;IACN,GAAGlB;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAyJ,kBAAA,GAAAA,kBAAA;AACF,MAAME,wBAAwB,GAC5BvF,YAAwC,IACC;EACzC,IAAI,CAACA,YAAY,EAAE,OAAOA,YAAY;EACtC,OAAOA,YAAY,CAACrE,GAAG,CAAE+C,EAAE,KAAM;IAC/B8G,UAAU,EAAE9G,EAAE,CAAC+G,WAAW,GACtBJ,kBAAkB,CAAC3G,EAAE,CAAC+G,WAAW,CAAC,GAClC/G,EAAE,CAAC+G,WAAW;IAClBC,SAAS,EAAEL,kBAAkB,CAAC3G,EAAE,CAACiH,UAAU;EAC7C,CAAC,CAAC,CAAC;AACL,CAAC;AAAC/J,OAAA,CAAA2J,wBAAA,GAAAA,wBAAA;AACF,MAAMK,qBAAqB,GACzBzB,KAA8B,IACQ;EACtC,IAAI,CAACA,KAAK,EAAE,OAAOA,KAAK;EACxB,OAAOA,KAAK,CAACxI,GAAG,CAAEgI,IAAI,KAAM;IAC1BkC,UAAU,EAAEnC,MAAM,CAACC,IAAI,CAACmC,WAAW,CAAC;IACpCJ,SAAS,EAAEL,kBAAkB,CAAC1B,IAAI,CAACgC,UAAU,CAAC;IAC9CI,QAAQ,EAAEpC,IAAI,CAACoC,QAAQ;IACvBzB,aAAa,EAAEX,IAAI,CAACU;EACtB,CAAC,CAAC,CAAC;AACL,CAAC;AAACzI,OAAA,CAAAgK,qBAAA,GAAAA,qBAAA;AACF,MAAMI,oBAAoB,GACxBC,KAA6B,IACQ;EACrC,IAAI,CAACA,KAAK,EAAE,OAAOA,KAAK;EACxB,MAAM;IACJzG,UAAU,EAAED,SAAS;IACrBG,YAAY,EAAED,WAAW;IACzByG,SAAS,EAAEC,QAAQ;IACnB,GAAGnJ;EACL,CAAC,GAAGiJ,KAAK;EACT,OAAO;IACL1G,SAAS;IACTE,WAAW;IACX0G,QAAQ;IACR,GAAGnJ;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAoK,oBAAA,GAAAA,oBAAA;AACF,MAAMI,qBAAqB,GACzBC,MAA+B,IACO;EACtC,IAAI,CAACA,MAAM,EAAE,OAAOA,MAAM;EAC1B,OAAOA,MAAM,CAAC1K,GAAG,CAACqK,oBAAoB,CAAC;AACzC,CAAC;AAACpK,OAAA,CAAAwK,qBAAA,GAAAA,qBAAA;AACF,MAAME,eAAe,GACnBC,aAAgC,IACA;EAChC,IAAI,CAACA,aAAa,EAAE,OAAOA,aAAa;EACxC,MAAM;IACJC,UAAU,EAAEC,SAAS;IACrBC,SAAS,EAAEC,QAAQ;IACnBC,UAAU,EAAEC,SAAS;IACrB,GAAG7J;EACL,CAAC,GAAGuJ,aAAa;EACjB,OAAO;IACLE,SAAS;IACTE,QAAQ;IACRE,SAAS;IACT,GAAG7J;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAA0K,eAAA,GAAAA,eAAA;AACF,MAAMQ,iBAAiB,GACrBC,eAAoC,IACF;EAClC,IAAI,CAACA,eAAe,EAAE,OAAOA,eAAe;EAC5C,OAAOA,eAAe,CAACpL,GAAG,CAAEqL,OAAO,IAAKV,eAAe,CAACU,OAAO,CAAC,CAAC;AACnE,CAAC;AAACpL,OAAA,CAAAkL,iBAAA,GAAAA,iBAAA;AACF,MAAMG,+BAA+B,GACnCC,OAA0C,IACM;EAChD,IAAI,CAACA,OAAO,EAAE,OAAOA,OAAO;EAC5B,MAAM;IAAEC,eAAe,EAAEC,cAAc;IAAEC,MAAM,EAAEC,KAAK;IAAE,GAAGtK;EAAK,CAAC,GAAGkK,OAAO;EAC3E,OAAO;IACLE,cAAc;IACdE,KAAK;IACL,GAAGtK;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAqL,+BAAA,GAAAA,+BAAA;AAEF,MAAMM,SAAS,GAAIC,UAAuB,IAA4B;EACpE,IAAI,CAACA,UAAU,EAAE;IACf,OAAOA,UAAU;EACnB;EACA,MAAM;IAAEC,QAAQ,EAAEC,OAAO;IAAE,GAAG1K;EAAK,CAAC,GAAGwK,UAAU;EACjD,OAAO;IACLE,OAAO;IACP,GAAG1K;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAA2L,SAAA,GAAAA,SAAA;AACF,MAAMI,oBAAoB,GACxBC,kBAA0C,IACL;EACrC,IAAI,CAACA,kBAAkB,EAAE;IACvB,OAAOA,kBAAkB;EAC3B;EACA,MAAM;IACJC,WAAW,EAAEC,UAAU;IACvBpI,YAAY,EAAED,WAAW;IACzBsI,QAAQ;IACR,GAAG/K;EACL,CAAC,GAAG4K,kBAAkB;EACtB,OAAO;IACLnI,WAAW;IACXsI,QAAQ;IACRD,UAAU;IACV,GAAG9K;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAA+L,oBAAA,GAAAA,oBAAA;AACF,MAAMK,oBAAoB,GACxBC,kBAA0C,IACL;EACrC,IAAI,CAACA,kBAAkB,EAAE;IACvB,OAAOA,kBAAkB;EAC3B;EACA,MAAM;IACJC,YAAY,EAAEC,WAAW;IACzBC,YAAY,EAAEC,WAAW;IACzBC,OAAO,EAAEC,MAAM;IACf,GAAGvL;EACL,CAAC,GAAGiL,kBAAkB;EACtB,OAAO;IACLE,WAAW;IACXE,WAAW;IACXE,MAAM;IACN,GAAGvL;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAoM,oBAAA,GAAAA,oBAAA;AACF,MAAMQ,WAAW,GAAIC,KAAoB,IAA8B;EACrE,IAAI,CAACA,KAAK,EAAE;IACV,OAAOA,KAAK;EACd;EACA,OAAO;IACLC,oBAAoB,EAAED,KAAK,CAACE,uBAAuB;IACnDC,uBAAuB,EAAEH,KAAK,CAACI,0BAA0B;IACzDC,QAAQ,EAAEL,KAAK,CAACM,SAAS;IACzBC,GAAG,EAAEP,KAAK,CAACO,GAAG;IACdC,mBAAmB,EAAER,KAAK,CAACS,qBAAqB;IAChDC,OAAO,EAAEV,KAAK,CAACW,QAAQ;IACvBC,UAAU,EAAEZ,KAAK,CAACa,WAAW;IAC7BC,iBAAiB,EAAEd,KAAK,CAACe;EAC3B,CAAC;AACH,CAAC;AAAC5N,OAAA,CAAA4M,WAAA,GAAAA,WAAA;AACF,MAAMiB,kBAAkB,GACtBC,KAA2B,IACQ;EACnC,IAAI,CAACA,KAAK,EAAE;IACV,OAAOA,KAAK;EACd;EACA,MAAM;IACJlK,UAAU,EAAED,SAAS;IACrBoK,cAAc,EAAEC,aAAa;IAC7B,GAAG5M;EACL,CAAC,GAAG0M,KAAK;EACT,OAAO;IACLnK,SAAS;IACTqK,aAAa;IACb,GAAG5M;EACL,CAAC;AACH,CAAC;AAACpB,OAAA,CAAA6N,kBAAA,GAAAA,kBAAA;AAEF,MAAMI,iBAAiB,GACrBC,OAA4B,IACM;EAClC,OAAO;IACLC,GAAG,EAAED,OAAO,CAACC,GAAG;IAChBC,WAAW,EAAEF,OAAO,CAACG;EACvB,CAAC;AACH,CAAC;AAED,MAAMC,YAAY,GAAIC,UAA0B,IAA+B;EAC7E,OAAO;IACLC,GAAG,EAAED,UAAU,CAACC,GAAG;IACnBC,KAAK,EAAEF,UAAU,CAACE,KAAK;IACvBC,OAAO,EAAEH,UAAU,CAACG,OAAO;IAC3BC,kBAAkB,EAAEJ,UAAU,CAACK,oBAAoB;IACnDC,MAAM,EAAEN,UAAU,CAACM,MAAM;IACzBC,SAAS,EAAEP,UAAU,CAACO;EACxB,CAAC;AACH,CAAC;AAAC9O,OAAA,CAAAsO,YAAA,GAAAA,YAAA;AAEF,MAAMS,UAAU,GAAIC,QAAsB,IAA6B;EACrE,IAAI,SAAS,IAAIA,QAAQ,EAAE;IACzB,OAAO;MACLhG,MAAM,EAAEgG,QAAQ,CAAChG,MAAM;MACvBiG,OAAO,EAAEX,YAAY,CAACU,QAAQ,CAACC,OAAO;IACxC,CAAC;EACH;EACA,OAAOD,QAAQ;AACjB,CAAC;AAED,MAAME,WAAW,GAAIC,SAAwB,IAA8B;EACzE,IAAI,CAACA,SAAS,EAAE,OAAOA,SAAS;EAEhC,MAAMC,mBAAmB,GAAGD,SAAS,CAACE,iBAAiB;EAEvD,MAAMC,SAAS,GAAGH,SAAS,CAACG,SAAS;EACrC,MAAMC,WAAW,GACfD,SAAS,CAACE,YAAY,IAAIT,UAAU,CAACO,SAAS,CAACE,YAAY,CAAC;EAC9D,MAAMC,SAAS,GAAGH,SAAS,CAACG,SAAS,IAAIV,UAAU,CAACO,SAAS,CAACG,SAAS,CAAC;EAExE,OAAO;IACLC,YAAY,EAAEP,SAAS,CAACQ,aAAa;IACrCC,gBAAgB,EAAET,SAAS,CAACU,iBAAiB;IAC7CC,WAAW,EAAEX,SAAS,CAACY,aAAa;IACpCC,mBAAmB,EAAEb,SAAS,CAACc,qBAAqB;IACpDC,WAAW,EAAEf,SAAS,CAACgB,YAAY;IACnC/K,EAAE,EAAE+J,SAAS,CAAC/J,EAAE;IAChBgL,yBAAyB,EAAEjB,SAAS,CAACkB,4BAA4B;IACjEC,aAAa,EAAEnB,SAAS,CAACoB,eAAe;IACxCC,cAAc,EAAErB,SAAS,CAACsB,gBAAgB;IAC1CC,sBAAsB,EAAEvB,SAAS,CAACwB,yBAAyB;IAC3DC,YAAY,EAAEzB,SAAS,CAAC0B,cAAc;IACtCC,oBAAoB,EAAE3B,SAAS,CAAC4B,uBAAuB;IACvDC,gBAAgB,EAAE7B,SAAS,CAAC8B,kBAAkB;IAC9CC,0BAA0B,EAAE/B,SAAS,CAACgC,6BAA6B;IACnEC,iCAAiC,EAC/BjC,SAAS,CAACkC,qCAAqC;IACjDC,mBAAmB,EAAEnC,SAAS,CAACoC,qBAAqB;IACpDC,oBAAoB,EAAErC,SAAS,CAACsC,sBAAsB;IACtDC,oCAAoC,EAClCvC,SAAS,CAACwC,yCAAyC;IACrDC,mCAAmC,EACjCzC,SAAS,CAAC0C,wCAAwC;IACpDC,gBAAgB,EAAE3C,SAAS,CAAC4C,kBAAkB;IAC9CC,SAAS,EAAE7C,SAAS,CAAC8C,UAAU;IAC/BC,cAAc,EAAE/C,SAAS,CAACgD,iBAAiB;IAC3CC,gBAAgB,EAAEhD,mBAAmB,CAACrP,GAAG,CAACkO,iBAAiB,CAAC;IAC5DqB,SAAS,EAAE;MACT,IAAIC,WAAW,IAAI;QAAEA;MAAY,CAAC,CAAC;MACnC,IAAIE,SAAS,IAAI;QAAEA;MAAU,CAAC;IAChC;EACF,CAAC;AACH,CAAC;AAACzP,OAAA,CAAAkP,WAAA,GAAAA,WAAA;AAEF,MAAMmD,WAAW,GAAI7S,SAAwB,IAA8B;EACzE,IAAI,CAACA,SAAS,EAAE,OAAOA,SAAS;EAEhC,IAAID,WAAW,CAACC,SAAS,CAAC,EAAE;IAC1B,OAAOA,SAAS;EAClB;EAEA,MAAM8S,aAAa,GAAGA,CAAC;IACrBC,eAAe,EAAEC,cAAc;IAC/BC,gBAAgB,EAAEC,eAAe;IACjCC,cAAc,EAAEC,aAAa;IAC7B,GAAGxR;EACY,CAAC,MAAiC;IACjDoR,cAAc;IACdE,eAAe;IACfE,aAAa;IACb,GAAGxR;EACL,CAAC,CAAC;EACF,MAAMyR,QAAkE,GAAG,CAAC,CAAC;EAC7E,MAAMlT,OAAiE,GAAG,CAAC,CAAC;EAE5EmT,MAAM,CAACC,IAAI,CAACvT,SAAS,CAACqT,QAAQ,CAAC,CAACG,OAAO,CAAEzS,IAAI,IAAK;IAChDsS,QAAQ,CAACtS,IAAI,CAAC,GAAG+R,aAAa,CAAC9S,SAAS,CAACqT,QAAQ,CAACtS,IAAI,CAAC,CAAC;EAC1D,CAAC,CAAC;EAEFuS,MAAM,CAACC,IAAI,CAACvT,SAAS,CAACG,OAAO,CAAC,CAACqT,OAAO,CAAEzS,IAAI,IAAK;IAC/CZ,OAAO,CAACY,IAAI,CAAC,GAAG+R,aAAa,CAAC9S,SAAS,CAACG,OAAO,CAACY,IAAI,CAAC,CAAC;EACxD,CAAC,CAAC;EAEF,OAAO;IAAEsS,QAAQ;IAAElT;EAAQ,CAAC;AAC9B,CAAC;AAACK,OAAA,CAAAqS,WAAA,GAAAA,WAAA;AAEF,MAAMY,aAAa,GACjBC,WAA4B,IACE;EAC9B,IAAI,CAACA,WAAW,EAAE,OAAOA,WAAW;EACpC,OAAO;IACLrP,WAAW,EAAEqP,WAAW,CAACpP,YAAY;IACrC1B,QAAQ,EAAEL,UAAU,CAACmR,WAAW,CAACxQ,SAAS,CAAC;IAC3CT,MAAM,EAAED,QAAQ,CAACkR,WAAW,CAACjR,MAAM,CAAC;IACpCkR,UAAU,EAAED,WAAW,CAACE,WAAW;IACnCC,OAAO,EAAEH,WAAW,CAACI;EACvB,CAAC;AACH,CAAC;AAED,MAAMC,gBAAgB,GACpBC,cAAsC,KACU;EAChDC,UAAU,EAAED,cAAc,CAACE,WAAW;EACtCC,OAAO,EAAEH,cAAc,CAACG,OAAO,CAAC5T,GAAG,CAAE6T,MAAM,IACzCX,aAAa,CAACW,MAAM,CACtB;AACF,CAAC,CAAC;AAAC5T,OAAA,CAAAuT,gBAAA,GAAAA,gBAAA;AAEH,MAAMM,6BAA6B,GACjCC,KAAsE,IACzB;EAC7C,IAAKA,KAAK,CAAmCvL,KAAK,EAAE;IAClD,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb,CAAC;AAED,MAAMwL,oBAAoB,GACxBC,kBAEmC,IAGY;EAC/C,IAAI,CAACA,kBAAkB,EAAE,OAAOA,kBAAkB;EAClD,IAAIH,6BAA6B,CAACG,kBAAkB,CAAC,EAAE;IACrD,OAAO;MACL1R,MAAM,EAAE0R,kBAAkB,CAAC3R,OAAO;MAClCwB,WAAW,EAAEmQ,kBAAkB,CAAClQ,YAAY;MAC5CmQ,OAAO,EAAED,kBAAkB,CAACE,QAAQ;MACpCC,MAAM,EAAEH,kBAAkB,CAACI,OAAO;MAClCf,OAAO,EAAEW,kBAAkB,CAACV;IAC9B,CAAC;EACH;EAEA,OAAO;IACLhR,MAAM,EAAE0R,kBAAkB,CAAC3R,OAAO;IAClCgR,OAAO,EAAEW,kBAAkB,CAACV,QAAQ;IACpCzP,WAAW,EAAEmQ,kBAAkB,CAAClQ,YAAY;IAC5CyE,KAAK,EAAEyL,kBAAkB,CAACzL;EAC5B,CAAC;AACH,CAAC;AAED,MAAM8L,uBAAuB,GAC3BC,qBAAyD,IACR;EACjD,IAAI,CAACA,qBAAqB,EAAE,OAAOA,qBAAqB;EAExD,OAAO;IACLb,UAAU,EAAEa,qBAAqB,CAACZ,WAAW;IAC7CC,OAAO,EAAEW,qBAAqB,CAACX,OAAO,CAAC5T,GAAG,CACvC6T,MAAM,IACLG,oBAAoB,CAClBH,MACF,CACJ;EACF,CAAC;AACH,CAAC;AAAC5T,OAAA,CAAAqU,uBAAA,GAAAA,uBAAA;AAEF,MAAME,eAAe,GACnBC,aAAgC,IACA;EAChC,IAAI,CAACA,aAAa,EAAE,OAAOA,aAAa;EACxC,OAAO;IACLrI,QAAQ,EAAEqI,aAAa,CAACrI,QAAQ;IAChCxI,SAAS,EAAE6Q,aAAa,CAAC5Q,UAAU;IACnCC,WAAW,EAAE2Q,aAAa,CAAC1Q;EAC7B,CAAC;AACH,CAAC;AAAC9D,OAAA,CAAAuU,eAAA,GAAAA,eAAA;AAEF,MAAME,aAAa,GACjBC,WAA4B,IACE;EAC9B,OAAO;IACLnU,IAAI,EAAEmU,WAAW,CAACnU,IAAI;IACtB4H,IAAI,EAAEuM,WAAW,CAACvM;EACpB,CAAC;AACH,CAAC;AAACnI,OAAA,CAAAyU,aAAA,GAAAA,aAAA;AAEF,MAAME,4BAA4B,GAChC7G,KAAqC,IACQ;EAC7C,OAAO;IACLnK,SAAS,EAAEmK,KAAK,CAAClK,UAAU;IAC3BgR,iBAAiB,EAAE9G,KAAK,CAAC+G,kBAAkB;IAC3CC,cAAc,EAAEhH,KAAK,CAACiH;EACxB,CAAC;AACH,CAAC;AAAC/U,OAAA,CAAA2U,4BAAA,GAAAA,4BAAA;AAEF,MAAMK,mBAAmB,GACvBC,UAAiC,IACG;EACpC,OAAO;IACLC,IAAI,EAAED,UAAU,CAACC,IAAI;IACrBC,MAAM,EAAEF,UAAU,CAACE;EACrB,CAAC;AACH,CAAC;AAACnV,OAAA,CAAAgV,mBAAA,GAAAA,mBAAA;AAEF,MAAMI,iBAAiB,GACrBC,MAA2C,IACiB;EAC5D,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOA,MAAM;EACf;EAEA,OAAO;IACL5U,MAAM,EAAED,QAAQ,CAAC6U,MAAM,CAAC5U,MAAM,CAAC;IAC/B0D,MAAM,EAAEkR,MAAM,CAAClR,MAAM,CAACpE,GAAG,CAACwD,YAAY,CAAC;IACvCa,YAAY,EAAEiR,MAAM,CAACjR,YAAY,CAACrE,GAAG,CAAC8C,aAAa,CAAC;IACpDyS,SAAS,EAAED,MAAM,CAACC,SAAS;IAC3BC,SAAS,EAAEF,MAAM,CAACE;EACpB,CAAC;AACH,CAAC;AAACvV,OAAA,CAAAoV,iBAAA,GAAAA,iBAAA;AAEF,MAAMI,gBAAgB,GACpBC,KAAyB,IACQ;EACjC,OAAO;IACLxR,MAAM,EAAEwR,KAAK,CAACxR;EAChB,CAAC;AACH,CAAC;AAACjE,OAAA,CAAAwV,gBAAA,GAAAA,gBAAA;AAEF,MAAME,aAAa,GACjB7I,KAA0B,IACQ;EAClC,IAAIA,KAAK,KAAK,WAAW,EAAE;IACzB,OAAO,UAAU;EACnB;EACA,OAAOA,KAAK;AACd,CAAC;AAAC7M,OAAA,CAAA0V,aAAA,GAAAA,aAAA;AAEF,MAAMC,gBAAgB,GACpBC,cAAkC,IACD;EACjC,OAAO;IACLpH,GAAG,EAAEoH,cAAc,CAACpH,GAAG;IACvB;IACAC,KAAK,EAAEmH,cAAc,CAACnH,KAAK;IAC3BC,OAAO,EAAEkH,cAAc,CAAClH,OAAO;IAC/BC,kBAAkB,EAAEiH,cAAc,CAAChH,oBAAoB;IACvDC,MAAM,EAAE+G,cAAc,CAAC/G,MAAM;IAC7BC,SAAS,EAAE8G,cAAc,CAAC9G,SAAS;IACnC+G,KAAK,EAAED,cAAc,CAACC,KAAK;IAC3BhJ,KAAK,EAAE6I,aAAa,CAACE,cAAc,CAAC/I,KAAK;EAC3C,CAAC;AACH,CAAC;AAAC7M,OAAA,CAAA2V,gBAAA,GAAAA,gBAAA;AAEF,MAAMG,iBAAiB,GACrBF,cAAmC,IACD;EAClC,MAAM;IAAEpG,YAAY;IAAEC;EAAU,CAAC,GAAGmG,cAAc,CAACG,WAAW;EAE9D,OAAO;IACLxV,IAAI,EAAEqV,cAAc,CAACrV,IAAI;IACzB+I,KAAK,EAAEsM,cAAc,CAACtM,KAAK;IAC3ByM,WAAW,EAAE;MACX,IAAIvG,YAAY,GAAG;QAAED,WAAW,EAAEoG,gBAAgB,CAACnG,YAAY;MAAE,CAAC,GAAG,CAAC,CAAC,CAAC;MACxE,IAAIC,SAAS,GAAG;QAAEA,SAAS,EAAEkG,gBAAgB,CAAClG,SAAS;MAAE,CAAC,GAAG,CAAC,CAAC;IACjE;EACF,CAAC;AACH,CAAC;;AA4DD;AAAAzP,OAAA,CAAA8V,iBAAA,GAAAA,iBAAA"}