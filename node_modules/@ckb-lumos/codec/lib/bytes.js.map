{"version":3,"file":"bytes.js","names":["_utils","require","bytifyRawString","rawString","assertUtf8String","buffer","ArrayBuffer","length","view","DataView","i","c","charCodeAt","setUint8","Uint8Array","CHAR_0","CHAR_9","CHAR_A","CHAR_F","CHAR_a","bytifyHex","hex","assertHexString","u8a","from","j","c1","c2","n1","n2","bytifyArrayLike","xs","v","Number","isInteger","Error","bytify","bytesLike","Array","isArray","equal","a","b","aUint8Array","bUint8Array","equalUint8Array","HEX_CACHE","map","_","toString","padStart","hexify","buf","concat","bytesLikes","unmerged","totalSize","reduce","size","item","merged","offset","forEach","set"],"sources":["../src/bytes.ts"],"sourcesContent":["import { BytesLike } from \"./base\";\nimport { assertHexString, assertUtf8String } from \"./utils\";\n\nexport function bytifyRawString(rawString: string): Uint8Array {\n  assertUtf8String(rawString);\n\n  const buffer = new ArrayBuffer(rawString.length);\n  const view = new DataView(buffer);\n\n  for (let i = 0; i < rawString.length; i++) {\n    const c = rawString.charCodeAt(i);\n    view.setUint8(i, c);\n  }\n  return new Uint8Array(buffer);\n}\n\nconst CHAR_0 = \"0\".charCodeAt(0); // 48\nconst CHAR_9 = \"9\".charCodeAt(0); // 57\nconst CHAR_A = \"A\".charCodeAt(0); // 65\nconst CHAR_F = \"F\".charCodeAt(0); // 70\nconst CHAR_a = \"a\".charCodeAt(0); // 97\n// const CHAR_f = \"f\".charCodeAt(0); // 102\n\nfunction bytifyHex(hex: string): Uint8Array {\n  assertHexString(hex);\n\n  const u8a = Uint8Array.from({ length: hex.length / 2 - 1 });\n\n  for (let i = 2, j = 0; i < hex.length; i = i + 2, j++) {\n    const c1 = hex.charCodeAt(i);\n    const c2 = hex.charCodeAt(i + 1);\n\n    // prettier-ignore\n    const n1 = c1 <= CHAR_9 ? c1 - CHAR_0 : c1 <= CHAR_F ? c1 - CHAR_A + 10 : c1 - CHAR_a + 10\n    // prettier-ignore\n    const n2 = c2 <= CHAR_9 ? c2 - CHAR_0 : c2 <= CHAR_F ? c2 - CHAR_A + 10 : c2 - CHAR_a + 10\n\n    u8a[j] = (n1 << 4) | n2;\n  }\n\n  return u8a;\n}\n\nfunction bytifyArrayLike(xs: ArrayLike<number>): Uint8Array {\n  for (let i = 0; i < xs.length; i++) {\n    const v = xs[i];\n    if (v < 0 || v > 255 || !Number.isInteger(v)) {\n      throw new Error(\"invalid ArrayLike, all elements must be 0-255\");\n    }\n  }\n\n  return Uint8Array.from(xs);\n}\n\n/**\n * convert a {@link BytesLike} to an Uint8Array\n * @param bytesLike\n */\nexport function bytify(bytesLike: BytesLike): Uint8Array {\n  if (bytesLike instanceof ArrayBuffer) return new Uint8Array(bytesLike);\n  if (bytesLike instanceof Uint8Array) return Uint8Array.from(bytesLike);\n  if (typeof bytesLike === \"string\") return bytifyHex(bytesLike);\n  if (Array.isArray(bytesLike)) return bytifyArrayLike(bytesLike);\n\n  throw new Error(`Cannot convert ${bytesLike}`);\n}\n\nexport function equal(a: BytesLike, b: BytesLike): boolean {\n  const aUint8Array = bytify(a);\n  const bUint8Array = bytify(b);\n  return equalUint8Array(aUint8Array, bUint8Array);\n}\n\nfunction equalUint8Array(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = a.length; -1 < i; i -= 1) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\nconst HEX_CACHE = Array.from({ length: 256 }).map((_, i) =>\n  i.toString(16).padStart(2, \"0\")\n);\n/**\n * convert a {@link BytesLike} to an even length hex string prefixed with \"0x\"\n * @param buf\n * @example\n * hexify([0,1,2,3]) // \"0x010203\"\n * hexify(Buffer.from([1, 2, 3])) // \"0x010203\"\n */\nexport function hexify(buf: BytesLike): string {\n  let hex = \"\";\n\n  const u8a = bytify(buf);\n  for (let i = 0; i < u8a.length; i++) {\n    hex += HEX_CACHE[u8a[i]];\n  }\n\n  return \"0x\" + hex;\n}\n\nexport function concat(...bytesLikes: BytesLike[]): Uint8Array {\n  const unmerged = bytesLikes.map(bytify);\n  const totalSize = unmerged.reduce((size, item) => size + item.length, 0);\n\n  const merged = new Uint8Array(totalSize);\n\n  let offset = 0;\n  unmerged.forEach((item) => {\n    merged.set(item, offset);\n    offset += item.length;\n  });\n\n  return merged;\n}\n\n// export function split(bytes: BytesLike, points: number[]): Uint8Array[] {\n//   const u8vec = bytify(bytes);\n//   const result: Uint8Array[] = [];\n//   let offset = 0;\n//   for (const point of points) {\n//     result.push(u8vec.slice(offset, offset + point));\n//     offset += point;\n//   }\n//   result.push(u8vec.slice(offset));\n//   return result;\n// }\n"],"mappings":"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"}