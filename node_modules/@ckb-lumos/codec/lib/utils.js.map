{"version":3,"file":"utils.js","names":["_error","require","CHAR_0","charCodeAt","CHAR_9","CHAR_A","CHAR_F","CHAR_a","CHAR_f","assertStartsWith0x","str","startsWith","Error","assertHexChars","strLen","length","i","char","assertHexDecimal","byteLength","assertHexString","assertUtf8String","c","assertBufferLength","buf","assertMinBufferLength","isObjectLike","x","trackCodeExecuteError","path","fn","e","readableError","isCodecExecuteError","CodecExecuteError","updateKey"],"sources":["../src/utils.ts"],"sourcesContent":["import {\n  CodecBaseParseError,\n  CodecExecuteError,\n  isCodecExecuteError,\n} from \"./error\";\n\nconst CHAR_0 = \"0\".charCodeAt(0); // 48\nconst CHAR_9 = \"9\".charCodeAt(0); // 57\nconst CHAR_A = \"A\".charCodeAt(0); // 65\nconst CHAR_F = \"F\".charCodeAt(0); // 70\nconst CHAR_a = \"a\".charCodeAt(0); // 97\nconst CHAR_f = \"f\".charCodeAt(0); // 102\n\nfunction assertStartsWith0x(str: string): void {\n  if (!str || !str.startsWith(\"0x\")) {\n    throw new Error(\"Invalid hex string\");\n  }\n}\n\nfunction assertHexChars(str: string): void {\n  const strLen = str.length;\n\n  for (let i = 2; i < strLen; i++) {\n    const char = str[i].charCodeAt(0);\n    if (\n      (char >= CHAR_0 && char <= CHAR_9) ||\n      (char >= CHAR_a && char <= CHAR_f) ||\n      (char >= CHAR_A && char <= CHAR_F)\n    ) {\n      continue;\n    }\n\n    throw new Error(`Invalid hex character ${str[i]} in the string ${str}`);\n  }\n}\n\nexport function assertHexDecimal(str: string, byteLength?: number): void {\n  assertStartsWith0x(str);\n  if (str.length === 2) {\n    throw new Error(\n      \"Invalid hex decimal length, should be at least 1 character, the '0x' is incorrect, should be '0x0'\"\n    );\n  }\n\n  const strLen = str.length;\n\n  if (typeof byteLength === \"number\" && strLen > byteLength * 2 + 2) {\n    throw new Error(\n      `Invalid hex decimal length, should be less than ${byteLength} bytes, got ${\n        strLen / 2 - 1\n      } bytes`\n    );\n  }\n\n  assertHexChars(str);\n}\n\n/**\n * Assert if a string is a valid hex string that is matched with /^0x([0-9a-fA-F][0-9a-fA-F])*$/\n * @param str\n * @param byteLength\n */\nexport function assertHexString(str: string, byteLength?: number): void {\n  assertStartsWith0x(str);\n\n  const strLen = str.length;\n\n  if (strLen % 2) {\n    throw new Error(\"Invalid hex string length, must be even!\");\n  }\n\n  if (typeof byteLength === \"number\" && strLen !== byteLength * 2 + 2) {\n    throw new Error(\"Invalid hex string length, not match with byteLength!\");\n  }\n\n  assertHexChars(str);\n}\n\nexport function assertUtf8String(str: string): void {\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c > 0xff) {\n      throw new Error(\"Invalid UTF-8 raw string!\");\n    }\n  }\n}\n\nexport function assertBufferLength(\n  buf: { byteLength: number },\n  length: number\n): void {\n  if (buf.byteLength !== length) {\n    throw new Error(\n      `Invalid buffer length: ${buf.byteLength}, should be ${length}`\n    );\n  }\n}\n\nexport function assertMinBufferLength(\n  buf: { byteLength: number },\n  length: number\n): void {\n  if (buf.byteLength < length) {\n    throw new Error(\n      `Invalid buffer length: ${buf.byteLength}, should be at least ${length}`\n    );\n  }\n}\n\nexport function isObjectLike(x: unknown): x is Record<string, unknown> {\n  if (!x) return false;\n  return typeof x === \"object\";\n}\n\nexport function trackCodeExecuteError<T>(\n  path: string | number | symbol,\n  fn: () => T\n): T {\n  try {\n    return fn();\n  } catch (e) {\n    const readableError = isCodecExecuteError(e)\n      ? e\n      : new CodecExecuteError(e as CodecBaseParseError);\n    readableError.updateKey(path);\n    throw readableError;\n  }\n}\n"],"mappings":"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"}