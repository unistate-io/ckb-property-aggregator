{"version":3,"file":"common.js","names":["_helpers","require","_secp256k1_blake160_multisig","_interopRequireDefault","_from_info","_secp256k1_blake","_configManager","_locktime_pool","_interopRequireWildcard","_base","_anyone_can_pay","_immutable","_helper","_bi","_omnilock","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ScriptValue","values","defaultLogger","level","message","console","log","lockScriptInfos","configHashCode","_predefinedInfos","_customInfos","infos","resetLockScriptInfos","getLockScriptInfos","registerCustomLockScriptInfos","generateLockScriptInfos","config","undefined","getConfig","getPredefinedInfos","_config","_config2","_config3","_config4","secpTemplate","SCRIPTS","SECP256K1_BLAKE160","multisigTemplate","SECP256K1_BLAKE160_MULTISIG","acpTemplate","ANYONE_CAN_PAY","omnilockTemplate","OMNILOCK","predefinedInfos","push","codeHash","CODE_HASH","hashType","HASH_TYPE","lockScriptInfo","secp256k1Blake160","secp256k1Blake160Multisig","anyoneCanPay","omnilock","utils","hashCode","Buffer","from","JSON","stringify","length","transfer","txSkeleton","fromInfos","toAddress","amount","changeAddress","tipHeader","useLocktimeCellsFirst","LocktimePoolCellCollector","LocktimePoolCellCollectorClass","_targetLockScriptInfo","_amount","BI","Error","toScript","parseAddress","targetOutput","cellOutput","capacity","toString","lock","type","data","targetLockScriptInfo","find","setupOutputCell","update","outputs","injectCapacity","enableDeductCapacity","deductAmount","changeLockScript","parseFromInfo","fromScript","changeCell","minimalChangeCapacity","minimalCellCapacityCompatible","changeCapacity","result","locktimePool","injectCapacityWithoutChangeCompatible","LocktimeCellCollector","gt","_commonTransferCompatible","eq","lt","sub","payFee","prepareSigningEntries","_commonTransfer","BigInt","cellProvider","getInputKey","input","_input$outPoint","_input$outPoint2","outPoint","txHash","index","previousInputs","Set","add","fromScripts","map","fromInfo","_deductCapacityCompatible","loop1","cellCollectors","CellCollector","cellCollector","inputCell","collect","inputKey","collectInputCompatible","needCapacity","inputCapacity","availableCapacity","deductCapacity","_capacity","lastFreezedOutput","filter","field","maxBy","i","size","output","validate","equals","clonedOutput","parse","cellCapacity","gte","since","defaultWitness","setupInputCell","lastOutputIndex","lastOutput","lastOutputCapacity","lastOutputFixedEntryIndex","findIndex","fixedEntry","isAcpScript","destroyable","_needCapacity","remove","fixedEntries","minimalOutputCapacity","canUseCapacity","clonedLastOutput","outputCapacity","_txSkeleton$get$get","inputLock","payFeeByFeeRate","feeRate","newTxSkeleton","currentTransactionSize","getTransactionSize","fee","calculateFeeCompatible","calculateFee","ratio","base","mul","div","tx","createTransactionFromSkeleton","getTransactionSizeByTx","serializedTx","blockchain","Transaction","pack","byteLength","_default","__tests__","exports"],"sources":["../src/common.ts"],"sourcesContent":["import {\n  parseAddress,\n  TransactionSkeletonType,\n  Options,\n  createTransactionFromSkeleton,\n  minimalCellCapacityCompatible,\n} from \"@ckb-lumos/helpers\";\nimport secp256k1Blake160Multisig from \"./secp256k1_blake160_multisig\";\nimport { FromInfo, parseFromInfo } from \"./from_info\";\nimport secp256k1Blake160 from \"./secp256k1_blake160\";\nimport { getConfig, Config } from \"@ckb-lumos/config-manager\";\nimport locktimePool, {\n  CellCollector as LocktimePoolCellCollectorClass,\n} from \"./locktime_pool\";\nimport {\n  Address,\n  Header,\n  Script,\n  values,\n  Cell,\n  HexString,\n  Hash,\n  PackedSince,\n  utils,\n  Transaction,\n  HashType,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport anyoneCanPay from \"./anyone_can_pay\";\nconst { ScriptValue } = values;\nimport { Set } from \"immutable\";\nimport { isAcpScript } from \"./helper\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { CellCollectorConstructor, CellCollectorType } from \"./type\";\nimport omnilock from \"./omnilock\";\n\nfunction defaultLogger(level: string, message: string) {\n  console.log(`[${level}] ${message}`);\n}\n\nexport type { CellCollectorConstructor, CellCollectorType };\n\n/**\n * LockScriptInfo describes how to integrate a lock script in transaction building.\n *\n * Custom lock scripts must register their LockScriptInfo before using\n * `transfer`, `injectCapacity`, `payFee`, `payFeeByFeeRate` via\n * `registerCustomLockScriptInfos`.\n *\n * See an example in\n * [custom_lock_script_info.ts](https://github.com/ckb-js/lumos/blob/develop/packages/common-scripts/examples/custom_lock_script_info/custom_lock_script_info.ts).\n */\nexport interface LockScriptInfo {\n  codeHash: Hash;\n  hashType: HashType;\n  /**\n   * @interface\n   */\n  lockScriptInfo: {\n    /**\n     * Collects input cell candidates for the lock script.\n     *\n     * It's a constructor that initializes objects implementing function\n     * `collect()` to provide input cells. Attention that transaction builders\n     * will not match `fromInfo` and lock script. It's the responsibility of\n     * `CellCollector` to filter based on `fromInfo`. For example, when\n     * `fromInfo` does not match, the function `collect()` should not return\n     * any cell.\n     */\n    CellCollector: CellCollectorConstructor;\n\n    /**\n     * Called when a candidate input cell is found.\n     *\n     * What this function should do:\n     *\n     * 1. Frist double-check the cell and decide whether continue the following steps or skip.\n     * 2. Add the cell as an input in the `txSkeleton` and an output cell with\n     *    the same fields since functions like `transfer`, `injectCapacity`,\n     *    `payFee`, and `payFeeByFeeRate` collects account balance in outputs.\n     * 3. Add `cellDeps`\n     * 4. Prefill witnesses to ensure the transaction size will not increase after signing.\n     *\n     * @param txSkeleton transaction skeleton built so far\n     * @param inputCell the new input cell candidate\n     * @param fromInfo which account the inputCell belongs to\n     * @return the updated transaction skeleton\n     */\n    setupInputCell(\n      txSkeleton: TransactionSkeletonType,\n      inputCell: Cell,\n      fromInfo?: FromInfo,\n      options?: {\n        config?: Config;\n        defaultWitness?: HexString;\n        since?: PackedSince;\n      }\n    ): Promise<TransactionSkeletonType>;\n\n    /**\n     * Scans the transaction and add signing entries into `txSkeleton.signingEnties`.\n     * @return the updated txSkeleton\n     */\n    prepareSigningEntries(\n      txSkeleton: TransactionSkeletonType,\n      options: Options\n    ): TransactionSkeletonType;\n\n    setupOutputCell?: (\n      txSkeleton: TransactionSkeletonType,\n      outputCell: Cell,\n      options: Options\n    ) => Promise<TransactionSkeletonType>;\n  };\n}\ntype LockScriptInfosType = {\n  configHashCode: number;\n  _predefinedInfos: LockScriptInfo[];\n  _customInfos: LockScriptInfo[];\n  infos: LockScriptInfo[];\n};\n/**\n * `infos` includes predefined and customized.\n */\nconst lockScriptInfos: LockScriptInfosType = {\n  configHashCode: 0,\n  _predefinedInfos: [],\n  _customInfos: [],\n  get infos(): LockScriptInfo[] {\n    return [...this._predefinedInfos, ...this._customInfos];\n  },\n};\n\nfunction resetLockScriptInfos(): void {\n  lockScriptInfos.configHashCode = 0;\n  lockScriptInfos._predefinedInfos = [];\n  lockScriptInfos._customInfos = [];\n}\n\nfunction getLockScriptInfos(): LockScriptInfosType {\n  return lockScriptInfos;\n}\n\n/** Registers LockScriptInfo for custom scripts. */\nexport function registerCustomLockScriptInfos(infos: LockScriptInfo[]): void {\n  lockScriptInfos._customInfos = infos;\n}\n\nfunction generateLockScriptInfos({ config = undefined }: Options = {}): void {\n  config = config || getConfig();\n\n  // lazy load\n  const getPredefinedInfos = () => {\n    const secpTemplate = config?.SCRIPTS.SECP256K1_BLAKE160;\n    const multisigTemplate = config?.SCRIPTS.SECP256K1_BLAKE160_MULTISIG;\n    const acpTemplate = config?.SCRIPTS.ANYONE_CAN_PAY;\n    const omnilockTemplate = config?.SCRIPTS.OMNILOCK;\n\n    const predefinedInfos: LockScriptInfo[] = [];\n\n    if (secpTemplate) {\n      predefinedInfos.push({\n        codeHash: secpTemplate.CODE_HASH,\n        hashType: secpTemplate.HASH_TYPE,\n        lockScriptInfo: secp256k1Blake160,\n      });\n    } else {\n      defaultLogger(\n        \"warn\",\n        \"SECP256K1_BLAKE160 script info not found in config!\"\n      );\n    }\n\n    if (multisigTemplate) {\n      predefinedInfos.push({\n        codeHash: multisigTemplate.CODE_HASH,\n        hashType: multisigTemplate.HASH_TYPE,\n        lockScriptInfo: secp256k1Blake160Multisig,\n      });\n    } else {\n      defaultLogger(\n        \"warn\",\n        \"SECP256K1_BLAKE160_MULTISIG script info not found in config!\"\n      );\n    }\n\n    if (acpTemplate) {\n      predefinedInfos.push({\n        codeHash: acpTemplate.CODE_HASH,\n        hashType: acpTemplate.HASH_TYPE,\n        lockScriptInfo: anyoneCanPay,\n      });\n    } else {\n      defaultLogger(\"warn\", \"ANYONE_CAN_PAY script info not found in config!\");\n    }\n    if (omnilockTemplate) {\n      predefinedInfos.push({\n        codeHash: omnilockTemplate.CODE_HASH,\n        hashType: omnilockTemplate.HASH_TYPE,\n        lockScriptInfo: omnilock,\n      });\n    } else {\n      defaultLogger(\"warn\", \"OMNILOCK script info not found in config!\");\n    }\n\n    return predefinedInfos;\n  };\n\n  const configHashCode: number = utils.hashCode(\n    Buffer.from(JSON.stringify(config))\n  );\n\n  if (lockScriptInfos.infos.length === 0) {\n    lockScriptInfos._predefinedInfos = getPredefinedInfos();\n    lockScriptInfos.configHashCode = configHashCode;\n  } else {\n    if (configHashCode !== lockScriptInfos.configHashCode) {\n      defaultLogger(`warn`, \"`config` changed, regenerate lockScriptInfos!\");\n      lockScriptInfos._predefinedInfos = getPredefinedInfos();\n      lockScriptInfos.configHashCode = configHashCode;\n    }\n  }\n}\n\n/**\n *\n * @param txSkeleton\n * @param fromInfos\n * @param toAddress\n * @param changeAddress\n * @param amount\n * @param tipHeader will not use locktime cells if tipHeader not provided\n * @param options\n */\nexport async function transfer(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  toAddress: Address,\n  amount: BIish,\n  changeAddress?: Address,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    LocktimePoolCellCollector = LocktimePoolCellCollectorClass,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    LocktimePoolCellCollector?: CellCollectorConstructor;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const _amount = BI.from(amount);\n  if (!toAddress) {\n    throw new Error(\"You must provide a to address!\");\n  }\n\n  const toScript: Script = parseAddress(toAddress, { config });\n  const targetOutput: Cell = {\n    cellOutput: {\n      capacity: \"0x\" + _amount.toString(16),\n      lock: toScript,\n      type: undefined,\n    },\n    data: \"0x\",\n  };\n\n  generateLockScriptInfos({ config });\n\n  const targetLockScriptInfo: LockScriptInfo | undefined =\n    lockScriptInfos.infos.find((lockScriptInfo) => {\n      return (\n        lockScriptInfo.codeHash === toScript.codeHash &&\n        lockScriptInfo.hashType === toScript.hashType\n      );\n    });\n\n  if (\n    targetLockScriptInfo &&\n    targetLockScriptInfo.lockScriptInfo?.setupOutputCell\n  ) {\n    txSkeleton = await targetLockScriptInfo.lockScriptInfo.setupOutputCell(\n      txSkeleton,\n      targetOutput,\n      {\n        config,\n      }\n    );\n  } else {\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push(targetOutput);\n    });\n  }\n\n  txSkeleton = await injectCapacity(\n    txSkeleton,\n    fromInfos,\n    _amount.toString(),\n    changeAddress,\n    tipHeader,\n    {\n      config,\n      useLocktimeCellsFirst,\n      LocktimePoolCellCollector,\n    }\n  );\n\n  return txSkeleton;\n}\n\nexport async function injectCapacity(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: BIish,\n  changeAddress?: Address,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    LocktimePoolCellCollector = LocktimePoolCellCollectorClass,\n    enableDeductCapacity = true,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    LocktimePoolCellCollector?: CellCollectorConstructor;\n    enableDeductCapacity?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const _amount = BI.from(amount);\n  let deductAmount = _amount;\n\n  if (fromInfos.length === 0) {\n    throw new Error(\"No from info provided!\");\n  }\n\n  const changeLockScript: Script = parseFromInfo(\n    changeAddress || fromInfos[0],\n    { config }\n  ).fromScript;\n  const changeCell: Cell = {\n    cellOutput: {\n      capacity: \"0x0\",\n      lock: changeLockScript,\n      type: undefined,\n    },\n    data: \"0x\",\n  };\n  const minimalChangeCapacity: BI = BI.from(\n    minimalCellCapacityCompatible(changeCell)\n  );\n  let changeCapacity: BI = BI.from(0);\n  if (useLocktimeCellsFirst) {\n    if (tipHeader) {\n      const result = await locktimePool.injectCapacityWithoutChangeCompatible(\n        txSkeleton,\n        fromInfos,\n        deductAmount.toString(),\n        tipHeader,\n        minimalChangeCapacity.toString(),\n        {\n          config,\n          LocktimeCellCollector: LocktimePoolCellCollector,\n          enableDeductCapacity,\n        }\n      );\n      txSkeleton = result.txSkeleton;\n      deductAmount = BI.from(result.capacity);\n      // if deductAmount > 0, changeCapacity must be 0\n      changeCapacity = BI.from(result.changeCapacity);\n    }\n\n    if (deductAmount.gt(0)) {\n      const result = await _commonTransferCompatible(\n        txSkeleton,\n        fromInfos,\n        deductAmount,\n        minimalChangeCapacity,\n        {\n          config,\n          enableDeductCapacity,\n        }\n      );\n      txSkeleton = result.txSkeleton;\n      deductAmount = result.capacity;\n      changeCapacity = result.changeCapacity;\n    } else if (\n      deductAmount.eq(0) &&\n      changeCapacity.gt(0) &&\n      changeCapacity.lt(minimalChangeCapacity)\n    ) {\n      const result = await _commonTransferCompatible(\n        txSkeleton,\n        fromInfos,\n        minimalChangeCapacity.sub(changeCapacity),\n        BI.from(0),\n        { config, enableDeductCapacity }\n      );\n      txSkeleton = result.txSkeleton;\n      deductAmount = result.capacity;\n      changeCapacity = result.changeCapacity;\n    }\n  } else {\n    const result = await _commonTransferCompatible(\n      txSkeleton,\n      fromInfos,\n      deductAmount,\n      minimalChangeCapacity,\n      {\n        config,\n        enableDeductCapacity,\n      }\n    );\n    txSkeleton = result.txSkeleton;\n    deductAmount = result.capacity;\n    changeCapacity = result.changeCapacity;\n\n    if (tipHeader) {\n      if (deductAmount.gt(0)) {\n        const result = await locktimePool.injectCapacityWithoutChangeCompatible(\n          txSkeleton,\n          fromInfos,\n          deductAmount.toString(),\n          tipHeader,\n          minimalChangeCapacity.toString(),\n          {\n            config,\n            LocktimeCellCollector: LocktimePoolCellCollector,\n            enableDeductCapacity,\n          }\n        );\n        txSkeleton = result.txSkeleton;\n        deductAmount = BI.from(result.capacity);\n        changeCapacity = BI.from(result.changeCapacity);\n      } else if (\n        deductAmount.eq(0) &&\n        changeCapacity.gt(0) &&\n        changeCapacity.lt(minimalChangeCapacity)\n      ) {\n        const result = await locktimePool.injectCapacityWithoutChangeCompatible(\n          txSkeleton,\n          fromInfos,\n          minimalChangeCapacity.sub(changeCapacity).toString(),\n          tipHeader,\n          0,\n          {\n            config,\n            LocktimeCellCollector: LocktimePoolCellCollector,\n            enableDeductCapacity,\n          }\n        );\n        txSkeleton = result.txSkeleton;\n        deductAmount = BI.from(result.capacity);\n        changeCapacity = BI.from(result.changeCapacity);\n      }\n    }\n  }\n\n  if (deductAmount.gt(0)) {\n    throw new Error(\"Not enough capacity in from infos!\");\n  }\n\n  if (changeCapacity.gt(0) && changeCapacity.lt(minimalChangeCapacity)) {\n    throw new Error(\"Not enough capacity in from infos for change!\");\n  }\n\n  if (changeCapacity.gt(0)) {\n    changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push(changeCell);\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport async function payFee(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: BIish,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    enableDeductCapacity = true,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    enableDeductCapacity?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  return injectCapacity(txSkeleton, fromInfos, amount, undefined, tipHeader, {\n    config,\n    useLocktimeCellsFirst,\n    enableDeductCapacity,\n  });\n}\n\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  { config = undefined }: Options = {}\n): TransactionSkeletonType {\n  config = config || getConfig();\n\n  generateLockScriptInfos({ config });\n\n  for (const lockScriptInfo of lockScriptInfos.infos) {\n    txSkeleton = lockScriptInfo.lockScriptInfo.prepareSigningEntries(\n      txSkeleton,\n      { config }\n    );\n  }\n\n  return txSkeleton;\n}\n\nasync function _commonTransfer(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: bigint,\n  minimalChangeCapacity: bigint,\n  {\n    config = undefined,\n    enableDeductCapacity = true,\n  }: Options & { enableDeductCapacity?: boolean } = {}\n): Promise<{\n  txSkeleton: TransactionSkeletonType;\n  capacity: bigint;\n  changeCapacity: bigint;\n}> {\n  const result = await _commonTransferCompatible(\n    txSkeleton,\n    fromInfos,\n    amount,\n    minimalChangeCapacity,\n    {\n      config,\n      enableDeductCapacity,\n    }\n  );\n  return {\n    txSkeleton: result.txSkeleton,\n    capacity: BigInt(result.capacity.toString()),\n    changeCapacity: BigInt(result.changeCapacity.toString()),\n  };\n}\n\nasync function _commonTransferCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: BIish,\n  minimalChangeCapacity: BIish,\n  {\n    config = undefined,\n    enableDeductCapacity = true,\n  }: Options & { enableDeductCapacity?: boolean } = {}\n): Promise<{\n  txSkeleton: TransactionSkeletonType;\n  capacity: BI;\n  changeCapacity: BI;\n}> {\n  config = config || getConfig();\n  let _amount = BI.from(amount);\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(\"Cell Provider is missing!\");\n  }\n\n  const getInputKey = (input: Cell) =>\n    `${input.outPoint?.txHash}_${input.outPoint?.index}`;\n  let previousInputs = Set<string>();\n  for (const input of txSkeleton.get(\"inputs\")) {\n    previousInputs = previousInputs.add(getInputKey(input));\n  }\n\n  const fromScripts: Script[] = fromInfos.map((fromInfo) => {\n    return parseFromInfo(fromInfo, { config }).fromScript;\n  });\n\n  for (const fromScript of fromScripts) {\n    if (enableDeductCapacity && _amount.gt(0)) {\n      [txSkeleton, _amount] = _deductCapacityCompatible(\n        txSkeleton,\n        fromScript,\n        _amount\n      );\n    }\n  }\n\n  generateLockScriptInfos({ config });\n\n  let changeCapacity: BI = BI.from(0);\n\n  if (_amount.gt(0)) {\n    // collect cells\n    loop1: for (const fromInfo of fromInfos) {\n      const cellCollectors = lockScriptInfos.infos.map((lockScriptInfo) => {\n        return new lockScriptInfo.lockScriptInfo.CellCollector(\n          fromInfo,\n          cellProvider,\n          {\n            config,\n          }\n        );\n      });\n\n      for (const cellCollector of cellCollectors) {\n        for await (const inputCell of cellCollector.collect()) {\n          const inputKey: string = getInputKey(inputCell);\n          if (previousInputs.has(inputKey)) {\n            continue;\n          }\n          previousInputs = previousInputs.add(inputKey);\n          const result = await collectInputCompatible(\n            txSkeleton,\n            inputCell,\n            fromInfo,\n            {\n              config,\n              needCapacity: _amount,\n            }\n          );\n          txSkeleton = result.txSkeleton;\n\n          const inputCapacity: BI = BI.from(result.availableCapacity);\n          let deductCapacity: BI = inputCapacity;\n          if (deductCapacity.gt(_amount)) {\n            deductCapacity = _amount;\n          }\n          _amount = _amount.sub(deductCapacity);\n          changeCapacity = changeCapacity.add(\n            inputCapacity.sub(deductCapacity)\n          );\n\n          if (\n            _amount.eq(0) &&\n            (changeCapacity.eq(0) || changeCapacity.gt(minimalChangeCapacity))\n          ) {\n            break loop1;\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    txSkeleton,\n    capacity: _amount,\n    changeCapacity,\n  };\n}\n\nfunction _deductCapacityCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromScript: Script,\n  capacity: BIish\n): [TransactionSkeletonType, BI] {\n  /*\n   * First, check if there is any output cells that contains enough capacity\n   * for us to tinker with.\n   *\n   * TODO: the solution right now won't cover all cases, some outputs before the\n   * last output might still be tinkerable, right now we are working on the\n   * simple solution, later we can change this for more optimizations.\n   */\n  let _capacity = BI.from(capacity);\n  const lastFreezedOutput = txSkeleton\n    .get(\"fixedEntries\")\n    .filter(({ field }) => field === \"outputs\")\n    .maxBy(({ index }) => index);\n  let i = lastFreezedOutput ? lastFreezedOutput.index + 1 : 0;\n  for (; i < txSkeleton.get(\"outputs\").size && _capacity.gt(0); i++) {\n    const output = txSkeleton.get(\"outputs\").get(i);\n    if (\n      output &&\n      new ScriptValue(output.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    ) {\n      const clonedOutput: Cell = JSON.parse(JSON.stringify(output));\n      const cellCapacity = BI.from(clonedOutput.cellOutput.capacity);\n      const availableCapacity: BI = cellCapacity;\n      let deductCapacity;\n      if (_capacity.gte(availableCapacity)) {\n        deductCapacity = availableCapacity;\n      } else {\n        deductCapacity = cellCapacity.sub(\n          minimalCellCapacityCompatible(clonedOutput)\n        );\n        if (deductCapacity.gt(capacity)) {\n          deductCapacity = capacity;\n        }\n      }\n      _capacity = _capacity.sub(deductCapacity);\n      clonedOutput.cellOutput.capacity =\n        \"0x\" + cellCapacity.sub(deductCapacity).toString(16);\n\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.update(i, () => clonedOutput);\n      });\n    }\n  }\n  // Remove all output cells with capacity equal to 0\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.filter(\n      (output) =>\n        BI.from(output.cellOutput.capacity).toString() !== BI.from(0).toString()\n    );\n  });\n\n  return [txSkeleton, _capacity];\n}\n\n// Alter output generated by `setupInputCell`\nasync function collectInputCompatible(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  fromInfo?: FromInfo,\n  {\n    config = undefined,\n    since = undefined,\n    defaultWitness = \"0x\",\n    needCapacity = undefined,\n  }: Options & {\n    defaultWitness?: HexString;\n    since?: PackedSince;\n    needCapacity?: BIish;\n  } = {}\n): Promise<{\n  txSkeleton: TransactionSkeletonType;\n  availableCapacity: BI;\n}> {\n  config = config || getConfig();\n\n  txSkeleton = await setupInputCell(txSkeleton, inputCell, fromInfo, {\n    config,\n    since,\n    defaultWitness,\n  });\n\n  const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n  const lastOutput: Cell | undefined = txSkeleton\n    .get(\"outputs\")\n    .get(lastOutputIndex);\n  /* c8 ignore next 3 */\n  if (!lastOutput) {\n    throw new Error(\"Impossible: can not find last output\");\n  }\n  const lastOutputCapacity: BI = BI.from(lastOutput.cellOutput.capacity);\n  const lastOutputFixedEntryIndex: number = txSkeleton\n    .get(\"fixedEntries\")\n    .findIndex((fixedEntry) => {\n      return (\n        fixedEntry.field === \"outputs\" && fixedEntry.index === lastOutputIndex\n      );\n    });\n  const fromScript: Script = inputCell.cellOutput.lock;\n\n  let availableCapacity: BI = BI.from(0);\n  if (config.SCRIPTS.ANYONE_CAN_PAY && isAcpScript(fromScript, config)) {\n    const destroyable = !!(\n      fromInfo &&\n      typeof fromInfo === \"object\" &&\n      \"destroyable\" in fromInfo &&\n      fromInfo.destroyable\n    );\n    const _needCapacity = needCapacity\n      ? BI.from(needCapacity)\n      : lastOutputCapacity;\n\n    if (destroyable) {\n      availableCapacity = lastOutputCapacity;\n      // remove output & fixedEntry added by `setupInputCell`\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.remove(lastOutputIndex);\n      });\n      if (lastOutputFixedEntryIndex >= 0) {\n        txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n          return fixedEntries.remove(lastOutputFixedEntryIndex);\n        });\n      }\n    } else {\n      // Ignore `fixedEntries` and update capacity of output which generated by `setupInputCell`\n      const minimalOutputCapacity: BI = BI.from(\n        minimalCellCapacityCompatible(lastOutput)\n      );\n      const canUseCapacity = lastOutputCapacity.sub(minimalOutputCapacity);\n      const clonedLastOutput: Cell = JSON.parse(JSON.stringify(lastOutput));\n      let outputCapacity: BI = minimalOutputCapacity;\n      availableCapacity = canUseCapacity;\n      if (_needCapacity.lt(canUseCapacity)) {\n        outputCapacity = lastOutputCapacity.sub(_needCapacity);\n        availableCapacity = _needCapacity;\n      }\n      clonedLastOutput.cellOutput.capacity = \"0x\" + outputCapacity.toString(16);\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.update(lastOutputIndex, () => clonedLastOutput);\n      });\n    }\n  } else {\n    // Ignore if last output is fixed.\n    if (lastOutputFixedEntryIndex < 0) {\n      // Remove last output\n      availableCapacity = BI.from(\n        txSkeleton.get(\"outputs\").get(lastOutputIndex)?.cellOutput.capacity\n      );\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.remove(lastOutputIndex);\n      });\n    }\n  }\n\n  return {\n    txSkeleton,\n    availableCapacity,\n  };\n}\n\n/**\n * A function to transfer input to output, and add input & output to txSkeleton.\n * And it will deal with cell deps and witnesses too. (Add the input required cell deps and witnesses.)\n * It should be noted that the output must be added to the end of txSkeleton.get(\"outputs\").\n *\n * @param txSkeleton\n * @param inputCell\n * @param fromInfo\n * @param options\n */\nexport async function setupInputCell(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  fromInfo?: FromInfo,\n  {\n    config = undefined,\n    since = undefined,\n    defaultWitness = undefined,\n  }: Options & {\n    since?: PackedSince;\n    defaultWitness?: HexString;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  generateLockScriptInfos({ config });\n  const inputLock = inputCell.cellOutput.lock;\n\n  const targetLockScriptInfo: LockScriptInfo | undefined =\n    lockScriptInfos.infos.find((lockScriptInfo) => {\n      return (\n        lockScriptInfo.codeHash === inputLock.codeHash &&\n        lockScriptInfo.hashType === inputLock.hashType\n      );\n    });\n\n  if (!targetLockScriptInfo) {\n    throw new Error(`No LockScriptInfo found for setupInputCell!`);\n  }\n\n  return targetLockScriptInfo.lockScriptInfo.setupInputCell(\n    txSkeleton,\n    inputCell,\n    fromInfo,\n    {\n      config,\n      since,\n      defaultWitness,\n    }\n  );\n}\n\nexport async function payFeeByFeeRate(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  feeRate: BIish,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    enableDeductCapacity = true,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    enableDeductCapacity?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  let size = 0;\n  let newTxSkeleton: TransactionSkeletonType = txSkeleton;\n\n  /**\n   * Only one case `currentTransactionSize < size` :\n   * change output capacity equals current fee (feeA), so one output reduced,\n   * and if reduce the fee, change output will add again, fee will increase to feeA.\n   */\n  let currentTransactionSize: number = getTransactionSize(newTxSkeleton);\n  while (currentTransactionSize > size) {\n    size = currentTransactionSize;\n    const fee: BI = calculateFeeCompatible(size, feeRate);\n\n    newTxSkeleton = await payFee(txSkeleton, fromInfos, fee, tipHeader, {\n      config,\n      useLocktimeCellsFirst,\n      enableDeductCapacity,\n    });\n    currentTransactionSize = getTransactionSize(newTxSkeleton);\n  }\n\n  return newTxSkeleton;\n}\n\nfunction calculateFee(size: number, feeRate: bigint): bigint {\n  const result = calculateFeeCompatible(size, feeRate);\n  return BigInt(result.toString());\n}\n\nfunction calculateFeeCompatible(size: number, feeRate: BIish): BI {\n  const ratio = BI.from(1000);\n  const base = BI.from(size).mul(feeRate);\n  const fee = base.div(ratio);\n  if (fee.mul(ratio).lt(base)) {\n    return fee.add(1);\n  }\n  return BI.from(fee);\n}\n\nfunction getTransactionSize(txSkeleton: TransactionSkeletonType): number {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  return getTransactionSizeByTx(tx);\n}\n\nfunction getTransactionSizeByTx(tx: Transaction): number {\n  const serializedTx = blockchain.Transaction.pack(tx);\n  // 4 is serialized offset bytesize\n  const size = serializedTx.byteLength + 4;\n  return size;\n}\n\nexport default {\n  transfer,\n  payFee,\n  prepareSigningEntries,\n  injectCapacity,\n  setupInputCell,\n  registerCustomLockScriptInfos,\n  payFeeByFeeRate,\n  __tests__: {\n    _commonTransfer,\n    resetLockScriptInfos,\n    getLockScriptInfos,\n    generateLockScriptInfos,\n    getTransactionSizeByTx,\n    getTransactionSize,\n    calculateFee,\n    calculateFeeCompatible,\n  },\n};\n"],"mappings":"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"}