{"version":3,"file":"deploy.js","names":["_base","require","_codec","_configManager","_helpers","_immutable","_from_info","_bi","ScriptValue","values","bytesToHex","bytes","res","i","length","toString","padStart","findCellsByLock","lockScript","cellProvider","collector","lock","type","data","cells","cell","collect","push","updateOutputs","txSkeleton","output","cellCapacity","minimalCellCapacityCompatible","cellOutput","capacity","update","outputs","updateCellDeps","config","cellDeps","clear","getConfig","secp256k1Config","SCRIPTS","SECP256K1_BLAKE160","secp256k1MultiSigConfig","SECP256K1_BLAKE160_MULTISIG","Error","outPoint","txHash","TX_HASH","index","INDEX","depType","DEP_TYPE","completeTx","fromInfo","feeRate","inputCapacity","get","map","c","BI","from","reduce","a","b","add","outputCapacity","needCapacity","sub","injectCapacity","amount","undefined","_feeRate","_amount","fromScript","multisigScript","parseFromInfo","pow","changeCapacity","changeCell","minimalChangeCapacity","lt","gt","cellCollector","previousInputs","Set","input","inputCell","has","inputs","witnesses","deductCapacity","eq","gte","firstIndex","findIndex","validate","equals","size","witness","newWitnessArgs","SECP_SIGNATURE_PLACEHOLDER","slice","repeat","M","witnessArgs","blockchain","WitnessArgs","unpack","bytify","equal","inputType","outputType","hexify","pack","set","txFee","calculateTxFee","pop","getTransactionSize","tx","createTransactionFromSkeleton","getTransactionSizeByTx","serializedTx","Transaction","byteLength","calculateFee","ratio","base","mul","fee","div","txSize","calculateCodeHashByBin","scriptBin","bin","valueOf","utils","CKBHasher","buffer","byteOffset","digestHex","getDataHash","rpc","parseInt","getTransaction","outputData","transaction","outputsData","calculateTxHash","ckbHash","RawTransaction","getScriptConfigByDataHash","outputIndex","codeHash","scriptConfig","CODE_HASH","HASH_TYPE","getScriptConfigByTypeHash","typeScript","computeScriptHash","getScriptConfig","outputCell","isMultisigFromInfo","Array","isArray","publicKeyHashes","verifyFromInfo","helpers","nameOfScript","parseAddress","generateDeployWithDataTx","options","TransactionSkeleton","scriptBinary","generateDeployWithTypeIdTx","resolved","typeId","generateTypeIdScript","previousOutput","since","generateUpgradeTypeIdDataTx","deployedCell","compareScriptBinaryWithOnChainData","localHash","onChainHash","_default","__tests__","exports","default"],"sources":["../src/deploy.ts"],"sourcesContent":["import {\n  Script,\n  OutPoint,\n  CellProvider,\n  Cell,\n  utils,\n  values,\n  WitnessArgs,\n  Transaction,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport { bytes } from \"@ckb-lumos/codec\";\nimport { getConfig, Config, helpers } from \"@ckb-lumos/config-manager\";\nimport {\n  TransactionSkeletonType,\n  TransactionSkeleton,\n  Options,\n  createTransactionFromSkeleton,\n  parseAddress,\n  minimalCellCapacityCompatible,\n} from \"@ckb-lumos/helpers\";\nimport { Set } from \"immutable\";\nimport { FromInfo, parseFromInfo, MultisigScript } from \"./from_info\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { RPC } from \"@ckb-lumos/rpc\";\nconst { ScriptValue } = values;\n\nfunction bytesToHex(bytes: Uint8Array): string {\n  let res = \"0x\";\n  for (let i = 0; i < bytes.length; i++) {\n    res += bytes[i].toString(16).padStart(2, \"0\");\n  }\n  return res;\n}\n\nasync function findCellsByLock(\n  lockScript: Script,\n  cellProvider: CellProvider\n): Promise<Cell[]> {\n  const collector = cellProvider.collector({\n    lock: lockScript,\n    type: \"empty\",\n    data: \"0x\",\n  });\n  const cells: Cell[] = [];\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  return cells;\n}\n\nfunction updateOutputs(\n  txSkeleton: TransactionSkeletonType,\n  output: Cell\n): TransactionSkeletonType {\n  const cellCapacity = minimalCellCapacityCompatible(output);\n  output.cellOutput.capacity = `0x${cellCapacity.toString(16)}`;\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(output);\n  });\n\n  return txSkeleton;\n}\n\nfunction updateCellDeps(\n  txSkeleton: TransactionSkeletonType,\n  config?: Config\n): TransactionSkeletonType {\n  txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) => {\n    return cellDeps.clear();\n  });\n  config = config || getConfig();\n  const secp256k1Config = config.SCRIPTS.SECP256K1_BLAKE160;\n  const secp256k1MultiSigConfig = config.SCRIPTS.SECP256K1_BLAKE160_MULTISIG;\n  if (!secp256k1Config || !secp256k1MultiSigConfig) {\n    throw new Error(\n      \"Provided config does not have SECP256K1_BLAKE160 or SECP256K1_BLAKE160_MULTISIG script setup!\"\n    );\n  }\n  txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) => {\n    return cellDeps.push(\n      {\n        outPoint: {\n          txHash: secp256k1Config.TX_HASH,\n          index: secp256k1Config.INDEX,\n        },\n        depType: secp256k1Config.DEP_TYPE,\n      },\n      // TODO: optimize me, push dep directly without checking actual locks used would cause bigger tx\n      {\n        outPoint: {\n          txHash: secp256k1MultiSigConfig.TX_HASH,\n          index: secp256k1MultiSigConfig.INDEX,\n        },\n        depType: secp256k1MultiSigConfig.DEP_TYPE,\n      }\n    );\n  });\n\n  return txSkeleton;\n}\n\nasync function completeTx(\n  txSkeleton: TransactionSkeletonType,\n  fromInfo: FromInfo,\n  config?: Config,\n  feeRate?: BIish\n): Promise<TransactionSkeletonType> {\n  const inputCapacity = txSkeleton\n    .get(\"inputs\")\n    .map((c) => BI.from(c.cellOutput.capacity))\n    .reduce((a, b) => a.add(b), BI.from(0));\n  const outputCapacity = txSkeleton\n    .get(\"outputs\")\n    .map((c) => BI.from(c.cellOutput.capacity))\n    .reduce((a, b) => a.add(b), BI.from(0));\n  const needCapacity = outputCapacity.sub(inputCapacity);\n  txSkeleton = await injectCapacity(\n    txSkeleton,\n    fromInfo,\n    BI.from(needCapacity),\n    {\n      config: config,\n      feeRate: feeRate,\n    }\n  );\n  return txSkeleton;\n}\n\nasync function injectCapacity(\n  txSkeleton: TransactionSkeletonType,\n  fromInfo: FromInfo,\n  amount: BIish,\n  {\n    config = undefined,\n    feeRate = undefined,\n  }: { config?: Config; feeRate?: BIish }\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const _feeRate = feeRate || 1000;\n  let _amount = BI.from(amount);\n  const { fromScript, multisigScript } = parseFromInfo(fromInfo, { config });\n  _amount = _amount.add(BI.from(10).pow(8));\n  let changeCapacity = BI.from(10).pow(8);\n  const changeCell: Cell = {\n    cellOutput: {\n      capacity: \"0x0\",\n      lock: fromScript,\n      type: undefined,\n    },\n    data: \"0x\",\n  };\n  const minimalChangeCapacity: BI = BI.from(\n    minimalCellCapacityCompatible(changeCell)\n  ).add(BI.from(10).pow(8));\n\n  if (_amount.lt(0)) {\n    changeCapacity = changeCapacity.sub(_amount);\n    _amount = BI.from(0);\n  }\n  if (_amount.gt(0) || changeCapacity.lt(minimalChangeCapacity)) {\n    const cellProvider = txSkeleton.get(\"cellProvider\");\n    if (!cellProvider) throw new Error(\"Cell provider is missing!\");\n    const cellCollector = cellProvider.collector({\n      lock: fromScript,\n      type: \"empty\",\n      data: \"0x\",\n    });\n\n    let previousInputs = Set<string>();\n    for (const input of txSkeleton.get(\"inputs\")) {\n      previousInputs = previousInputs.add(\n        `${input.outPoint!.txHash}_${input.outPoint!.index}`\n      );\n    }\n\n    for await (const inputCell of cellCollector.collect()) {\n      if (\n        previousInputs.has(\n          `${inputCell.outPoint!.txHash}_${inputCell.outPoint!.index}`\n        )\n      )\n        continue;\n      txSkeleton = txSkeleton.update(\"inputs\", (inputs) =>\n        inputs.push(inputCell)\n      );\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n      const inputCapacity = BI.from(inputCell.cellOutput.capacity);\n      let deductCapacity = inputCapacity;\n      if (deductCapacity.gt(_amount)) {\n        deductCapacity = _amount;\n      }\n      _amount = _amount.sub(deductCapacity);\n      changeCapacity = changeCapacity.add(inputCapacity).sub(deductCapacity);\n      if (\n        _amount.eq(0) &&\n        (changeCapacity.eq(0) || changeCapacity.gte(minimalChangeCapacity))\n      )\n        break;\n    }\n  }\n\n  if (changeCapacity.gt(0)) {\n    changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) =>\n      outputs.push(changeCell)\n    );\n  }\n  if (_amount.gt(0) || changeCapacity.lt(minimalChangeCapacity))\n    throw new Error(\"Not enough capacity in from address!\");\n\n  /*\n   * Modify the skeleton, so the first witness of the fromAddress script group\n   * has a WitnessArgs construct with 65-byte zero filled values. While this\n   * is not required, it helps in transaction fee estimation.\n   */\n  const firstIndex = txSkeleton\n    .get(\"inputs\")\n    .findIndex((input) =>\n      new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    );\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n    }\n    let witness: string = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    let newWitnessArgs: WitnessArgs;\n    const SECP_SIGNATURE_PLACEHOLDER =\n      \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n\n    if (typeof fromInfo !== \"string\") {\n      newWitnessArgs = {\n        lock:\n          \"0x\" +\n          multisigScript!.slice(2) +\n          SECP_SIGNATURE_PLACEHOLDER.slice(2).repeat(\n            (fromInfo as MultisigScript).M\n          ),\n      };\n    } else {\n      newWitnessArgs = { lock: SECP_SIGNATURE_PLACEHOLDER };\n    }\n\n    if (witness !== \"0x\") {\n      const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));\n      const lock = witnessArgs.lock;\n      if (\n        !!lock &&\n        !!newWitnessArgs.lock &&\n        !bytes.equal(lock, newWitnessArgs.lock)\n      ) {\n        throw new Error(\n          \"Lock field in first witness is set aside for signature!\"\n        );\n      }\n      const inputType = witnessArgs.inputType;\n      if (inputType) {\n        newWitnessArgs.inputType = inputType;\n      }\n      const outputType = witnessArgs.outputType;\n      if (outputType) {\n        newWitnessArgs.outputType = outputType;\n      }\n    }\n    witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.set(firstIndex, witness)\n    );\n  }\n\n  const txFee = calculateTxFee(txSkeleton, _feeRate);\n  changeCapacity = changeCapacity.sub(txFee);\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.pop();\n  });\n  if (changeCapacity.gt(0)) {\n    changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) =>\n      outputs.push(changeCell)\n    );\n  }\n\n  return txSkeleton;\n}\n\nfunction getTransactionSize(txSkeleton: TransactionSkeletonType): number {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  return getTransactionSizeByTx(tx);\n}\n\nfunction getTransactionSizeByTx(tx: Transaction): number {\n  const serializedTx = blockchain.Transaction.pack(tx);\n  // 4 is serialized offset bytesize\n  const size = serializedTx.byteLength + 4;\n  return size;\n}\n\nfunction calculateFee(size: number, feeRate: BIish): BI {\n  const ratio = BI.from(1000);\n  const base = BI.from(size).mul(feeRate);\n  const fee = base.div(ratio);\n\n  if (fee.mul(ratio).lt(base)) {\n    return fee.add(1);\n  }\n  return BI.from(fee);\n}\n\nfunction calculateTxFee(\n  txSkeleton: TransactionSkeletonType,\n  feeRate: BIish\n): BI {\n  const txSize = getTransactionSize(txSkeleton);\n  return BI.from(calculateFee(txSize, feeRate));\n}\n\nfunction calculateCodeHashByBin(scriptBin: Uint8Array): string {\n  const bin = scriptBin.valueOf();\n  return new utils.CKBHasher()\n    .update(bin.buffer.slice(bin.byteOffset, bin.byteLength + bin.byteOffset))\n    .digestHex();\n}\n\nasync function getDataHash(outPoint: OutPoint, rpc: RPC): Promise<string> {\n  const txHash = outPoint.txHash;\n  const index = parseInt(outPoint.index, 10);\n  const tx = await rpc.getTransaction(txHash);\n\n  if (!tx) throw new Error(`TxHash(${txHash}) is not found`);\n\n  const outputData = tx.transaction.outputsData[index];\n  if (!outputData) throw new Error(`cannot find output data`);\n\n  return new utils.CKBHasher().update(bytes.bytify(outputData)).digestHex();\n}\n\ninterface ScriptConfig {\n  // if hashType is type, codeHash is ckbHash(type_script)\n  // if hashType is data, codeHash is ckbHash(data)\n  CODE_HASH: string;\n\n  HASH_TYPE: \"type\" | \"data2\";\n\n  TX_HASH: string;\n  // the deploy cell can be found at index of tx's outputs\n  INDEX: string;\n\n  // now deployWithX only supportted `code `\n  DEP_TYPE: \"depGroup\" | \"code\";\n\n  // empty\n  SHORT_ID?: number;\n}\n\nfunction calculateTxHash(txSkeleton: TransactionSkeletonType): string {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  const txHash = utils.ckbHash(blockchain.RawTransaction.pack(tx));\n  return txHash;\n}\n\nfunction getScriptConfigByDataHash(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number\n): ScriptConfig {\n  const data = txSkeleton.outputs.get(outputIndex)!.data;\n  const codeHash = utils.ckbHash(bytes.bytify(data));\n  const txHash = calculateTxHash(txSkeleton);\n  const scriptConfig: ScriptConfig = {\n    CODE_HASH: codeHash,\n    HASH_TYPE: \"data2\",\n    TX_HASH: txHash,\n    INDEX: \"0x0\",\n    DEP_TYPE: \"code\",\n  };\n  return scriptConfig;\n}\n\nfunction getScriptConfigByTypeHash(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number\n): ScriptConfig {\n  const typeScript = txSkeleton.outputs.get(outputIndex)!.cellOutput.type!;\n  const codeHash = utils.computeScriptHash(typeScript);\n  const txHash = calculateTxHash(txSkeleton);\n  const scriptConfig: ScriptConfig = {\n    CODE_HASH: codeHash,\n    HASH_TYPE: \"type\",\n    TX_HASH: txHash,\n    INDEX: \"0x0\",\n    DEP_TYPE: \"code\",\n  };\n  return scriptConfig;\n}\n\nfunction getScriptConfig(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number\n): ScriptConfig {\n  const outputCell = txSkeleton.outputs.get(outputIndex);\n  if (outputCell == undefined)\n    throw new Error(\"Invalid txSkeleton or outputIndex\");\n  const type = outputCell.cellOutput.type;\n  if (type !== undefined)\n    return getScriptConfigByTypeHash(txSkeleton, outputIndex);\n  return getScriptConfigByDataHash(txSkeleton, outputIndex);\n}\n\nfunction isMultisigFromInfo(fromInfo: FromInfo): fromInfo is MultisigScript {\n  if (typeof fromInfo !== \"object\") return false;\n  return (\n    \"M\" in fromInfo &&\n    \"R\" in fromInfo &&\n    Array.isArray(fromInfo.publicKeyHashes)\n  );\n}\n\nfunction verifyFromInfo(\n  fromInfo: FromInfo,\n  { config = undefined }: Options = {}\n): void {\n  config = config || getConfig();\n  if (typeof fromInfo === \"string\") {\n    if (\n      helpers.nameOfScript(\n        parseAddress(fromInfo, { config }),\n        config.SCRIPTS\n      ) !== \"SECP256K1_BLAKE160\"\n    )\n      throw new Error(\n        \"only SECP256K1_BLAKE160 or SECP256K1_MULTISIG is supported\"\n      );\n  } else if (!isMultisigFromInfo(fromInfo)) {\n    throw new Error(\n      \"only SECP256K1_BLAKE160 or SECP256K1_MULTISIG is supported\"\n    );\n  }\n}\n\ninterface DeployOptions {\n  cellProvider: CellProvider;\n  scriptBinary: Uint8Array;\n  fromInfo: FromInfo;\n  config?: Config;\n  feeRate?: bigint;\n}\n\ninterface UpgradeOptions extends DeployOptions {\n  typeId: Script;\n}\n\ninterface DeployResult {\n  txSkeleton: TransactionSkeletonType;\n  scriptConfig: ScriptConfig;\n}\n\ninterface TypeIDDeployResult extends DeployResult {\n  typeId: Script;\n}\n\n/**\n * Generate txSkeleton for writing binary data to CKB, usually for deploying contracts.\n * This generator only supports `SECP256K1_BLAKE160` and `SECP256K1_BLAKE160_MULTISIG` currently.\n *\n * @param options\n */\nexport async function generateDeployWithDataTx(\n  options: DeployOptions\n): Promise<DeployResult> {\n  verifyFromInfo(options.fromInfo, { config: options.config });\n\n  let txSkeleton = TransactionSkeleton({ cellProvider: options.cellProvider });\n  const { fromScript } = parseFromInfo(options.fromInfo, {\n    config: options.config,\n  });\n\n  const output: Cell = {\n    cellOutput: {\n      capacity: \"0x0\",\n      lock: fromScript,\n    },\n    data: bytesToHex(options.scriptBinary),\n  };\n\n  txSkeleton = updateOutputs(txSkeleton, output);\n  txSkeleton = updateCellDeps(txSkeleton, options.config);\n  txSkeleton = await completeTx(\n    txSkeleton,\n    options.fromInfo,\n    options.config,\n    options.feeRate\n  );\n\n  const scriptConfig = getScriptConfig(txSkeleton, 0);\n\n  return {\n    txSkeleton,\n    scriptConfig,\n  };\n}\n\n/**\n * Generate txSkeleton for writing binary data to CKB via Type ID, usually for deploying contracts.\n * Deploying via Type ID makes it possible to upgrade contract, for more information about Type ID, please check: https://xuejie.space/2020_02_03_introduction_to_ckb_script_programming_type_id/\n * This generator only supports `SECP256K1_BLAKE160` and `SECP256K1_BLAKE160_MULTISIG` currently.\n *\n * @param options\n */\nexport async function generateDeployWithTypeIdTx(\n  options: DeployOptions\n): Promise<TypeIDDeployResult> {\n  verifyFromInfo(options.fromInfo, { config: options.config });\n\n  let txSkeleton = TransactionSkeleton({ cellProvider: options.cellProvider });\n  const { fromScript } = parseFromInfo(options.fromInfo, {\n    config: options.config,\n  });\n\n  const [resolved] = await findCellsByLock(fromScript, options.cellProvider);\n  if (!resolved) throw new Error(`fromAddress has no live ckb`);\n\n  const typeId = utils.generateTypeIdScript(\n    { previousOutput: resolved.outPoint!, since: \"0x0\" },\n    \"0x0\"\n  );\n  const output: Cell = {\n    cellOutput: {\n      capacity: \"0x0\",\n      lock: fromScript,\n      type: typeId,\n    },\n    data: bytesToHex(options.scriptBinary),\n  };\n\n  txSkeleton = updateOutputs(txSkeleton, output);\n  txSkeleton = updateCellDeps(txSkeleton, options.config);\n  txSkeleton = await completeTx(\n    txSkeleton,\n    options.fromInfo,\n    options.config,\n    options.feeRate\n  );\n\n  const scriptConfig = getScriptConfig(txSkeleton, 0);\n\n  return {\n    txSkeleton,\n    scriptConfig,\n    typeId,\n  };\n}\n\nexport async function generateUpgradeTypeIdDataTx(\n  options: UpgradeOptions\n): Promise<DeployResult> {\n  verifyFromInfo(options.fromInfo, { config: options.config });\n\n  let txSkeleton = TransactionSkeleton({ cellProvider: options.cellProvider });\n  const { fromScript } = parseFromInfo(options.fromInfo, {\n    config: options.config,\n  });\n\n  const collector = options.cellProvider.collector({ type: options.typeId });\n  const cells: Cell[] = [];\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  if (cells.length !== 1) throw new Error(\"the typeid maybe wrong\");\n\n  const deployedCell = cells[0];\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n    return inputs.push(deployedCell);\n  });\n\n  const output: Cell = {\n    cellOutput: {\n      capacity: \"0x0\",\n      lock: fromScript,\n      type: options.typeId,\n    },\n    data: bytesToHex(options.scriptBinary),\n  };\n\n  txSkeleton = updateOutputs(txSkeleton, output);\n  txSkeleton = updateCellDeps(txSkeleton, options.config);\n  txSkeleton = await completeTx(\n    txSkeleton,\n    options.fromInfo,\n    options.config,\n    options.feeRate\n  );\n\n  const scriptConfig = getScriptConfig(txSkeleton, 0);\n\n  return {\n    txSkeleton,\n    scriptConfig,\n  };\n}\n\nexport async function compareScriptBinaryWithOnChainData(\n  scriptBinary: Uint8Array,\n  outPoint: OutPoint,\n  rpc: RPC\n): Promise<boolean> {\n  const localHash = calculateCodeHashByBin(scriptBinary);\n  const onChainHash = await getDataHash(outPoint, rpc);\n  return localHash === onChainHash;\n}\n\nexport default {\n  generateDeployWithDataTx,\n  generateDeployWithTypeIdTx,\n  generateUpgradeTypeIdDataTx,\n  compareScriptBinaryWithOnChainData,\n  __tests__: {\n    calculateTxFee,\n  },\n};\n"],"mappings":"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"}