{"version":3,"file":"anyone_can_pay.js","names":["_base","require","_codec","_configManager","_helpers","_immutable","_bi","_from_info","_helper","_sudt","ScriptValue","values","CKBHasher","ckbHash","utils","CellCollector","constructor","fromInfo","cellProvider","config","undefined","queryOptions","Error","getConfig","fromScript","parseFromInfo","lock","type","cellCollector","collector","collect","isAcpScript","inputCell","exports","setupInputCell","txSkeleton","_fromInfo","defaultWitness","since","inputLock","cellOutput","update","inputs","push","inputSinces","set","get","size","witnesses","outputCell","capacity","data","outputs","fixedEntries","field","index","template","SCRIPTS","ANYONE_CAN_PAY","scriptOutPoint","txHash","TX_HASH","INDEX","addCellDep","outPoint","depType","DEP_TYPE","firstIndex","findIndex","input","validate","equals","witness","newWitnessArgs","SECP_SIGNATURE_PLACEHOLDER","witnessArgs","blockchain","WitnessArgs","unpack","bytes","bytify","equal","inputType","outputType","hexify","pack","checkLimit","acpArgs","_capacity","BI","from","minimalAmount","minimalCapacity","length","pow","slice","multiplier","multiplicand","mul","lt","setupOutputCell","toScript","args","toString","toAddress","generateAddress","toAddressCellCollector","toAddressInput","next","value","outputCapacity","add","injectCapacity","outputIndex","lastFreezedOutput","filter","maxBy","i","gt","output","cellCapacity","availableCapacity","sub","minimalCellCapacityCompatible","deductCapacity","gte","eq","getInputKey","changeCell","blockHash","changeCapacity","minimalChangeCapacity","previousInputs","Set","has","lastOutputIndex","remove","fixedEntryIndex","fixedEntry","inputCapacity","prepareSigningEntries","scriptType","processedArgs","tx","createTransactionFromSkeleton","RawTransaction","signingEntries","CODE_HASH","codeHash","HASH_TYPE","hashType","sumOfOutputCapacity","map","reduce","result","c","sumOfOutputAmount","unpackAmount","fInputs","sumOfInputCapacity","sumOfInputAmount","lte","lockValue","hasher","hashWitness","j","otherInput","signingEntry","message","digestHex","withdraw","fromInput","fromInputCapacity","inputMinimalCellCapacity","parseAddress","targetOutput","_default","default"],"sources":["../src/anyone_can_pay.ts"],"sourcesContent":["import {\n  Address,\n  Cell,\n  CellCollector as BaseCellCollectorType,\n  CellProvider,\n  HexString,\n  OutPoint,\n  PackedSince,\n  QueryOptions,\n  Script,\n  utils,\n  values,\n  WitnessArgs,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport { bytes } from \"@ckb-lumos/codec\";\nimport { Config, getConfig } from \"@ckb-lumos/config-manager\";\nimport {\n  createTransactionFromSkeleton,\n  generateAddress,\n  minimalCellCapacityCompatible,\n  Options,\n  parseAddress,\n  TransactionSkeletonType,\n} from \"@ckb-lumos/helpers\";\nimport { List, Set } from \"immutable\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { FromInfo, parseFromInfo } from \"./from_info\";\nimport {\n  addCellDep,\n  hashWitness,\n  isAcpScript,\n  SECP_SIGNATURE_PLACEHOLDER,\n} from \"./helper\";\nimport { CellCollectorConstructor, CellCollectorType } from \"./type\";\nimport { unpackAmount } from \"./sudt\";\n\nconst { ScriptValue } = values;\nconst { CKBHasher, ckbHash } = utils;\n\nexport const CellCollector: CellCollectorConstructor = class CellCollector\n  implements CellCollectorType\n{\n  private cellCollector: BaseCellCollectorType;\n  private config: Config;\n  public readonly fromScript: Script;\n\n  constructor(\n    fromInfo: FromInfo,\n    cellProvider: CellProvider,\n    {\n      config = undefined,\n      queryOptions = {},\n    }: Options & {\n      queryOptions?: QueryOptions;\n    } = {}\n  ) {\n    if (!cellProvider) {\n      throw new Error(`Cell provider is missing!`);\n    }\n    config = config || getConfig();\n    this.fromScript = parseFromInfo(fromInfo, { config }).fromScript;\n\n    this.config = config;\n\n    queryOptions = {\n      ...queryOptions,\n      lock: this.fromScript,\n      type: queryOptions.type || \"empty\",\n    };\n\n    this.cellCollector = cellProvider.collector(queryOptions);\n  }\n\n  async *collect(): AsyncGenerator<Cell> {\n    if (!isAcpScript(this.fromScript, this.config)) {\n      return;\n    }\n    for await (const inputCell of this.cellCollector.collect()) {\n      yield inputCell;\n    }\n  }\n};\n\nexport async function setupInputCell(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  _fromInfo?: FromInfo,\n  {\n    config = undefined,\n    defaultWitness = \"0x\",\n    since = undefined,\n  }: Options & {\n    defaultWitness?: HexString;\n    since?: PackedSince;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  const inputLock: Script = inputCell.cellOutput.lock;\n  if (!isAcpScript(inputLock, config)) {\n    throw new Error(\"Not anyone-can-pay input!\");\n  }\n\n  // add inputCell to txSkeleton\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n    return inputs.push(inputCell);\n  });\n\n  if (since) {\n    txSkeleton = txSkeleton.update(\"inputSinces\", (inputSinces) => {\n      return inputSinces.set(txSkeleton.get(\"inputs\").size - 1, since);\n    });\n  }\n\n  txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n    return witnesses.push(defaultWitness);\n  });\n\n  const outputCell: Cell = {\n    cellOutput: {\n      capacity: inputCell.cellOutput.capacity,\n      lock: inputCell.cellOutput.lock,\n      type: inputCell.cellOutput.type,\n    },\n    data: inputCell.data,\n  };\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(outputCell);\n  });\n\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push({\n      field: \"outputs\",\n      index: txSkeleton.get(\"outputs\").size - 1,\n    });\n  });\n\n  const template = config.SCRIPTS.ANYONE_CAN_PAY;\n  if (!template) {\n    throw new Error(`ANYONE_CAN_PAY script not defined in config!`);\n  }\n\n  const scriptOutPoint: OutPoint = {\n    txHash: template.TX_HASH,\n    index: template.INDEX,\n  };\n\n  // add cell_dep\n  txSkeleton = addCellDep(txSkeleton, {\n    outPoint: scriptOutPoint,\n    depType: template.DEP_TYPE,\n  });\n\n  // add witness\n  const firstIndex = txSkeleton.get(\"inputs\").findIndex((input) => {\n    return new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n      new ScriptValue(inputLock, { validate: false })\n    );\n  });\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n        return witnesses.push(\"0x\");\n      });\n    }\n    let witness: HexString = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    const newWitnessArgs: WitnessArgs = {\n      /* 65-byte zeros in hex */\n      lock: SECP_SIGNATURE_PLACEHOLDER,\n    };\n    if (witness !== \"0x\") {\n      const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));\n      const lock = witnessArgs.lock;\n      if (\n        !!lock &&\n        !!newWitnessArgs.lock &&\n        !bytes.equal(lock, newWitnessArgs.lock)\n      ) {\n        throw new Error(\n          \"Lock field in first witness is set aside for signature!\"\n        );\n      }\n      const inputType = witnessArgs.inputType;\n      if (inputType) {\n        newWitnessArgs.inputType = inputType;\n      }\n      const outputType = witnessArgs.outputType;\n      if (outputType) {\n        newWitnessArgs.outputType = outputType;\n      }\n    }\n    witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n      return witnesses.set(firstIndex, witness);\n    });\n  }\n\n  return txSkeleton;\n}\n\n// export for tests\nexport function checkLimit(acpArgs: HexString, capacity: BIish): void {\n  const _capacity = BI.from(capacity);\n  let minimalAmount: BI | undefined;\n  let minimalCapacity: BI | undefined;\n  if (acpArgs.length >= 46) {\n    minimalAmount = BI.from(10).pow(\"0x\" + acpArgs.slice(44, 46));\n  }\n  if (acpArgs.length >= 44) {\n    // should convert to shannons\n    const multiplier = BI.from(10).pow(\"0x\" + acpArgs.slice(42, 44));\n    const multiplicand = BI.from(10).pow(8);\n    minimalCapacity = multiplier.mul(multiplicand);\n  }\n  // Both minimalAmount & minimalCapacity OR only minimalCapacity\n  if (minimalCapacity && minimalAmount) {\n    //check if undefined\n    if (_capacity.lt(minimalCapacity)) {\n      throw new Error(\n        `capacity(${capacity}) less than toAddress minimal capacity limit(${minimalCapacity}), and amount less then toAddress minimal amount limit(${minimalAmount})! If you want to transfer sudt, maybe sudt.transfer can help you.`\n      );\n    }\n  } else if (minimalCapacity) {\n    //check if undefined\n    if (_capacity.lt(minimalCapacity)) {\n      throw new Error(\n        `capacity(${capacity}) less than toAddress minimal capacity limit(${minimalCapacity})!`\n      );\n    }\n  }\n}\n\nexport async function setupOutputCell(\n  txSkeleton: TransactionSkeletonType,\n  outputCell: Cell,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  const toScript: Script = outputCell.cellOutput.lock;\n\n  const capacity: BI = BI.from(outputCell.cellOutput.capacity);\n\n  checkLimit(toScript.args, capacity.toString());\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(`Cell Provider is missing!`);\n  }\n\n  const toAddress: Address = generateAddress(toScript, { config });\n  const toAddressCellCollector = new CellCollector(toAddress, cellProvider, {\n    config,\n  });\n\n  const toAddressInput: Cell | void = (\n    await toAddressCellCollector.collect().next()\n  ).value;\n\n  let outputCapacity: BI = capacity;\n  if (toAddressInput) {\n    outputCapacity = capacity.add(toAddressInput.cellOutput.capacity);\n\n    txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n      return inputs.push(toAddressInput);\n    });\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n      return witnesses.push(\"0x\");\n    });\n  }\n\n  outputCell.cellOutput.capacity = \"0x\" + outputCapacity.toString(16);\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(outputCell);\n  });\n\n  if (toAddressInput) {\n    const template = config.SCRIPTS.ANYONE_CAN_PAY;\n    if (!template) {\n      throw new Error(`ANYONE_CAN_PAY script not defined in config!`);\n    }\n    const scriptOutPoint: OutPoint = {\n      txHash: template.TX_HASH,\n      index: template.INDEX,\n    };\n\n    // add cell_dep\n    txSkeleton = addCellDep(txSkeleton, {\n      outPoint: scriptOutPoint,\n      depType: template.DEP_TYPE,\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport async function injectCapacity(\n  cellCollector: CellCollectorType,\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number,\n  capacity: BIish,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  if (outputIndex >= txSkeleton.get(\"outputs\").size) {\n    throw new Error(`Invalid output index!`);\n  }\n\n  let _capacity = BI.from(capacity);\n\n  const template = config.SCRIPTS.ANYONE_CAN_PAY;\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ANYONE_CAN_PAY script setup!`\n    );\n  }\n\n  const fromScript: Script = cellCollector.fromScript;\n\n  /*\n   * First, check if there is any output cells that contains enough capacity\n   * for us to tinker with.\n   *\n   * TODO: the solution right now won't cover all cases, some outputs before the\n   * last output might still be tinkerable, right now we are working on the\n   * simple solution, later we can change this for more optimizations.\n   */\n  const lastFreezedOutput = txSkeleton\n    .get(\"fixedEntries\")\n    .filter(({ field }) => field === \"outputs\")\n    .maxBy(({ index }) => index);\n  let i = lastFreezedOutput ? lastFreezedOutput.index + 1 : 0;\n  for (; i < txSkeleton.get(\"outputs\").size && _capacity.gt(0); i++) {\n    const output = txSkeleton.get(\"outputs\").get(i)!;\n    if (\n      new ScriptValue(output.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    ) {\n      const cellCapacity: BI = BI.from(output.cellOutput.capacity);\n      const availableCapacity: BI = cellCapacity.sub(\n        minimalCellCapacityCompatible(output)\n      );\n      // should maintain minimal cell capcity in anyone-can-pay output\n      const deductCapacity: BI = _capacity.gte(availableCapacity)\n        ? availableCapacity\n        : _capacity;\n      _capacity = _capacity.sub(deductCapacity);\n      output.cellOutput.capacity =\n        \"0x\" + cellCapacity.sub(deductCapacity).toString(16);\n    }\n  }\n  // Remove all output cells with capacity equal to 0\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.filter(\n      (output) => !BI.from(output.cellOutput.capacity).eq(0)\n    );\n  });\n\n  const getInputKey = (input: Cell) =>\n    `${input.outPoint!.txHash}_${input.outPoint!.index}`;\n  if (_capacity.gt(0)) {\n    const changeCell: Cell = {\n      cellOutput: {\n        capacity: \"0x0\",\n        lock: fromScript,\n        type: undefined,\n      },\n      data: \"0x\",\n      outPoint: undefined,\n      blockHash: undefined,\n    };\n    let changeCapacity = BI.from(0);\n    const minimalChangeCapacity: BI = BI.from(\n      minimalCellCapacityCompatible(changeCell)\n    );\n\n    let previousInputs = Set<string>();\n    for (const input of txSkeleton.get(\"inputs\")) {\n      previousInputs = previousInputs.add(getInputKey(input));\n    }\n\n    // Are all from same lock script and type script, so only need one change cell\n    for await (const inputCell of cellCollector.collect()) {\n      if (previousInputs.has(getInputKey(inputCell))) {\n        continue;\n      }\n\n      txSkeleton = await setupInputCell(txSkeleton, inputCell, undefined, {\n        config,\n      });\n      const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.remove(lastOutputIndex);\n      });\n      const fixedEntryIndex: number = txSkeleton\n        .get(\"fixedEntries\")\n        .findIndex((fixedEntry) => {\n          return (\n            fixedEntry.field === \"outputs\" &&\n            fixedEntry.index === lastOutputIndex\n          );\n        });\n      if (fixedEntryIndex >= 0) {\n        txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n          return fixedEntries.remove(fixedEntryIndex);\n        });\n      }\n\n      const inputCapacity = BI.from(inputCell.cellOutput.capacity);\n      let deductCapacity = inputCapacity;\n      if (deductCapacity.gt(_capacity)) {\n        deductCapacity = _capacity;\n      }\n      _capacity = _capacity.sub(deductCapacity);\n      changeCapacity = changeCapacity.add(inputCapacity.sub(deductCapacity));\n      if (_capacity.eq(0) && changeCapacity.gte(minimalChangeCapacity)) {\n        break;\n      }\n\n      changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.push(changeCell);\n      });\n    }\n\n    if (_capacity.gt(0) || changeCapacity < minimalChangeCapacity) {\n      throw new Error(`Not enough capacity in from address!`);\n    }\n\n    changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push(changeCell);\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  { config = undefined }: Options = {}\n): TransactionSkeletonType {\n  config = config || getConfig();\n\n  const scriptType = \"ANYONE_CAN_PAY\";\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n\n  let processedArgs = Set<string>();\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  const txHash = ckbHash(blockchain.RawTransaction.pack(tx));\n  const inputs = txSkeleton.get(\"inputs\");\n  const witnesses = txSkeleton.get(\"witnesses\");\n  let signingEntries = txSkeleton.get(\"signingEntries\");\n  for (let i = 0; i < inputs.size; i++) {\n    const input = inputs.get(i)!;\n    if (\n      template.CODE_HASH === input.cellOutput.lock.codeHash &&\n      template.HASH_TYPE === input.cellOutput.lock.hashType &&\n      !processedArgs.has(input.cellOutput.lock.args)\n    ) {\n      processedArgs = processedArgs.add(input.cellOutput.lock.args);\n\n      // skip if input sum capcity <= output sum capacity\n      // and input sum amount <= output sum amount\n      const outputs: List<Cell> = txSkeleton.get(\"outputs\").filter((output) => {\n        return new ScriptValue(output.cellOutput.lock, {\n          validate: false,\n        }).equals(new ScriptValue(input.cellOutput.lock, { validate: false }));\n      });\n      const sumOfOutputCapacity: BI = outputs\n        .map((output) => BI.from(output.cellOutput.capacity))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      const sumOfOutputAmount: BI = outputs\n        .filter((output) => output.data !== \"0x\")\n        .map((output) => unpackAmount(output.data))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      const fInputs: List<Cell> = inputs.filter((i) => {\n        return new ScriptValue(i.cellOutput.lock, { validate: false }).equals(\n          new ScriptValue(input.cellOutput.lock, { validate: false })\n        );\n      });\n\n      const sumOfInputCapacity: BI = fInputs\n        .map((i) => BI.from(i.cellOutput.capacity))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      const sumOfInputAmount: BI = fInputs\n        .filter((i) => i.data !== \"0x\")\n        .map((i) => BI.from(unpackAmount(i.data)))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      if (\n        sumOfInputCapacity.lte(sumOfOutputCapacity) &&\n        sumOfInputAmount.lte(sumOfOutputAmount)\n      ) {\n        continue;\n      }\n\n      const lockValue = new values.ScriptValue(input.cellOutput.lock, {\n        validate: false,\n      });\n      const hasher = new CKBHasher();\n      hasher.update(txHash);\n      if (i >= witnesses.size) {\n        throw new Error(\n          `The first witness in the script group starting at input index ${i} does not exist, maybe some other part has invalidly tampered the transaction?`\n        );\n      }\n      hashWitness(hasher, witnesses.get(i)!);\n      for (let j = i + 1; j < inputs.size && j < witnesses.size; j++) {\n        const otherInput = inputs.get(j)!;\n        if (\n          lockValue.equals(\n            new values.ScriptValue(otherInput.cellOutput.lock, {\n              validate: false,\n            })\n          )\n        ) {\n          hashWitness(hasher, witnesses.get(j)!);\n        }\n      }\n      for (let j = inputs.size; j < witnesses.size; j++) {\n        hashWitness(hasher, witnesses.get(j)!);\n      }\n      const signingEntry = {\n        type: \"witness_args_lock\",\n        index: i,\n        message: hasher.digestHex(),\n      };\n      signingEntries = signingEntries.push(signingEntry);\n    }\n  }\n  txSkeleton = txSkeleton.set(\"signingEntries\", signingEntries);\n  return txSkeleton;\n}\n\nexport async function withdraw(\n  txSkeleton: TransactionSkeletonType,\n  fromInput: Cell,\n  toAddress: Address,\n  capacity: BIish,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  // from input must be a anyone-can-pay script\n  if (!isAcpScript(fromInput.cellOutput.lock, config)) {\n    throw new Error(`fromInput is not a ANYONE_CAN_PAY cell!`);\n  }\n\n  // check capacity\n  const _capacity = BI.from(capacity);\n  const fromInputCapacity: BI = BI.from(fromInput.cellOutput.capacity);\n  const inputMinimalCellCapacity: BI = BI.from(\n    minimalCellCapacityCompatible(fromInput)\n  );\n  if (\n    !(\n      (_capacity.gte(0) &&\n        _capacity.lte(fromInputCapacity.sub(inputMinimalCellCapacity))) ||\n      _capacity.eq(fromInputCapacity)\n    )\n  ) {\n    throw new Error(\n      `capacity must be in [0, ${fromInputCapacity.sub(\n        inputMinimalCellCapacity\n      )}] or ${fromInputCapacity} !`\n    );\n  }\n\n  const toScript = parseAddress(toAddress, { config });\n\n  const targetOutput: Cell = {\n    cellOutput: {\n      capacity: \"0x\" + capacity.toString(16),\n      lock: toScript,\n      type: undefined,\n    },\n    data: \"0x\",\n    outPoint: undefined,\n    blockHash: undefined,\n  };\n\n  if (isAcpScript(toScript, config)) {\n    checkLimit(toScript.args, capacity);\n\n    const cellProvider = txSkeleton.get(\"cellProvider\");\n    if (!cellProvider) {\n      throw new Error(`Cell Provider is missing!`);\n    }\n\n    const toAddressCellCollector = new CellCollector(toAddress, cellProvider, {\n      config,\n    });\n\n    const toAddressInput: Cell | void = (\n      await toAddressCellCollector.collect().next()\n    ).value;\n    if (!toAddressInput) {\n      throw new Error(`toAddress ANYONE_CAN_PAY input not found!`);\n    }\n\n    const outputCapacity: BI = _capacity.add(\n      toAddressInput.cellOutput.capacity\n    );\n    targetOutput.cellOutput.capacity = \"0x\" + outputCapacity.toString(16);\n\n    txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n      return inputs.push(toAddressInput);\n    });\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n      return witnesses.push(\"0x\");\n    });\n  }\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(targetOutput);\n  });\n\n  txSkeleton = await setupInputCell(\n    txSkeleton,\n    fromInput,\n    generateAddress(fromInput.cellOutput.lock, { config }),\n    {\n      config,\n    }\n  );\n  // remove output and fixedEntry added by `setupInputCell`\n  const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.remove(lastOutputIndex);\n  });\n  const fixedEntryIndex: number = txSkeleton\n    .get(\"fixedEntries\")\n    .findIndex((fixedEntry) => {\n      return (\n        fixedEntry.field === \"outputs\" && fixedEntry.index === lastOutputIndex\n      );\n    });\n  if (fixedEntryIndex >= 0) {\n    txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n      return fixedEntries.remove(fixedEntryIndex);\n    });\n  }\n\n  if (!_capacity.eq(fromInputCapacity)) {\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push({\n        cellOutput: {\n          capacity: \"0x\" + fromInputCapacity.sub(capacity).toString(16),\n          lock: fromInput.cellOutput.lock,\n          type: fromInput.cellOutput.type,\n        },\n        data: fromInput.data,\n      });\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport default {\n  CellCollector,\n  setupInputCell,\n  setupOutputCell,\n  injectCapacity,\n  prepareSigningEntries,\n  withdraw,\n};\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AAeA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAF,OAAA;AACA,IAAAG,QAAA,GAAAH,OAAA;AAQA,IAAAI,UAAA,GAAAJ,OAAA;AACA,IAAAK,GAAA,GAAAL,OAAA;AACA,IAAAM,UAAA,GAAAN,OAAA;AACA,IAAAO,OAAA,GAAAP,OAAA;AAOA,IAAAQ,KAAA,GAAAR,OAAA;AAEA,MAAM;EAAES;AAAY,CAAC,GAAGC,YAAM;AAC9B,MAAM;EAAEC,SAAS;EAAEC;AAAQ,CAAC,GAAGC,WAAK;AAE7B,MAAMC,aAAuC,GAAG,MAAMA,aAAa,CAE1E;EAKEC,WAAWA,CACTC,QAAkB,EAClBC,YAA0B,EAC1B;IACEC,MAAM,GAAGC,SAAS;IAClBC,YAAY,GAAG,CAAC;EAGlB,CAAC,GAAG,CAAC,CAAC,EACN;IACA,IAAI,CAACH,YAAY,EAAE;MACjB,MAAM,IAAII,KAAK,CAAE,2BAA0B,CAAC;IAC9C;IACAH,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAS,EAAC,CAAC;IAC9B,IAAI,CAACC,UAAU,GAAG,IAAAC,wBAAa,EAACR,QAAQ,EAAE;MAAEE;IAAO,CAAC,CAAC,CAACK,UAAU;IAEhE,IAAI,CAACL,MAAM,GAAGA,MAAM;IAEpBE,YAAY,GAAG;MACb,GAAGA,YAAY;MACfK,IAAI,EAAE,IAAI,CAACF,UAAU;MACrBG,IAAI,EAAEN,YAAY,CAACM,IAAI,IAAI;IAC7B,CAAC;IAED,IAAI,CAACC,aAAa,GAAGV,YAAY,CAACW,SAAS,CAACR,YAAY,CAAC;EAC3D;EAEA,OAAOS,OAAOA,CAAA,EAAyB;IACrC,IAAI,CAAC,IAAAC,mBAAW,EAAC,IAAI,CAACP,UAAU,EAAE,IAAI,CAACL,MAAM,CAAC,EAAE;MAC9C;IACF;IACA,WAAW,MAAMa,SAAS,IAAI,IAAI,CAACJ,aAAa,CAACE,OAAO,CAAC,CAAC,EAAE;MAC1D,MAAME,SAAS;IACjB;EACF;AACF,CAAC;AAACC,OAAA,CAAAlB,aAAA,GAAAA,aAAA;AAEK,eAAemB,cAAcA,CAClCC,UAAmC,EACnCH,SAAe,EACfI,SAAoB,EACpB;EACEjB,MAAM,GAAGC,SAAS;EAClBiB,cAAc,GAAG,IAAI;EACrBC,KAAK,GAAGlB;AAIV,CAAC,GAAG,CAAC,CAAC,EAC4B;EAClCD,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAS,EAAC,CAAC;EAE9B,MAAMgB,SAAiB,GAAGP,SAAS,CAACQ,UAAU,CAACd,IAAI;EACnD,IAAI,CAAC,IAAAK,mBAAW,EAACQ,SAAS,EAAEpB,MAAM,CAAC,EAAE;IACnC,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;EAC9C;;EAEA;EACAa,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,QAAQ,EAAGC,MAAM,IAAK;IACnD,OAAOA,MAAM,CAACC,IAAI,CAACX,SAAS,CAAC;EAC/B,CAAC,CAAC;EAEF,IAAIM,KAAK,EAAE;IACTH,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,aAAa,EAAGG,WAAW,IAAK;MAC7D,OAAOA,WAAW,CAACC,GAAG,CAACV,UAAU,CAACW,GAAG,CAAC,QAAQ,CAAC,CAACC,IAAI,GAAG,CAAC,EAAET,KAAK,CAAC;IAClE,CAAC,CAAC;EACJ;EAEAH,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,WAAW,EAAGO,SAAS,IAAK;IACzD,OAAOA,SAAS,CAACL,IAAI,CAACN,cAAc,CAAC;EACvC,CAAC,CAAC;EAEF,MAAMY,UAAgB,GAAG;IACvBT,UAAU,EAAE;MACVU,QAAQ,EAAElB,SAAS,CAACQ,UAAU,CAACU,QAAQ;MACvCxB,IAAI,EAAEM,SAAS,CAACQ,UAAU,CAACd,IAAI;MAC/BC,IAAI,EAAEK,SAAS,CAACQ,UAAU,CAACb;IAC7B,CAAC;IACDwB,IAAI,EAAEnB,SAAS,CAACmB;EAClB,CAAC;EAEDhB,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,SAAS,EAAGW,OAAO,IAAK;IACrD,OAAOA,OAAO,CAACT,IAAI,CAACM,UAAU,CAAC;EACjC,CAAC,CAAC;EAEFd,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,cAAc,EAAGY,YAAY,IAAK;IAC/D,OAAOA,YAAY,CAACV,IAAI,CAAC;MACvBW,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAEpB,UAAU,CAACW,GAAG,CAAC,SAAS,CAAC,CAACC,IAAI,GAAG;IAC1C,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,MAAMS,QAAQ,GAAGrC,MAAM,CAACsC,OAAO,CAACC,cAAc;EAC9C,IAAI,CAACF,QAAQ,EAAE;IACb,MAAM,IAAIlC,KAAK,CAAE,8CAA6C,CAAC;EACjE;EAEA,MAAMqC,cAAwB,GAAG;IAC/BC,MAAM,EAAEJ,QAAQ,CAACK,OAAO;IACxBN,KAAK,EAAEC,QAAQ,CAACM;EAClB,CAAC;;EAED;EACA3B,UAAU,GAAG,IAAA4B,kBAAU,EAAC5B,UAAU,EAAE;IAClC6B,QAAQ,EAAEL,cAAc;IACxBM,OAAO,EAAET,QAAQ,CAACU;EACpB,CAAC,CAAC;;EAEF;EACA,MAAMC,UAAU,GAAGhC,UAAU,CAACW,GAAG,CAAC,QAAQ,CAAC,CAACsB,SAAS,CAAEC,KAAK,IAAK;IAC/D,OAAO,IAAI3D,WAAW,CAAC2D,KAAK,CAAC7B,UAAU,CAACd,IAAI,EAAE;MAAE4C,QAAQ,EAAE;IAAM,CAAC,CAAC,CAACC,MAAM,CACvE,IAAI7D,WAAW,CAAC6B,SAAS,EAAE;MAAE+B,QAAQ,EAAE;IAAM,CAAC,CAChD,CAAC;EACH,CAAC,CAAC;EACF,IAAIH,UAAU,KAAK,CAAC,CAAC,EAAE;IACrB,OAAOA,UAAU,IAAIhC,UAAU,CAACW,GAAG,CAAC,WAAW,CAAC,CAACC,IAAI,EAAE;MACrDZ,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,WAAW,EAAGO,SAAS,IAAK;QACzD,OAAOA,SAAS,CAACL,IAAI,CAAC,IAAI,CAAC;MAC7B,CAAC,CAAC;IACJ;IACA,IAAI6B,OAAkB,GAAGrC,UAAU,CAACW,GAAG,CAAC,WAAW,CAAC,CAACA,GAAG,CAACqB,UAAU,CAAE;IACrE,MAAMM,cAA2B,GAAG;MAClC;MACA/C,IAAI,EAAEgD;IACR,CAAC;IACD,IAAIF,OAAO,KAAK,IAAI,EAAE;MACpB,MAAMG,WAAW,GAAGC,gBAAU,CAACC,WAAW,CAACC,MAAM,CAACC,YAAK,CAACC,MAAM,CAACR,OAAO,CAAC,CAAC;MACxE,MAAM9C,IAAI,GAAGiD,WAAW,CAACjD,IAAI;MAC7B,IACE,CAAC,CAACA,IAAI,IACN,CAAC,CAAC+C,cAAc,CAAC/C,IAAI,IACrB,CAACqD,YAAK,CAACE,KAAK,CAACvD,IAAI,EAAE+C,cAAc,CAAC/C,IAAI,CAAC,EACvC;QACA,MAAM,IAAIJ,KAAK,CACb,yDACF,CAAC;MACH;MACA,MAAM4D,SAAS,GAAGP,WAAW,CAACO,SAAS;MACvC,IAAIA,SAAS,EAAE;QACbT,cAAc,CAACS,SAAS,GAAGA,SAAS;MACtC;MACA,MAAMC,UAAU,GAAGR,WAAW,CAACQ,UAAU;MACzC,IAAIA,UAAU,EAAE;QACdV,cAAc,CAACU,UAAU,GAAGA,UAAU;MACxC;IACF;IACAX,OAAO,GAAGO,YAAK,CAACK,MAAM,CAACR,gBAAU,CAACC,WAAW,CAACQ,IAAI,CAACZ,cAAc,CAAC,CAAC;IACnEtC,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,WAAW,EAAGO,SAAS,IAAK;MACzD,OAAOA,SAAS,CAACH,GAAG,CAACsB,UAAU,EAAEK,OAAO,CAAC;IAC3C,CAAC,CAAC;EACJ;EAEA,OAAOrC,UAAU;AACnB;;AAEA;AACO,SAASmD,UAAUA,CAACC,OAAkB,EAAErC,QAAe,EAAQ;EACpE,MAAMsC,SAAS,GAAGC,MAAE,CAACC,IAAI,CAACxC,QAAQ,CAAC;EACnC,IAAIyC,aAA6B;EACjC,IAAIC,eAA+B;EACnC,IAAIL,OAAO,CAACM,MAAM,IAAI,EAAE,EAAE;IACxBF,aAAa,GAAGF,MAAE,CAACC,IAAI,CAAC,EAAE,CAAC,CAACI,GAAG,CAAC,IAAI,GAAGP,OAAO,CAACQ,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EAC/D;EACA,IAAIR,OAAO,CAACM,MAAM,IAAI,EAAE,EAAE;IACxB;IACA,MAAMG,UAAU,GAAGP,MAAE,CAACC,IAAI,CAAC,EAAE,CAAC,CAACI,GAAG,CAAC,IAAI,GAAGP,OAAO,CAACQ,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAChE,MAAME,YAAY,GAAGR,MAAE,CAACC,IAAI,CAAC,EAAE,CAAC,CAACI,GAAG,CAAC,CAAC,CAAC;IACvCF,eAAe,GAAGI,UAAU,CAACE,GAAG,CAACD,YAAY,CAAC;EAChD;EACA;EACA,IAAIL,eAAe,IAAID,aAAa,EAAE;IACpC;IACA,IAAIH,SAAS,CAACW,EAAE,CAACP,eAAe,CAAC,EAAE;MACjC,MAAM,IAAItE,KAAK,CACZ,YAAW4B,QAAS,gDAA+C0C,eAAgB,0DAAyDD,aAAc,oEAC7J,CAAC;IACH;EACF,CAAC,MAAM,IAAIC,eAAe,EAAE;IAC1B;IACA,IAAIJ,SAAS,CAACW,EAAE,CAACP,eAAe,CAAC,EAAE;MACjC,MAAM,IAAItE,KAAK,CACZ,YAAW4B,QAAS,gDAA+C0C,eAAgB,IACtF,CAAC;IACH;EACF;AACF;AAEO,eAAeQ,eAAeA,CACnCjE,UAAmC,EACnCc,UAAgB,EAChB;EAAE9B,MAAM,GAAGC;AAAmB,CAAC,GAAG,CAAC,CAAC,EACF;EAClCD,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAS,EAAC,CAAC;EAE9B,MAAM8E,QAAgB,GAAGpD,UAAU,CAACT,UAAU,CAACd,IAAI;EAEnD,MAAMwB,QAAY,GAAGuC,MAAE,CAACC,IAAI,CAACzC,UAAU,CAACT,UAAU,CAACU,QAAQ,CAAC;EAE5DoC,UAAU,CAACe,QAAQ,CAACC,IAAI,EAAEpD,QAAQ,CAACqD,QAAQ,CAAC,CAAC,CAAC;EAE9C,MAAMrF,YAAY,GAAGiB,UAAU,CAACW,GAAG,CAAC,cAAc,CAAC;EACnD,IAAI,CAAC5B,YAAY,EAAE;IACjB,MAAM,IAAII,KAAK,CAAE,2BAA0B,CAAC;EAC9C;EAEA,MAAMkF,SAAkB,GAAG,IAAAC,wBAAe,EAACJ,QAAQ,EAAE;IAAElF;EAAO,CAAC,CAAC;EAChE,MAAMuF,sBAAsB,GAAG,IAAI3F,aAAa,CAACyF,SAAS,EAAEtF,YAAY,EAAE;IACxEC;EACF,CAAC,CAAC;EAEF,MAAMwF,cAA2B,GAAG,CAClC,MAAMD,sBAAsB,CAAC5E,OAAO,CAAC,CAAC,CAAC8E,IAAI,CAAC,CAAC,EAC7CC,KAAK;EAEP,IAAIC,cAAkB,GAAG5D,QAAQ;EACjC,IAAIyD,cAAc,EAAE;IAClBG,cAAc,GAAG5D,QAAQ,CAAC6D,GAAG,CAACJ,cAAc,CAACnE,UAAU,CAACU,QAAQ,CAAC;IAEjEf,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,QAAQ,EAAGC,MAAM,IAAK;MACnD,OAAOA,MAAM,CAACC,IAAI,CAACgE,cAAc,CAAC;IACpC,CAAC,CAAC;IACFxE,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,WAAW,EAAGO,SAAS,IAAK;MACzD,OAAOA,SAAS,CAACL,IAAI,CAAC,IAAI,CAAC;IAC7B,CAAC,CAAC;EACJ;EAEAM,UAAU,CAACT,UAAU,CAACU,QAAQ,GAAG,IAAI,GAAG4D,cAAc,CAACP,QAAQ,CAAC,EAAE,CAAC;EACnEpE,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,SAAS,EAAGW,OAAO,IAAK;IACrD,OAAOA,OAAO,CAACT,IAAI,CAACM,UAAU,CAAC;EACjC,CAAC,CAAC;EAEF,IAAI0D,cAAc,EAAE;IAClB,MAAMnD,QAAQ,GAAGrC,MAAM,CAACsC,OAAO,CAACC,cAAc;IAC9C,IAAI,CAACF,QAAQ,EAAE;MACb,MAAM,IAAIlC,KAAK,CAAE,8CAA6C,CAAC;IACjE;IACA,MAAMqC,cAAwB,GAAG;MAC/BC,MAAM,EAAEJ,QAAQ,CAACK,OAAO;MACxBN,KAAK,EAAEC,QAAQ,CAACM;IAClB,CAAC;;IAED;IACA3B,UAAU,GAAG,IAAA4B,kBAAU,EAAC5B,UAAU,EAAE;MAClC6B,QAAQ,EAAEL,cAAc;MACxBM,OAAO,EAAET,QAAQ,CAACU;IACpB,CAAC,CAAC;EACJ;EAEA,OAAO/B,UAAU;AACnB;AAEO,eAAe6E,cAAcA,CAClCpF,aAAgC,EAChCO,UAAmC,EACnC8E,WAAmB,EACnB/D,QAAe,EACf;EAAE/B,MAAM,GAAGC;AAAmB,CAAC,GAAG,CAAC,CAAC,EACF;EAClCD,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAS,EAAC,CAAC;EAE9B,IAAI0F,WAAW,IAAI9E,UAAU,CAACW,GAAG,CAAC,SAAS,CAAC,CAACC,IAAI,EAAE;IACjD,MAAM,IAAIzB,KAAK,CAAE,uBAAsB,CAAC;EAC1C;EAEA,IAAIkE,SAAS,GAAGC,MAAE,CAACC,IAAI,CAACxC,QAAQ,CAAC;EAEjC,MAAMM,QAAQ,GAAGrC,MAAM,CAACsC,OAAO,CAACC,cAAc;EAC9C,IAAI,CAACF,QAAQ,EAAE;IACb,MAAM,IAAIlC,KAAK,CACZ,4DACH,CAAC;EACH;EAEA,MAAME,UAAkB,GAAGI,aAAa,CAACJ,UAAU;;EAEnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM0F,iBAAiB,GAAG/E,UAAU,CACjCW,GAAG,CAAC,cAAc,CAAC,CACnBqE,MAAM,CAAC,CAAC;IAAE7D;EAAM,CAAC,KAAKA,KAAK,KAAK,SAAS,CAAC,CAC1C8D,KAAK,CAAC,CAAC;IAAE7D;EAAM,CAAC,KAAKA,KAAK,CAAC;EAC9B,IAAI8D,CAAC,GAAGH,iBAAiB,GAAGA,iBAAiB,CAAC3D,KAAK,GAAG,CAAC,GAAG,CAAC;EAC3D,OAAO8D,CAAC,GAAGlF,UAAU,CAACW,GAAG,CAAC,SAAS,CAAC,CAACC,IAAI,IAAIyC,SAAS,CAAC8B,EAAE,CAAC,CAAC,CAAC,EAAED,CAAC,EAAE,EAAE;IACjE,MAAME,MAAM,GAAGpF,UAAU,CAACW,GAAG,CAAC,SAAS,CAAC,CAACA,GAAG,CAACuE,CAAC,CAAE;IAChD,IACE,IAAI3G,WAAW,CAAC6G,MAAM,CAAC/E,UAAU,CAACd,IAAI,EAAE;MAAE4C,QAAQ,EAAE;IAAM,CAAC,CAAC,CAACC,MAAM,CACjE,IAAI7D,WAAW,CAACc,UAAU,EAAE;MAAE8C,QAAQ,EAAE;IAAM,CAAC,CACjD,CAAC,EACD;MACA,MAAMkD,YAAgB,GAAG/B,MAAE,CAACC,IAAI,CAAC6B,MAAM,CAAC/E,UAAU,CAACU,QAAQ,CAAC;MAC5D,MAAMuE,iBAAqB,GAAGD,YAAY,CAACE,GAAG,CAC5C,IAAAC,sCAA6B,EAACJ,MAAM,CACtC,CAAC;MACD;MACA,MAAMK,cAAkB,GAAGpC,SAAS,CAACqC,GAAG,CAACJ,iBAAiB,CAAC,GACvDA,iBAAiB,GACjBjC,SAAS;MACbA,SAAS,GAAGA,SAAS,CAACkC,GAAG,CAACE,cAAc,CAAC;MACzCL,MAAM,CAAC/E,UAAU,CAACU,QAAQ,GACxB,IAAI,GAAGsE,YAAY,CAACE,GAAG,CAACE,cAAc,CAAC,CAACrB,QAAQ,CAAC,EAAE,CAAC;IACxD;EACF;EACA;EACApE,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,SAAS,EAAGW,OAAO,IAAK;IACrD,OAAOA,OAAO,CAAC+D,MAAM,CAClBI,MAAM,IAAK,CAAC9B,MAAE,CAACC,IAAI,CAAC6B,MAAM,CAAC/E,UAAU,CAACU,QAAQ,CAAC,CAAC4E,EAAE,CAAC,CAAC,CACvD,CAAC;EACH,CAAC,CAAC;EAEF,MAAMC,WAAW,GAAI1D,KAAW,IAC7B,GAAEA,KAAK,CAACL,QAAQ,CAAEJ,MAAO,IAAGS,KAAK,CAACL,QAAQ,CAAET,KAAM,EAAC;EACtD,IAAIiC,SAAS,CAAC8B,EAAE,CAAC,CAAC,CAAC,EAAE;IACnB,MAAMU,UAAgB,GAAG;MACvBxF,UAAU,EAAE;QACVU,QAAQ,EAAE,KAAK;QACfxB,IAAI,EAAEF,UAAU;QAChBG,IAAI,EAAEP;MACR,CAAC;MACD+B,IAAI,EAAE,IAAI;MACVa,QAAQ,EAAE5C,SAAS;MACnB6G,SAAS,EAAE7G;IACb,CAAC;IACD,IAAI8G,cAAc,GAAGzC,MAAE,CAACC,IAAI,CAAC,CAAC,CAAC;IAC/B,MAAMyC,qBAAyB,GAAG1C,MAAE,CAACC,IAAI,CACvC,IAAAiC,sCAA6B,EAACK,UAAU,CAC1C,CAAC;IAED,IAAII,cAAc,GAAG,IAAAC,cAAG,EAAS,CAAC;IAClC,KAAK,MAAMhE,KAAK,IAAIlC,UAAU,CAACW,GAAG,CAAC,QAAQ,CAAC,EAAE;MAC5CsF,cAAc,GAAGA,cAAc,CAACrB,GAAG,CAACgB,WAAW,CAAC1D,KAAK,CAAC,CAAC;IACzD;;IAEA;IACA,WAAW,MAAMrC,SAAS,IAAIJ,aAAa,CAACE,OAAO,CAAC,CAAC,EAAE;MACrD,IAAIsG,cAAc,CAACE,GAAG,CAACP,WAAW,CAAC/F,SAAS,CAAC,CAAC,EAAE;QAC9C;MACF;MAEAG,UAAU,GAAG,MAAMD,cAAc,CAACC,UAAU,EAAEH,SAAS,EAAEZ,SAAS,EAAE;QAClED;MACF,CAAC,CAAC;MACF,MAAMoH,eAAuB,GAAGpG,UAAU,CAACW,GAAG,CAAC,SAAS,CAAC,CAACC,IAAI,GAAG,CAAC;MAClEZ,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,SAAS,EAAGW,OAAO,IAAK;QACrD,OAAOA,OAAO,CAACoF,MAAM,CAACD,eAAe,CAAC;MACxC,CAAC,CAAC;MACF,MAAME,eAAuB,GAAGtG,UAAU,CACvCW,GAAG,CAAC,cAAc,CAAC,CACnBsB,SAAS,CAAEsE,UAAU,IAAK;QACzB,OACEA,UAAU,CAACpF,KAAK,KAAK,SAAS,IAC9BoF,UAAU,CAACnF,KAAK,KAAKgF,eAAe;MAExC,CAAC,CAAC;MACJ,IAAIE,eAAe,IAAI,CAAC,EAAE;QACxBtG,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,cAAc,EAAGY,YAAY,IAAK;UAC/D,OAAOA,YAAY,CAACmF,MAAM,CAACC,eAAe,CAAC;QAC7C,CAAC,CAAC;MACJ;MAEA,MAAME,aAAa,GAAGlD,MAAE,CAACC,IAAI,CAAC1D,SAAS,CAACQ,UAAU,CAACU,QAAQ,CAAC;MAC5D,IAAI0E,cAAc,GAAGe,aAAa;MAClC,IAAIf,cAAc,CAACN,EAAE,CAAC9B,SAAS,CAAC,EAAE;QAChCoC,cAAc,GAAGpC,SAAS;MAC5B;MACAA,SAAS,GAAGA,SAAS,CAACkC,GAAG,CAACE,cAAc,CAAC;MACzCM,cAAc,GAAGA,cAAc,CAACnB,GAAG,CAAC4B,aAAa,CAACjB,GAAG,CAACE,cAAc,CAAC,CAAC;MACtE,IAAIpC,SAAS,CAACsC,EAAE,CAAC,CAAC,CAAC,IAAII,cAAc,CAACL,GAAG,CAACM,qBAAqB,CAAC,EAAE;QAChE;MACF;MAEAH,UAAU,CAACxF,UAAU,CAACU,QAAQ,GAAG,IAAI,GAAGgF,cAAc,CAAC3B,QAAQ,CAAC,EAAE,CAAC;MACnEpE,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,SAAS,EAAGW,OAAO,IAAK;QACrD,OAAOA,OAAO,CAACT,IAAI,CAACqF,UAAU,CAAC;MACjC,CAAC,CAAC;IACJ;IAEA,IAAIxC,SAAS,CAAC8B,EAAE,CAAC,CAAC,CAAC,IAAIY,cAAc,GAAGC,qBAAqB,EAAE;MAC7D,MAAM,IAAI7G,KAAK,CAAE,sCAAqC,CAAC;IACzD;IAEA0G,UAAU,CAACxF,UAAU,CAACU,QAAQ,GAAG,IAAI,GAAGgF,cAAc,CAAC3B,QAAQ,CAAC,EAAE,CAAC;IACnEpE,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,SAAS,EAAGW,OAAO,IAAK;MACrD,OAAOA,OAAO,CAACT,IAAI,CAACqF,UAAU,CAAC;IACjC,CAAC,CAAC;EACJ;EAEA,OAAO7F,UAAU;AACnB;AAEO,SAASyG,qBAAqBA,CACnCzG,UAAmC,EACnC;EAAEhB,MAAM,GAAGC;AAAmB,CAAC,GAAG,CAAC,CAAC,EACX;EACzBD,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAS,EAAC,CAAC;EAE9B,MAAMsH,UAAU,GAAG,gBAAgB;EACnC,MAAMrF,QAAQ,GAAGrC,MAAM,CAACsC,OAAO,CAACoF,UAAU,CAAC;EAC3C,IAAI,CAACrF,QAAQ,EAAE;IACb,MAAM,IAAIlC,KAAK,CACZ,iCAAgCuH,UAAW,gBAC9C,CAAC;EACH;EAEA,IAAIC,aAAa,GAAG,IAAAT,cAAG,EAAS,CAAC;EACjC,MAAMU,EAAE,GAAG,IAAAC,sCAA6B,EAAC7G,UAAU,CAAC;EACpD,MAAMyB,MAAM,GAAG/C,OAAO,CAAC+D,gBAAU,CAACqE,cAAc,CAAC5D,IAAI,CAAC0D,EAAE,CAAC,CAAC;EAC1D,MAAMrG,MAAM,GAAGP,UAAU,CAACW,GAAG,CAAC,QAAQ,CAAC;EACvC,MAAME,SAAS,GAAGb,UAAU,CAACW,GAAG,CAAC,WAAW,CAAC;EAC7C,IAAIoG,cAAc,GAAG/G,UAAU,CAACW,GAAG,CAAC,gBAAgB,CAAC;EACrD,KAAK,IAAIuE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3E,MAAM,CAACK,IAAI,EAAEsE,CAAC,EAAE,EAAE;IACpC,MAAMhD,KAAK,GAAG3B,MAAM,CAACI,GAAG,CAACuE,CAAC,CAAE;IAC5B,IACE7D,QAAQ,CAAC2F,SAAS,KAAK9E,KAAK,CAAC7B,UAAU,CAACd,IAAI,CAAC0H,QAAQ,IACrD5F,QAAQ,CAAC6F,SAAS,KAAKhF,KAAK,CAAC7B,UAAU,CAACd,IAAI,CAAC4H,QAAQ,IACrD,CAACR,aAAa,CAACR,GAAG,CAACjE,KAAK,CAAC7B,UAAU,CAACd,IAAI,CAAC4E,IAAI,CAAC,EAC9C;MACAwC,aAAa,GAAGA,aAAa,CAAC/B,GAAG,CAAC1C,KAAK,CAAC7B,UAAU,CAACd,IAAI,CAAC4E,IAAI,CAAC;;MAE7D;MACA;MACA,MAAMlD,OAAmB,GAAGjB,UAAU,CAACW,GAAG,CAAC,SAAS,CAAC,CAACqE,MAAM,CAAEI,MAAM,IAAK;QACvE,OAAO,IAAI7G,WAAW,CAAC6G,MAAM,CAAC/E,UAAU,CAACd,IAAI,EAAE;UAC7C4C,QAAQ,EAAE;QACZ,CAAC,CAAC,CAACC,MAAM,CAAC,IAAI7D,WAAW,CAAC2D,KAAK,CAAC7B,UAAU,CAACd,IAAI,EAAE;UAAE4C,QAAQ,EAAE;QAAM,CAAC,CAAC,CAAC;MACxE,CAAC,CAAC;MACF,MAAMiF,mBAAuB,GAAGnG,OAAO,CACpCoG,GAAG,CAAEjC,MAAM,IAAK9B,MAAE,CAACC,IAAI,CAAC6B,MAAM,CAAC/E,UAAU,CAACU,QAAQ,CAAC,CAAC,CACpDuG,MAAM,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAKD,MAAM,CAAC3C,GAAG,CAAC4C,CAAC,CAAC,EAAElE,MAAE,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MAEnD,MAAMkE,iBAAqB,GAAGxG,OAAO,CAClC+D,MAAM,CAAEI,MAAM,IAAKA,MAAM,CAACpE,IAAI,KAAK,IAAI,CAAC,CACxCqG,GAAG,CAAEjC,MAAM,IAAK,IAAAsC,kBAAY,EAACtC,MAAM,CAACpE,IAAI,CAAC,CAAC,CAC1CsG,MAAM,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAKD,MAAM,CAAC3C,GAAG,CAAC4C,CAAC,CAAC,EAAElE,MAAE,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MAEnD,MAAMoE,OAAmB,GAAGpH,MAAM,CAACyE,MAAM,CAAEE,CAAC,IAAK;QAC/C,OAAO,IAAI3G,WAAW,CAAC2G,CAAC,CAAC7E,UAAU,CAACd,IAAI,EAAE;UAAE4C,QAAQ,EAAE;QAAM,CAAC,CAAC,CAACC,MAAM,CACnE,IAAI7D,WAAW,CAAC2D,KAAK,CAAC7B,UAAU,CAACd,IAAI,EAAE;UAAE4C,QAAQ,EAAE;QAAM,CAAC,CAC5D,CAAC;MACH,CAAC,CAAC;MAEF,MAAMyF,kBAAsB,GAAGD,OAAO,CACnCN,GAAG,CAAEnC,CAAC,IAAK5B,MAAE,CAACC,IAAI,CAAC2B,CAAC,CAAC7E,UAAU,CAACU,QAAQ,CAAC,CAAC,CAC1CuG,MAAM,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAKD,MAAM,CAAC3C,GAAG,CAAC4C,CAAC,CAAC,EAAElE,MAAE,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MAEnD,MAAMsE,gBAAoB,GAAGF,OAAO,CACjC3C,MAAM,CAAEE,CAAC,IAAKA,CAAC,CAAClE,IAAI,KAAK,IAAI,CAAC,CAC9BqG,GAAG,CAAEnC,CAAC,IAAK5B,MAAE,CAACC,IAAI,CAAC,IAAAmE,kBAAY,EAACxC,CAAC,CAAClE,IAAI,CAAC,CAAC,CAAC,CACzCsG,MAAM,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAKD,MAAM,CAAC3C,GAAG,CAAC4C,CAAC,CAAC,EAAElE,MAAE,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MAEnD,IACEqE,kBAAkB,CAACE,GAAG,CAACV,mBAAmB,CAAC,IAC3CS,gBAAgB,CAACC,GAAG,CAACL,iBAAiB,CAAC,EACvC;QACA;MACF;MAEA,MAAMM,SAAS,GAAG,IAAIvJ,YAAM,CAACD,WAAW,CAAC2D,KAAK,CAAC7B,UAAU,CAACd,IAAI,EAAE;QAC9D4C,QAAQ,EAAE;MACZ,CAAC,CAAC;MACF,MAAM6F,MAAM,GAAG,IAAIvJ,SAAS,CAAC,CAAC;MAC9BuJ,MAAM,CAAC1H,MAAM,CAACmB,MAAM,CAAC;MACrB,IAAIyD,CAAC,IAAIrE,SAAS,CAACD,IAAI,EAAE;QACvB,MAAM,IAAIzB,KAAK,CACZ,iEAAgE+F,CAAE,gFACrE,CAAC;MACH;MACA,IAAA+C,mBAAW,EAACD,MAAM,EAAEnH,SAAS,CAACF,GAAG,CAACuE,CAAC,CAAE,CAAC;MACtC,KAAK,IAAIgD,CAAC,GAAGhD,CAAC,GAAG,CAAC,EAAEgD,CAAC,GAAG3H,MAAM,CAACK,IAAI,IAAIsH,CAAC,GAAGrH,SAAS,CAACD,IAAI,EAAEsH,CAAC,EAAE,EAAE;QAC9D,MAAMC,UAAU,GAAG5H,MAAM,CAACI,GAAG,CAACuH,CAAC,CAAE;QACjC,IACEH,SAAS,CAAC3F,MAAM,CACd,IAAI5D,YAAM,CAACD,WAAW,CAAC4J,UAAU,CAAC9H,UAAU,CAACd,IAAI,EAAE;UACjD4C,QAAQ,EAAE;QACZ,CAAC,CACH,CAAC,EACD;UACA,IAAA8F,mBAAW,EAACD,MAAM,EAAEnH,SAAS,CAACF,GAAG,CAACuH,CAAC,CAAE,CAAC;QACxC;MACF;MACA,KAAK,IAAIA,CAAC,GAAG3H,MAAM,CAACK,IAAI,EAAEsH,CAAC,GAAGrH,SAAS,CAACD,IAAI,EAAEsH,CAAC,EAAE,EAAE;QACjD,IAAAD,mBAAW,EAACD,MAAM,EAAEnH,SAAS,CAACF,GAAG,CAACuH,CAAC,CAAE,CAAC;MACxC;MACA,MAAME,YAAY,GAAG;QACnB5I,IAAI,EAAE,mBAAmB;QACzB4B,KAAK,EAAE8D,CAAC;QACRmD,OAAO,EAAEL,MAAM,CAACM,SAAS,CAAC;MAC5B,CAAC;MACDvB,cAAc,GAAGA,cAAc,CAACvG,IAAI,CAAC4H,YAAY,CAAC;IACpD;EACF;EACApI,UAAU,GAAGA,UAAU,CAACU,GAAG,CAAC,gBAAgB,EAAEqG,cAAc,CAAC;EAC7D,OAAO/G,UAAU;AACnB;AAEO,eAAeuI,QAAQA,CAC5BvI,UAAmC,EACnCwI,SAAe,EACfnE,SAAkB,EAClBtD,QAAe,EACf;EAAE/B,MAAM,GAAGC;AAAmB,CAAC,GAAG,CAAC,CAAC,EACF;EAClCD,MAAM,GAAGA,MAAM,IAAI,IAAAI,wBAAS,EAAC,CAAC;;EAE9B;EACA,IAAI,CAAC,IAAAQ,mBAAW,EAAC4I,SAAS,CAACnI,UAAU,CAACd,IAAI,EAAEP,MAAM,CAAC,EAAE;IACnD,MAAM,IAAIG,KAAK,CAAE,yCAAwC,CAAC;EAC5D;;EAEA;EACA,MAAMkE,SAAS,GAAGC,MAAE,CAACC,IAAI,CAACxC,QAAQ,CAAC;EACnC,MAAM0H,iBAAqB,GAAGnF,MAAE,CAACC,IAAI,CAACiF,SAAS,CAACnI,UAAU,CAACU,QAAQ,CAAC;EACpE,MAAM2H,wBAA4B,GAAGpF,MAAE,CAACC,IAAI,CAC1C,IAAAiC,sCAA6B,EAACgD,SAAS,CACzC,CAAC;EACD,IACE,EACGnF,SAAS,CAACqC,GAAG,CAAC,CAAC,CAAC,IACfrC,SAAS,CAACyE,GAAG,CAACW,iBAAiB,CAAClD,GAAG,CAACmD,wBAAwB,CAAC,CAAC,IAChErF,SAAS,CAACsC,EAAE,CAAC8C,iBAAiB,CAAC,CAChC,EACD;IACA,MAAM,IAAItJ,KAAK,CACZ,2BAA0BsJ,iBAAiB,CAAClD,GAAG,CAC9CmD,wBACF,CAAE,QAAOD,iBAAkB,IAC7B,CAAC;EACH;EAEA,MAAMvE,QAAQ,GAAG,IAAAyE,qBAAY,EAACtE,SAAS,EAAE;IAAErF;EAAO,CAAC,CAAC;EAEpD,MAAM4J,YAAkB,GAAG;IACzBvI,UAAU,EAAE;MACVU,QAAQ,EAAE,IAAI,GAAGA,QAAQ,CAACqD,QAAQ,CAAC,EAAE,CAAC;MACtC7E,IAAI,EAAE2E,QAAQ;MACd1E,IAAI,EAAEP;IACR,CAAC;IACD+B,IAAI,EAAE,IAAI;IACVa,QAAQ,EAAE5C,SAAS;IACnB6G,SAAS,EAAE7G;EACb,CAAC;EAED,IAAI,IAAAW,mBAAW,EAACsE,QAAQ,EAAElF,MAAM,CAAC,EAAE;IACjCmE,UAAU,CAACe,QAAQ,CAACC,IAAI,EAAEpD,QAAQ,CAAC;IAEnC,MAAMhC,YAAY,GAAGiB,UAAU,CAACW,GAAG,CAAC,cAAc,CAAC;IACnD,IAAI,CAAC5B,YAAY,EAAE;MACjB,MAAM,IAAII,KAAK,CAAE,2BAA0B,CAAC;IAC9C;IAEA,MAAMoF,sBAAsB,GAAG,IAAI3F,aAAa,CAACyF,SAAS,EAAEtF,YAAY,EAAE;MACxEC;IACF,CAAC,CAAC;IAEF,MAAMwF,cAA2B,GAAG,CAClC,MAAMD,sBAAsB,CAAC5E,OAAO,CAAC,CAAC,CAAC8E,IAAI,CAAC,CAAC,EAC7CC,KAAK;IACP,IAAI,CAACF,cAAc,EAAE;MACnB,MAAM,IAAIrF,KAAK,CAAE,2CAA0C,CAAC;IAC9D;IAEA,MAAMwF,cAAkB,GAAGtB,SAAS,CAACuB,GAAG,CACtCJ,cAAc,CAACnE,UAAU,CAACU,QAC5B,CAAC;IACD6H,YAAY,CAACvI,UAAU,CAACU,QAAQ,GAAG,IAAI,GAAG4D,cAAc,CAACP,QAAQ,CAAC,EAAE,CAAC;IAErEpE,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,QAAQ,EAAGC,MAAM,IAAK;MACnD,OAAOA,MAAM,CAACC,IAAI,CAACgE,cAAc,CAAC;IACpC,CAAC,CAAC;IACFxE,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,WAAW,EAAGO,SAAS,IAAK;MACzD,OAAOA,SAAS,CAACL,IAAI,CAAC,IAAI,CAAC;IAC7B,CAAC,CAAC;EACJ;EAEAR,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,SAAS,EAAGW,OAAO,IAAK;IACrD,OAAOA,OAAO,CAACT,IAAI,CAACoI,YAAY,CAAC;EACnC,CAAC,CAAC;EAEF5I,UAAU,GAAG,MAAMD,cAAc,CAC/BC,UAAU,EACVwI,SAAS,EACT,IAAAlE,wBAAe,EAACkE,SAAS,CAACnI,UAAU,CAACd,IAAI,EAAE;IAAEP;EAAO,CAAC,CAAC,EACtD;IACEA;EACF,CACF,CAAC;EACD;EACA,MAAMoH,eAAuB,GAAGpG,UAAU,CAACW,GAAG,CAAC,SAAS,CAAC,CAACC,IAAI,GAAG,CAAC;EAClEZ,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,SAAS,EAAGW,OAAO,IAAK;IACrD,OAAOA,OAAO,CAACoF,MAAM,CAACD,eAAe,CAAC;EACxC,CAAC,CAAC;EACF,MAAME,eAAuB,GAAGtG,UAAU,CACvCW,GAAG,CAAC,cAAc,CAAC,CACnBsB,SAAS,CAAEsE,UAAU,IAAK;IACzB,OACEA,UAAU,CAACpF,KAAK,KAAK,SAAS,IAAIoF,UAAU,CAACnF,KAAK,KAAKgF,eAAe;EAE1E,CAAC,CAAC;EACJ,IAAIE,eAAe,IAAI,CAAC,EAAE;IACxBtG,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,cAAc,EAAGY,YAAY,IAAK;MAC/D,OAAOA,YAAY,CAACmF,MAAM,CAACC,eAAe,CAAC;IAC7C,CAAC,CAAC;EACJ;EAEA,IAAI,CAACjD,SAAS,CAACsC,EAAE,CAAC8C,iBAAiB,CAAC,EAAE;IACpCzI,UAAU,GAAGA,UAAU,CAACM,MAAM,CAAC,SAAS,EAAGW,OAAO,IAAK;MACrD,OAAOA,OAAO,CAACT,IAAI,CAAC;QAClBH,UAAU,EAAE;UACVU,QAAQ,EAAE,IAAI,GAAG0H,iBAAiB,CAAClD,GAAG,CAACxE,QAAQ,CAAC,CAACqD,QAAQ,CAAC,EAAE,CAAC;UAC7D7E,IAAI,EAAEiJ,SAAS,CAACnI,UAAU,CAACd,IAAI;UAC/BC,IAAI,EAAEgJ,SAAS,CAACnI,UAAU,CAACb;QAC7B,CAAC;QACDwB,IAAI,EAAEwH,SAAS,CAACxH;MAClB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,OAAOhB,UAAU;AACnB;AAAC,IAAA6I,QAAA,GAEc;EACbjK,aAAa;EACbmB,cAAc;EACdkE,eAAe;EACfY,cAAc;EACd4B,qBAAqB;EACrB8B;AACF,CAAC;AAAAzI,OAAA,CAAAgJ,OAAA,GAAAD,QAAA"}