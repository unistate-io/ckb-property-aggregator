{"version":3,"file":"from_info.js","names":["_base","require","_helpers","_configManager","_codec","CKBHasher","utils","serializeMultisigScript","R","M","publicKeyHashes","Error","toString","slice","length","map","h","join","multisigArgs","serializedMultisigScript","since","sinceLE","bytes","hexify","number","Uint64LE","pack","update","digestHex","parseFromInfo","fromInfo","config","undefined","getConfig","fromScript","multisigScript","destroyable","customData","parseAddress","template","SCRIPTS","SECP256K1_BLAKE160_MULTISIG","fromScriptArgs","codeHash","CODE_HASH","hashType","HASH_TYPE","args","ANYONE_CAN_PAY","address","script"],"sources":["../src/from_info.ts"],"sourcesContent":["import {\n  PackedSince,\n  Hash,\n  Address,\n  Script,\n  HexString,\n  utils,\n} from \"@ckb-lumos/base\";\nimport { Options, parseAddress } from \"@ckb-lumos/helpers\";\nimport { getConfig } from \"@ckb-lumos/config-manager\";\nimport { bytes, number } from \"@ckb-lumos/codec\";\n\nconst { CKBHasher } = utils;\n\n/**\n * secp256k1_blake160_multisig script requires S, R, M, N and public key hashes\n * S must be zero now\n * and N equals to publicKeyHashes size\n * so only need to provide R, M and public key hashes\n */\nexport interface MultisigScript {\n  /** first nth public keys must match, 1 byte */\n  R: number;\n  /** threshold, 1 byte */\n  M: number;\n  /** blake160 hashes of compressed public keys */\n  publicKeyHashes: Hash[];\n  /** locktime in since format */\n  since?: PackedSince;\n}\n\nexport interface ACP {\n  address: Address;\n  destroyable?: boolean; // default to false\n}\n\nexport interface CustomScript {\n  script: Script;\n  customData: HexString;\n}\n\nexport type FromInfo = MultisigScript | Address | ACP | CustomScript;\n\n/**\n *\n * @param params multisig script params\n * @returns serialized multisig script\n */\nexport function serializeMultisigScript({\n  R,\n  M,\n  publicKeyHashes,\n}: MultisigScript): HexString {\n  if (R < 0 || R > 255) {\n    throw new Error(\"`R` should be less than 256!\");\n  }\n  if (M < 0 || M > 255) {\n    throw new Error(\"`M` should be less than 256!\");\n  }\n  // TODO: validate publicKeyHashes\n  return (\n    \"0x00\" +\n    (\"00\" + R.toString(16)).slice(-2) +\n    (\"00\" + M.toString(16)).slice(-2) +\n    (\"00\" + publicKeyHashes.length.toString(16)).slice(-2) +\n    publicKeyHashes.map((h) => h.slice(2)).join(\"\")\n  );\n}\n\n/**\n *\n * @param serializedMultisigScript\n * @param since\n * @returns lock script args\n */\nexport function multisigArgs(\n  serializedMultisigScript: HexString,\n  since?: PackedSince\n): HexString {\n  let sinceLE = \"0x\";\n  if (since != null) {\n    sinceLE = bytes.hexify(number.Uint64LE.pack(since));\n  }\n  return (\n    new CKBHasher().update(serializedMultisigScript).digestHex().slice(0, 42) +\n    sinceLE.slice(2)\n  );\n}\n\nexport function parseFromInfo(\n  fromInfo: FromInfo,\n  { config = undefined }: Options = {}\n): {\n  fromScript: Script;\n  multisigScript?: HexString;\n  destroyable?: boolean;\n  customData?: HexString;\n} {\n  config = config || getConfig();\n\n  let fromScript: Script | undefined;\n  let multisigScript: HexString | undefined;\n  let destroyable: boolean | undefined;\n  let customData: HexString | undefined;\n\n  if (typeof fromInfo === \"string\") {\n    // fromInfo is an address\n    fromScript = parseAddress(fromInfo, { config });\n  } else {\n    if (\"R\" in fromInfo) {\n      const template = config.SCRIPTS.SECP256K1_BLAKE160_MULTISIG;\n      if (!template) {\n        throw new Error(\n          \"Provided config does not have SECP256K1_BLAKE16_MULTISIG script setup!\"\n        );\n      }\n\n      multisigScript = serializeMultisigScript(fromInfo);\n      const fromScriptArgs = multisigArgs(multisigScript, fromInfo.since);\n      fromScript = {\n        codeHash: template.CODE_HASH,\n        hashType: template.HASH_TYPE,\n        args: fromScriptArgs,\n      };\n    } else if (\"address\" in fromInfo) {\n      const template = config.SCRIPTS.ANYONE_CAN_PAY;\n      if (!template) {\n        throw new Error(\n          \"Provided config does not have ANYONE_CAN_PAY script setup!\"\n        );\n      }\n\n      const address = fromInfo.address;\n      fromScript = parseAddress(address, { config });\n      destroyable = fromInfo.destroyable;\n\n      if (\n        fromScript.codeHash !== template.CODE_HASH ||\n        fromScript.hashType !== template.HASH_TYPE\n      ) {\n        throw new Error(`fromInfo.address is not ANYONE_CAN_PAY address!`);\n      }\n    } else if (\"script\" in fromInfo) {\n      fromScript = fromInfo.script;\n      customData = fromInfo.customData;\n    } else {\n      throw new Error(\"Invalid fromInfo format!\");\n    }\n  }\n\n  return {\n    fromScript,\n    multisigScript,\n    destroyable,\n    customData,\n  };\n}\n"],"mappings":"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"}