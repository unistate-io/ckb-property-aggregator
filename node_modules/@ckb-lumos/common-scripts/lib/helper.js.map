{"version":3,"file":"helper.js","names":["omnilock","_interopRequireWildcard","require","_immutable","_helpers","_codec","_base","_bi","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","CKBHasher","ckbHash","utils","addCellDep","txSkeleton","newCellDep","cellDep","find","depType","values","OutPointValue","outPoint","validate","equals","update","cellDeps","push","generateDaoScript","config","template","SCRIPTS","DAO","codeHash","CODE_HASH","hashType","HASH_TYPE","args","isSecp256k1Blake160Script","script","SECP256K1_BLAKE160","isSecp256k1Blake160Address","address","parseAddress","isOmnilockScript","OMNILOCK","isOmnilockAddress","isSecp256k1Blake160MultisigScript","SECP256K1_BLAKE160_MULTISIG","isSecp256k1Blake160MultisigAddress","isDaoScript","isSudtScript","SUDT","Error","isAcpScript","ANYONE_CAN_PAY","isAcpAddress","hashWitness","hasher","witness","lengthBuffer","ArrayBuffer","view","DataView","witnessHexString","BI","from","bytes","bytify","length","toString","setUint32","Number","slice","prepareSigningEntries","scriptType","processedArgs","Set","tx","createTransactionFromSkeleton","txHash","blockchain","RawTransaction","pack","inputs","witnesses","signingEntries","i","size","input","cellOutput","lock","add","lockValue","ScriptValue","j","otherInput","signingEntry","type","index","message","digestHex","ensureScript","SECP_SIGNATURE_PLACEHOLDER","exports","OMNILOCK_SIGNATURE_PLACEHOLDER","repeat","OmnilockWitnessLock","signature","byteLength","_default"],"sources":["../src/helper.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion, @typescript-eslint/explicit-module-boundary-types */\n\nimport * as omnilock from \"./omnilock\";\nimport { Set } from \"immutable\";\nimport {\n  createTransactionFromSkeleton,\n  parseAddress,\n  TransactionSkeletonType,\n} from \"@ckb-lumos/helpers\";\nimport { bytes } from \"@ckb-lumos/codec\";\nimport {\n  values,\n  utils,\n  CellDep,\n  Script,\n  Address,\n  HexString,\n  blockchain,\n} from \"@ckb-lumos/base\";\nconst { CKBHasher, ckbHash } = utils;\nimport { Config } from \"@ckb-lumos/config-manager\";\nimport { BI } from \"@ckb-lumos/bi\";\n\nexport function addCellDep(\n  txSkeleton: TransactionSkeletonType,\n  newCellDep: CellDep\n): TransactionSkeletonType {\n  const cellDep = txSkeleton.get(\"cellDeps\").find((cellDep) => {\n    return (\n      cellDep.depType === newCellDep.depType &&\n      new values.OutPointValue(cellDep.outPoint, { validate: false }).equals(\n        new values.OutPointValue(newCellDep.outPoint, { validate: false })\n      )\n    );\n  });\n\n  if (!cellDep) {\n    txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) => {\n      return cellDeps.push({\n        outPoint: newCellDep.outPoint,\n        depType: newCellDep.depType,\n      });\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport function generateDaoScript(config: Config): Script {\n  const template = config.SCRIPTS.DAO!;\n\n  return {\n    codeHash: template.CODE_HASH,\n    hashType: template.HASH_TYPE,\n    args: \"0x\",\n  };\n}\n\nexport function isSecp256k1Blake160Script(\n  script: Script,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SECP256K1_BLAKE160!;\n  return (\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isSecp256k1Blake160Address(\n  address: Address,\n  config: Config\n): boolean {\n  const script = parseAddress(address, { config });\n  return isSecp256k1Blake160Script(script, config);\n}\n\nexport function isOmnilockScript(script: Script, config: Config): boolean {\n  const template = config.SCRIPTS.OMNILOCK!;\n  return (\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isOmnilockAddress(address: Address, config: Config): boolean {\n  const script = parseAddress(address, { config });\n  return isOmnilockScript(script, config);\n}\n\nexport function isSecp256k1Blake160MultisigScript(\n  script: Script,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SECP256K1_BLAKE160_MULTISIG!;\n  return (\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isSecp256k1Blake160MultisigAddress(\n  address: Address,\n  config: Config\n): boolean {\n  const script = parseAddress(address, { config });\n  return isSecp256k1Blake160MultisigScript(script, config);\n}\n\nexport function isDaoScript(\n  script: Script | undefined,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.DAO!;\n\n  return (\n    !!script &&\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isSudtScript(\n  script: Script | undefined,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SUDT;\n\n  if (!template) {\n    throw new Error(`SUDT script not defined in config!`);\n  }\n\n  return (\n    !!script &&\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isAcpScript(script: Script, config: Config): boolean {\n  const template = config.SCRIPTS.ANYONE_CAN_PAY;\n\n  if (!template) {\n    throw new Error(`ANYONE_CAN_PAY script not defined in config!`);\n  }\n\n  return (\n    !!script &&\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isAcpAddress(address: Address, config: Config): boolean {\n  const script = parseAddress(address, { config });\n\n  return isAcpScript(script, config);\n}\n\n/**\n * Hash a witness in a hasher\n * @param hasher The hasher object which should have a `update` method.\n * @param witness witness data, the inputs to hasher will derived from it\n */\nexport function hashWitness(\n  hasher: { update: (value: HexString | ArrayBuffer) => unknown },\n  witness: HexString\n): void {\n  const lengthBuffer = new ArrayBuffer(8);\n  const view = new DataView(lengthBuffer);\n  const witnessHexString = BI.from(bytes.bytify(witness).length).toString(16);\n  if (witnessHexString.length <= 8) {\n    view.setUint32(0, Number(\"0x\" + witnessHexString), true);\n    view.setUint32(4, Number(\"0x\" + \"00000000\"), true);\n  }\n\n  if (witnessHexString.length > 8 && witnessHexString.length <= 16) {\n    view.setUint32(0, Number(\"0x\" + witnessHexString.slice(-8)), true);\n    view.setUint32(4, Number(\"0x\" + witnessHexString.slice(0, -8)), true);\n  }\n  hasher.update(lengthBuffer);\n  hasher.update(witness);\n}\n/* eslint-enable camelcase, @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */\n\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  config: Config,\n  scriptType: \"SECP256K1_BLAKE160\" | \"SECP256K1_BLAKE160_MULTISIG\" | \"OMNILOCK\"\n): TransactionSkeletonType {\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n  let processedArgs = Set<string>();\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  const txHash = ckbHash(blockchain.RawTransaction.pack(tx));\n  const inputs = txSkeleton.get(\"inputs\");\n  const witnesses = txSkeleton.get(\"witnesses\");\n  let signingEntries = txSkeleton.get(\"signingEntries\");\n  for (let i = 0; i < inputs.size; i++) {\n    const input = inputs.get(i)!;\n    if (\n      template.CODE_HASH === input.cellOutput.lock.codeHash &&\n      template.HASH_TYPE === input.cellOutput.lock.hashType &&\n      !processedArgs.has(input.cellOutput.lock.args)\n    ) {\n      processedArgs = processedArgs.add(input.cellOutput.lock.args);\n      const lockValue = new values.ScriptValue(input.cellOutput.lock, {\n        validate: false,\n      });\n      const hasher = new CKBHasher();\n      hasher.update(txHash);\n      if (i >= witnesses.size) {\n        throw new Error(\n          `The first witness in the script group starting at input index ${i} does not exist, maybe some other part has invalidly tampered the transaction?`\n        );\n      }\n      hashWitness(hasher, witnesses.get(i)!);\n      for (let j = i + 1; j < inputs.size && j < witnesses.size; j++) {\n        const otherInput = inputs.get(j)!;\n        if (\n          lockValue.equals(\n            new values.ScriptValue(otherInput.cellOutput.lock, {\n              validate: false,\n            })\n          )\n        ) {\n          hashWitness(hasher, witnesses.get(j)!);\n        }\n      }\n      for (let j = inputs.size; j < witnesses.size; j++) {\n        hashWitness(hasher, witnesses.get(j)!);\n      }\n      const signingEntry = {\n        type: \"witness_args_lock\",\n        index: i,\n        message: hasher.digestHex(),\n      };\n      signingEntries = signingEntries.push(signingEntry);\n    }\n  }\n  txSkeleton = txSkeleton.set(\"signingEntries\", signingEntries);\n  return txSkeleton;\n}\n\nexport function ensureScript(\n  script: Script,\n  config: Config,\n  scriptType:\n    | \"SECP256K1_BLAKE160\"\n    | \"SECP256K1_BLAKE160_MULTISIG\"\n    | \"DAO\"\n    | \"OMNILOCK\"\n): void {\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n  if (\n    template.CODE_HASH !== script.codeHash ||\n    template.HASH_TYPE !== script.hashType\n  ) {\n    throw new Error(`Provided script is not ${scriptType} script!`);\n  }\n}\n\n/* 65-byte zeros in hex */\nexport const SECP_SIGNATURE_PLACEHOLDER =\n  \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n/* 85-byte zeros in hex */\nexport const OMNILOCK_SIGNATURE_PLACEHOLDER = `0x${\"00\".repeat(\n  omnilock.OmnilockWitnessLock.pack({ signature: SECP_SIGNATURE_PLACEHOLDER })\n    .byteLength\n)}`;\n\nexport default {\n  addCellDep,\n  generateDaoScript,\n  isSecp256k1Blake160Script,\n  isSecp256k1Blake160MultisigScript,\n  isDaoScript,\n  isSudtScript,\n  prepareSigningEntries,\n  isSecp256k1Blake160Address,\n  isSecp256k1Blake160MultisigAddress,\n  ensureScript,\n  isAcpScript,\n  isAcpAddress,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA,IAAAA,QAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AAKA,IAAAG,MAAA,GAAAH,OAAA;AACA,IAAAI,KAAA,GAAAJ,OAAA;AAWA,IAAAK,GAAA,GAAAL,OAAA;AAAmC,SAAAM,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAR,wBAAAY,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AArBnC;;AAmBA,MAAM;EAAEW,SAAS;EAAEC;AAAQ,CAAC,GAAGC,WAAK;AAI7B,SAASC,UAAUA,CACxBC,UAAmC,EACnCC,UAAmB,EACM;EACzB,MAAMC,OAAO,GAAGF,UAAU,CAAChB,GAAG,CAAC,UAAU,CAAC,CAACmB,IAAI,CAAED,OAAO,IAAK;IAC3D,OACEA,OAAO,CAACE,OAAO,KAAKH,UAAU,CAACG,OAAO,IACtC,IAAIC,YAAM,CAACC,aAAa,CAACJ,OAAO,CAACK,QAAQ,EAAE;MAAEC,QAAQ,EAAE;IAAM,CAAC,CAAC,CAACC,MAAM,CACpE,IAAIJ,YAAM,CAACC,aAAa,CAACL,UAAU,CAACM,QAAQ,EAAE;MAAEC,QAAQ,EAAE;IAAM,CAAC,CACnE,CAAC;EAEL,CAAC,CAAC;EAEF,IAAI,CAACN,OAAO,EAAE;IACZF,UAAU,GAAGA,UAAU,CAACU,MAAM,CAAC,UAAU,EAAGC,QAAQ,IAAK;MACvD,OAAOA,QAAQ,CAACC,IAAI,CAAC;QACnBL,QAAQ,EAAEN,UAAU,CAACM,QAAQ;QAC7BH,OAAO,EAAEH,UAAU,CAACG;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,OAAOJ,UAAU;AACnB;AAEO,SAASa,iBAAiBA,CAACC,MAAc,EAAU;EACxD,MAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAACC,GAAI;EAEpC,OAAO;IACLC,QAAQ,EAAEH,QAAQ,CAACI,SAAS;IAC5BC,QAAQ,EAAEL,QAAQ,CAACM,SAAS;IAC5BC,IAAI,EAAE;EACR,CAAC;AACH;AAEO,SAASC,yBAAyBA,CACvCC,MAAc,EACdV,MAAc,EACL;EACT,MAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAACS,kBAAmB;EACnD,OACED,MAAM,CAACN,QAAQ,KAAKH,QAAQ,CAACI,SAAS,IACtCK,MAAM,CAACJ,QAAQ,KAAKL,QAAQ,CAACM,SAAS;AAE1C;AAEO,SAASK,0BAA0BA,CACxCC,OAAgB,EAChBb,MAAc,EACL;EACT,MAAMU,MAAM,GAAG,IAAAI,qBAAY,EAACD,OAAO,EAAE;IAAEb;EAAO,CAAC,CAAC;EAChD,OAAOS,yBAAyB,CAACC,MAAM,EAAEV,MAAM,CAAC;AAClD;AAEO,SAASe,gBAAgBA,CAACL,MAAc,EAAEV,MAAc,EAAW;EACxE,MAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAACc,QAAS;EACzC,OACEN,MAAM,CAACN,QAAQ,KAAKH,QAAQ,CAACI,SAAS,IACtCK,MAAM,CAACJ,QAAQ,KAAKL,QAAQ,CAACM,SAAS;AAE1C;AAEO,SAASU,iBAAiBA,CAACJ,OAAgB,EAAEb,MAAc,EAAW;EAC3E,MAAMU,MAAM,GAAG,IAAAI,qBAAY,EAACD,OAAO,EAAE;IAAEb;EAAO,CAAC,CAAC;EAChD,OAAOe,gBAAgB,CAACL,MAAM,EAAEV,MAAM,CAAC;AACzC;AAEO,SAASkB,iCAAiCA,CAC/CR,MAAc,EACdV,MAAc,EACL;EACT,MAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAACiB,2BAA4B;EAC5D,OACET,MAAM,CAACN,QAAQ,KAAKH,QAAQ,CAACI,SAAS,IACtCK,MAAM,CAACJ,QAAQ,KAAKL,QAAQ,CAACM,SAAS;AAE1C;AAEO,SAASa,kCAAkCA,CAChDP,OAAgB,EAChBb,MAAc,EACL;EACT,MAAMU,MAAM,GAAG,IAAAI,qBAAY,EAACD,OAAO,EAAE;IAAEb;EAAO,CAAC,CAAC;EAChD,OAAOkB,iCAAiC,CAACR,MAAM,EAAEV,MAAM,CAAC;AAC1D;AAEO,SAASqB,WAAWA,CACzBX,MAA0B,EAC1BV,MAAc,EACL;EACT,MAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAACC,GAAI;EAEpC,OACE,CAAC,CAACO,MAAM,IACRA,MAAM,CAACN,QAAQ,KAAKH,QAAQ,CAACI,SAAS,IACtCK,MAAM,CAACJ,QAAQ,KAAKL,QAAQ,CAACM,SAAS;AAE1C;AAEO,SAASe,YAAYA,CAC1BZ,MAA0B,EAC1BV,MAAc,EACL;EACT,MAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAACqB,IAAI;EAEpC,IAAI,CAACtB,QAAQ,EAAE;IACb,MAAM,IAAIuB,KAAK,CAAE,oCAAmC,CAAC;EACvD;EAEA,OACE,CAAC,CAACd,MAAM,IACRA,MAAM,CAACN,QAAQ,KAAKH,QAAQ,CAACI,SAAS,IACtCK,MAAM,CAACJ,QAAQ,KAAKL,QAAQ,CAACM,SAAS;AAE1C;AAEO,SAASkB,WAAWA,CAACf,MAAc,EAAEV,MAAc,EAAW;EACnE,MAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAACwB,cAAc;EAE9C,IAAI,CAACzB,QAAQ,EAAE;IACb,MAAM,IAAIuB,KAAK,CAAE,8CAA6C,CAAC;EACjE;EAEA,OACE,CAAC,CAACd,MAAM,IACRA,MAAM,CAACN,QAAQ,KAAKH,QAAQ,CAACI,SAAS,IACtCK,MAAM,CAACJ,QAAQ,KAAKL,QAAQ,CAACM,SAAS;AAE1C;AAEO,SAASoB,YAAYA,CAACd,OAAgB,EAAEb,MAAc,EAAW;EACtE,MAAMU,MAAM,GAAG,IAAAI,qBAAY,EAACD,OAAO,EAAE;IAAEb;EAAO,CAAC,CAAC;EAEhD,OAAOyB,WAAW,CAACf,MAAM,EAAEV,MAAM,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACO,SAAS4B,WAAWA,CACzBC,MAA+D,EAC/DC,OAAkB,EACZ;EACN,MAAMC,YAAY,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC;EACvC,MAAMC,IAAI,GAAG,IAAIC,QAAQ,CAACH,YAAY,CAAC;EACvC,MAAMI,gBAAgB,GAAGC,MAAE,CAACC,IAAI,CAACC,YAAK,CAACC,MAAM,CAACT,OAAO,CAAC,CAACU,MAAM,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;EAC3E,IAAIN,gBAAgB,CAACK,MAAM,IAAI,CAAC,EAAE;IAChCP,IAAI,CAACS,SAAS,CAAC,CAAC,EAAEC,MAAM,CAAC,IAAI,GAAGR,gBAAgB,CAAC,EAAE,IAAI,CAAC;IACxDF,IAAI,CAACS,SAAS,CAAC,CAAC,EAAEC,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,EAAE,IAAI,CAAC;EACpD;EAEA,IAAIR,gBAAgB,CAACK,MAAM,GAAG,CAAC,IAAIL,gBAAgB,CAACK,MAAM,IAAI,EAAE,EAAE;IAChEP,IAAI,CAACS,SAAS,CAAC,CAAC,EAAEC,MAAM,CAAC,IAAI,GAAGR,gBAAgB,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;IAClEX,IAAI,CAACS,SAAS,CAAC,CAAC,EAAEC,MAAM,CAAC,IAAI,GAAGR,gBAAgB,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;EACvE;EACAf,MAAM,CAACjC,MAAM,CAACmC,YAAY,CAAC;EAC3BF,MAAM,CAACjC,MAAM,CAACkC,OAAO,CAAC;AACxB;AACA;;AAEO,SAASe,qBAAqBA,CACnC3D,UAAmC,EACnCc,MAAc,EACd8C,UAA6E,EACpD;EACzB,MAAM7C,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAAC4C,UAAU,CAAC;EAC3C,IAAI,CAAC7C,QAAQ,EAAE;IACb,MAAM,IAAIuB,KAAK,CACZ,iCAAgCsB,UAAW,gBAC9C,CAAC;EACH;EACA,IAAIC,aAAa,GAAG,IAAAC,cAAG,EAAS,CAAC;EACjC,MAAMC,EAAE,GAAG,IAAAC,sCAA6B,EAAChE,UAAU,CAAC;EACpD,MAAMiE,MAAM,GAAGpE,OAAO,CAACqE,gBAAU,CAACC,cAAc,CAACC,IAAI,CAACL,EAAE,CAAC,CAAC;EAC1D,MAAMM,MAAM,GAAGrE,UAAU,CAAChB,GAAG,CAAC,QAAQ,CAAC;EACvC,MAAMsF,SAAS,GAAGtE,UAAU,CAAChB,GAAG,CAAC,WAAW,CAAC;EAC7C,IAAIuF,cAAc,GAAGvE,UAAU,CAAChB,GAAG,CAAC,gBAAgB,CAAC;EACrD,KAAK,IAAIwF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,IAAI,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,KAAK,GAAGL,MAAM,CAACrF,GAAG,CAACwF,CAAC,CAAE;IAC5B,IACEzD,QAAQ,CAACI,SAAS,KAAKuD,KAAK,CAACC,UAAU,CAACC,IAAI,CAAC1D,QAAQ,IACrDH,QAAQ,CAACM,SAAS,KAAKqD,KAAK,CAACC,UAAU,CAACC,IAAI,CAACxD,QAAQ,IACrD,CAACyC,aAAa,CAAC9E,GAAG,CAAC2F,KAAK,CAACC,UAAU,CAACC,IAAI,CAACtD,IAAI,CAAC,EAC9C;MACAuC,aAAa,GAAGA,aAAa,CAACgB,GAAG,CAACH,KAAK,CAACC,UAAU,CAACC,IAAI,CAACtD,IAAI,CAAC;MAC7D,MAAMwD,SAAS,GAAG,IAAIzE,YAAM,CAAC0E,WAAW,CAACL,KAAK,CAACC,UAAU,CAACC,IAAI,EAAE;QAC9DpE,QAAQ,EAAE;MACZ,CAAC,CAAC;MACF,MAAMmC,MAAM,GAAG,IAAI/C,SAAS,CAAC,CAAC;MAC9B+C,MAAM,CAACjC,MAAM,CAACuD,MAAM,CAAC;MACrB,IAAIO,CAAC,IAAIF,SAAS,CAACG,IAAI,EAAE;QACvB,MAAM,IAAInC,KAAK,CACZ,iEAAgEkC,CAAE,gFACrE,CAAC;MACH;MACA9B,WAAW,CAACC,MAAM,EAAE2B,SAAS,CAACtF,GAAG,CAACwF,CAAC,CAAE,CAAC;MACtC,KAAK,IAAIQ,CAAC,GAAGR,CAAC,GAAG,CAAC,EAAEQ,CAAC,GAAGX,MAAM,CAACI,IAAI,IAAIO,CAAC,GAAGV,SAAS,CAACG,IAAI,EAAEO,CAAC,EAAE,EAAE;QAC9D,MAAMC,UAAU,GAAGZ,MAAM,CAACrF,GAAG,CAACgG,CAAC,CAAE;QACjC,IACEF,SAAS,CAACrE,MAAM,CACd,IAAIJ,YAAM,CAAC0E,WAAW,CAACE,UAAU,CAACN,UAAU,CAACC,IAAI,EAAE;UACjDpE,QAAQ,EAAE;QACZ,CAAC,CACH,CAAC,EACD;UACAkC,WAAW,CAACC,MAAM,EAAE2B,SAAS,CAACtF,GAAG,CAACgG,CAAC,CAAE,CAAC;QACxC;MACF;MACA,KAAK,IAAIA,CAAC,GAAGX,MAAM,CAACI,IAAI,EAAEO,CAAC,GAAGV,SAAS,CAACG,IAAI,EAAEO,CAAC,EAAE,EAAE;QACjDtC,WAAW,CAACC,MAAM,EAAE2B,SAAS,CAACtF,GAAG,CAACgG,CAAC,CAAE,CAAC;MACxC;MACA,MAAME,YAAY,GAAG;QACnBC,IAAI,EAAE,mBAAmB;QACzBC,KAAK,EAAEZ,CAAC;QACRa,OAAO,EAAE1C,MAAM,CAAC2C,SAAS,CAAC;MAC5B,CAAC;MACDf,cAAc,GAAGA,cAAc,CAAC3D,IAAI,CAACsE,YAAY,CAAC;IACpD;EACF;EACAlF,UAAU,GAAGA,UAAU,CAACL,GAAG,CAAC,gBAAgB,EAAE4E,cAAc,CAAC;EAC7D,OAAOvE,UAAU;AACnB;AAEO,SAASuF,YAAYA,CAC1B/D,MAAc,EACdV,MAAc,EACd8C,UAIc,EACR;EACN,MAAM7C,QAAQ,GAAGD,MAAM,CAACE,OAAO,CAAC4C,UAAU,CAAC;EAC3C,IAAI,CAAC7C,QAAQ,EAAE;IACb,MAAM,IAAIuB,KAAK,CACZ,iCAAgCsB,UAAW,gBAC9C,CAAC;EACH;EACA,IACE7C,QAAQ,CAACI,SAAS,KAAKK,MAAM,CAACN,QAAQ,IACtCH,QAAQ,CAACM,SAAS,KAAKG,MAAM,CAACJ,QAAQ,EACtC;IACA,MAAM,IAAIkB,KAAK,CAAE,0BAAyBsB,UAAW,UAAS,CAAC;EACjE;AACF;;AAEA;AACO,MAAM4B,0BAA0B,GACrC,sIAAsI;AACxI;AAAAC,OAAA,CAAAD,0BAAA,GAAAA,0BAAA;AACO,MAAME,8BAA8B,GAAI,KAAI,IAAI,CAACC,MAAM,CAC5D7H,QAAQ,CAAC8H,mBAAmB,CAACxB,IAAI,CAAC;EAAEyB,SAAS,EAAEL;AAA2B,CAAC,CAAC,CACzEM,UACL,CAAE,EAAC;AAACL,OAAA,CAAAC,8BAAA,GAAAA,8BAAA;AAAA,IAAAK,QAAA,GAEW;EACbhG,UAAU;EACVc,iBAAiB;EACjBU,yBAAyB;EACzBS,iCAAiC;EACjCG,WAAW;EACXC,YAAY;EACZuB,qBAAqB;EACrBjC,0BAA0B;EAC1BQ,kCAAkC;EAClCqD,YAAY;EACZhD,WAAW;EACXE;AACF,CAAC;AAAAgD,OAAA,CAAA5G,OAAA,GAAAkH,QAAA"}