{"version":3,"file":"secp256k1_blake160.js","names":["_immutable","require","_helpers","_codec","_base","_configManager","_helper","_from_info","_bi","ScriptValue","values","CellCollector","constructor","fromInfo","cellProvider","config","undefined","queryOptions","Error","getConfig","fromScript","parseFromInfo","lock","type","cellCollector","collector","collect","isSecp256k1Blake160Script","inputCell","exports","setupInputCell","txSkeleton","_fromInfo","defaultWitness","since","cellOutput","update","inputs","push","output","capacity","data","outputs","inputSinces","set","get","size","witnesses","template","SCRIPTS","SECP256K1_BLAKE160","scriptOutPoint","txHash","TX_HASH","index","INDEX","addCellDep","outPoint","depType","DEP_TYPE","firstIndex","findIndex","input","validate","equals","witness","newWitnessArgs","SECP_SIGNATURE_PLACEHOLDER","witnessArgs","blockchain","WitnessArgs","unpack","bytes","bytify","equal","inputType","outputType","hexify","pack","transfer","fromAddress","toAddress","amount","requireToAddress","assertAmountEnough","result","transferCompatible","_txSkeleton","_amount","Array","BigInt","toString","parseAddress","ensureScript","BI","from","toScript","blockHash","lastFreezedOutput","filter","field","maxBy","i","gt","cellCapacity","deductCapacity","gte","sub","minimalCellCapacityCompatible","eq","changeCell","changeCapacity","previousInputs","Set","add","has","inputCapacity","payFee","injectCapacity","outputIndex","prepareSigningEntries","_prepareSigningEntries","_default","default"],"sources":["../src/secp256k1_blake160.ts"],"sourcesContent":["import { Set } from \"immutable\";\nimport {\n  parseAddress,\n  minimalCellCapacityCompatible,\n  TransactionSkeletonType,\n  Options,\n} from \"@ckb-lumos/helpers\";\nimport { bytes } from \"@ckb-lumos/codec\";\nimport {\n  values,\n  Address,\n  Cell,\n  WitnessArgs,\n  CellCollector as CellCollectorType,\n  Script,\n  CellProvider,\n  QueryOptions,\n  OutPoint,\n  HexString,\n  PackedSince,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport { getConfig, Config } from \"@ckb-lumos/config-manager\";\nimport {\n  addCellDep,\n  ensureScript,\n  prepareSigningEntries as _prepareSigningEntries,\n  SECP_SIGNATURE_PLACEHOLDER,\n  isSecp256k1Blake160Script,\n} from \"./helper\";\nimport { FromInfo } from \".\";\nimport { parseFromInfo } from \"./from_info\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { CellCollectorConstructor } from \"./type\";\nconst { ScriptValue } = values;\n\nexport const CellCollector: CellCollectorConstructor = class CellCollector\n  implements CellCollectorType\n{\n  private cellCollector: CellCollectorType;\n  private config: Config;\n  public readonly fromScript: Script;\n\n  constructor(\n    fromInfo: FromInfo,\n    cellProvider: CellProvider,\n    {\n      config = undefined,\n      queryOptions = {},\n    }: Options & {\n      queryOptions?: QueryOptions;\n    } = {}\n  ) {\n    if (!cellProvider) {\n      throw new Error(`Cell provider is missing!`);\n    }\n    config = config || getConfig();\n    this.fromScript = parseFromInfo(fromInfo, { config }).fromScript;\n\n    this.config = config;\n\n    queryOptions = {\n      ...queryOptions,\n      lock: this.fromScript,\n      type: queryOptions.type || \"empty\",\n    };\n\n    this.cellCollector = cellProvider.collector(queryOptions);\n  }\n\n  async *collect(): AsyncGenerator<Cell> {\n    if (!isSecp256k1Blake160Script(this.fromScript, this.config)) {\n      return;\n    }\n\n    for await (const inputCell of this.cellCollector.collect()) {\n      yield inputCell;\n    }\n  }\n};\n\n/**\n * Setup input cell infos, such as cell deps and witnesses.\n *\n * @param txSkeleton\n * @param inputCell\n * @param _fromInfo\n * @param options\n */\nexport async function setupInputCell(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  _fromInfo?: FromInfo,\n  {\n    config = undefined,\n    defaultWitness = \"0x\",\n    since = undefined,\n  }: Options & {\n    defaultWitness?: HexString;\n    since?: PackedSince;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  const fromScript = inputCell.cellOutput.lock;\n  if (!isSecp256k1Blake160Script(fromScript, config)) {\n    throw new Error(`Not SECP256K1_BLAKE160 input!`);\n  }\n\n  // add inputCell to txSkeleton\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n    return inputs.push(inputCell);\n  });\n\n  const output: Cell = {\n    cellOutput: {\n      capacity: inputCell.cellOutput.capacity,\n      lock: inputCell.cellOutput.lock,\n      type: inputCell.cellOutput.type,\n    },\n    data: inputCell.data,\n  };\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(output);\n  });\n\n  if (since) {\n    txSkeleton = txSkeleton.update(\"inputSinces\", (inputSinces) => {\n      return inputSinces.set(txSkeleton.get(\"inputs\").size - 1, since);\n    });\n  }\n\n  txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n    return witnesses.push(defaultWitness);\n  });\n\n  const template = config.SCRIPTS.SECP256K1_BLAKE160;\n  if (!template) {\n    throw new Error(`SECP256K1_BLAKE160 script not defined in config!`);\n  }\n\n  const scriptOutPoint: OutPoint = {\n    txHash: template.TX_HASH,\n    index: template.INDEX,\n  };\n\n  // add cell dep\n  txSkeleton = addCellDep(txSkeleton, {\n    outPoint: scriptOutPoint,\n    depType: template.DEP_TYPE,\n  });\n\n  // add witness\n  /*\n   * Modify the skeleton, so the first witness of the fromAddress script group\n   * has a WitnessArgs construct with 65-byte zero filled values. While this\n   * is not required, it helps in transaction fee estimation.\n   */\n  const firstIndex = txSkeleton\n    .get(\"inputs\")\n    .findIndex((input) =>\n      new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    );\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n    }\n    let witness: string = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    const newWitnessArgs: WitnessArgs = {\n      /* 65-byte zeros in hex */\n      lock: SECP_SIGNATURE_PLACEHOLDER,\n    };\n    if (witness !== \"0x\") {\n      const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));\n      const lock = witnessArgs.lock;\n      if (\n        !!lock &&\n        !!newWitnessArgs.lock &&\n        !bytes.equal(lock, newWitnessArgs.lock)\n      ) {\n        throw new Error(\n          \"Lock field in first witness is set aside for signature!\"\n        );\n      }\n      const inputType = witnessArgs.inputType;\n      if (inputType) {\n        newWitnessArgs.inputType = inputType;\n      }\n      const outputType = witnessArgs.outputType;\n      if (outputType) {\n        newWitnessArgs.outputType = outputType;\n      }\n    }\n    witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.set(firstIndex, witness)\n    );\n  }\n\n  return txSkeleton;\n}\n\nexport async function transfer(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: bigint,\n  options?: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough?: true;\n  }\n): Promise<TransactionSkeletonType>;\n\nexport async function transfer(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: bigint,\n  options: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough: false;\n  }\n): Promise<[TransactionSkeletonType, bigint]>;\n\n/**\n * transfer capacity from secp256k1_blake160 script cells\n *\n * @param txSkeleton\n * @param fromAddress\n * @param toAddress\n * @param amount\n * @param options\n */\nexport async function transfer(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: bigint,\n  {\n    config = undefined,\n    requireToAddress = true,\n    assertAmountEnough = true,\n  }: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType | [TransactionSkeletonType, bigint]> {\n  const result = await transferCompatible(\n    txSkeleton,\n    fromAddress,\n    toAddress,\n    amount,\n    {\n      config,\n      requireToAddress,\n      assertAmountEnough: assertAmountEnough as true | undefined,\n    }\n  );\n  let _txSkeleton: TransactionSkeletonType;\n  let _amount: bigint;\n  if (result instanceof Array) {\n    _txSkeleton = result[0];\n    _amount = BigInt(result[1].toString());\n    return [_txSkeleton, _amount];\n  } else {\n    _txSkeleton = result;\n    return _txSkeleton;\n  }\n}\nexport async function transferCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: BIish,\n  options?: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough?: true;\n  }\n): Promise<TransactionSkeletonType>;\n\nexport async function transferCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: BIish,\n  options: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough: false;\n  }\n): Promise<[TransactionSkeletonType, BI]>;\n/**\n * transfer capacity from secp256k1_blake160 script cells\n *\n * @param txSkeleton\n * @param fromAddress\n * @param toAddress\n * @param amount\n * @param options\n */\nexport async function transferCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  toAddress: Address | null | undefined,\n  amount: BIish,\n  {\n    config = undefined,\n    requireToAddress = true,\n    assertAmountEnough = true,\n  }: {\n    config?: Config;\n    requireToAddress?: boolean;\n    assertAmountEnough?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType | [TransactionSkeletonType, BI]> {\n  config = config || getConfig();\n\n  const template = config.SCRIPTS.SECP256K1_BLAKE160;\n  if (!template) {\n    throw new Error(\n      \"Provided config does not have SECP256K1_BLAKE160 script setup!\"\n    );\n  }\n  const scriptOutPoint = {\n    txHash: template.TX_HASH,\n    index: template.INDEX,\n  };\n\n  txSkeleton = addCellDep(txSkeleton, {\n    outPoint: scriptOutPoint,\n    depType: template.DEP_TYPE,\n  });\n\n  const fromScript = parseAddress(fromAddress, { config });\n  ensureScript(fromScript, config, \"SECP256K1_BLAKE160\");\n\n  if (requireToAddress && !toAddress) {\n    throw new Error(\"You must provide a to address!\");\n  }\n\n  let _amount = BI.from(amount);\n  if (toAddress) {\n    const toScript = parseAddress(toAddress, { config });\n\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push({\n        cellOutput: {\n          capacity: \"0x\" + _amount.toString(16),\n          lock: toScript,\n          type: undefined,\n        },\n        data: \"0x\",\n        outPoint: undefined,\n        blockHash: undefined,\n      });\n    });\n  }\n\n  /*\n   * First, check if there is any output cells that contains enough capacity\n   * for us to tinker with.\n   *\n   * TODO: the solution right now won't cover all cases, some outputs before the\n   * last output might still be tinkerable, right now we are working on the\n   * simple solution, later we can change this for more optimizations.\n   */\n  const lastFreezedOutput = txSkeleton\n    .get(\"fixedEntries\")\n    .filter(({ field }) => field === \"outputs\")\n    .maxBy(({ index }) => index);\n  let i = lastFreezedOutput ? lastFreezedOutput.index + 1 : 0;\n  for (; i < txSkeleton.get(\"outputs\").size && _amount.gt(0); i++) {\n    const output = txSkeleton.get(\"outputs\").get(i)!;\n    if (\n      new ScriptValue(output.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    ) {\n      const cellCapacity = BI.from(output.cellOutput.capacity);\n      let deductCapacity;\n      if (_amount.gte(cellCapacity)) {\n        deductCapacity = cellCapacity;\n      } else {\n        deductCapacity = cellCapacity.sub(\n          minimalCellCapacityCompatible(output)\n        );\n        if (deductCapacity.gt(_amount)) {\n          deductCapacity = _amount;\n        }\n      }\n      _amount = _amount.sub(deductCapacity);\n      output.cellOutput.capacity =\n        \"0x\" + cellCapacity.sub(deductCapacity).toString(16);\n    }\n  }\n  // Remove all output cells with capacity equal to 0\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.filter(\n      (output) => !BI.from(output.cellOutput.capacity).eq(0)\n    );\n  });\n  /*\n   * Collect and add new input cells so as to prepare remaining capacities.\n   */\n  if (_amount.gt(0)) {\n    const cellProvider = txSkeleton.get(\"cellProvider\");\n    if (!cellProvider) {\n      throw new Error(\"Cell provider is missing!\");\n    }\n    const cellCollector = cellProvider.collector({\n      lock: fromScript,\n    });\n    const changeCell: Cell = {\n      cellOutput: {\n        capacity: \"0x0\",\n        lock: fromScript,\n        type: undefined,\n      },\n      data: \"0x\",\n      outPoint: undefined,\n      blockHash: undefined,\n    };\n    let changeCapacity = BI.from(0);\n    let previousInputs = Set<string>();\n    for (const input of txSkeleton.get(\"inputs\")) {\n      previousInputs = previousInputs.add(\n        `${input.outPoint!.txHash}_${input.outPoint!.index}`\n      );\n    }\n    for await (const inputCell of cellCollector.collect()) {\n      // skip inputs already exists in txSkeleton.inputs\n      if (\n        previousInputs.has(\n          `${inputCell.outPoint!.txHash}_${inputCell.outPoint!.index}`\n        )\n      ) {\n        continue;\n      }\n      txSkeleton = txSkeleton.update(\"inputs\", (inputs) =>\n        inputs.push(inputCell)\n      );\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n      const inputCapacity = BI.from(inputCell.cellOutput.capacity);\n      let deductCapacity = inputCapacity;\n      if (deductCapacity.gt(_amount)) {\n        deductCapacity = _amount;\n      }\n      _amount = _amount.sub(deductCapacity);\n      changeCapacity = changeCapacity.add(inputCapacity).sub(deductCapacity);\n      if (\n        _amount.eq(0) &&\n        (changeCapacity.eq(0) ||\n          changeCapacity.gt(minimalCellCapacityCompatible(changeCell)))\n      ) {\n        break;\n      }\n    }\n    if (changeCapacity.gt(0)) {\n      changeCell.cellOutput.capacity = \"0x\" + changeCapacity.toString(16);\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) =>\n        outputs.push(changeCell)\n      );\n    }\n  }\n  if (_amount.gt(0) && assertAmountEnough) {\n    throw new Error(\"Not enough capacity in from address!\");\n  }\n  /*\n   * Modify the skeleton, so the first witness of the fromAddress script group\n   * has a WitnessArgs construct with 65-byte zero filled values. While this\n   * is not required, it helps in transaction fee estimation.\n   */\n  const firstIndex = txSkeleton\n    .get(\"inputs\")\n    .findIndex((input) =>\n      new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    );\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n    }\n    let witness: string = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    const newWitnessArgs: WitnessArgs = {\n      /* 65-byte zeros in hex */\n      lock: SECP_SIGNATURE_PLACEHOLDER,\n    };\n    if (witness !== \"0x\") {\n      const witnessArgs = blockchain.WitnessArgs.unpack(bytes.bytify(witness));\n      const lock = witnessArgs.lock;\n      if (\n        !!lock &&\n        !!newWitnessArgs.lock &&\n        !bytes.equal(lock, newWitnessArgs.lock)\n      ) {\n        throw new Error(\n          \"Lock field in first witness is set aside for signature!\"\n        );\n      }\n      const inputType = witnessArgs.inputType;\n      if (inputType) {\n        newWitnessArgs.inputType = inputType;\n      }\n      const outputType = witnessArgs.outputType;\n      if (outputType) {\n        newWitnessArgs.outputType = outputType;\n      }\n    }\n    witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.set(firstIndex, witness)\n    );\n  }\n  if (!assertAmountEnough) {\n    return [txSkeleton, BI.from(_amount)];\n  }\n  return txSkeleton;\n}\n\n/**\n * pay fee by secp256k1_blake160 script cells\n *\n * @param txSkeleton\n * @param fromAddress\n * @param amount fee in shannon\n * @param options\n */\nexport async function payFee(\n  txSkeleton: TransactionSkeletonType,\n  fromAddress: Address,\n  amount: BIish,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  return await transferCompatible(txSkeleton, fromAddress, null, amount, {\n    config,\n    requireToAddress: false,\n  });\n}\n\n/**\n * Inject capacity from `fromAddress` to target output.\n *\n * @param txSkeleton\n * @param outputIndex\n * @param fromAddress\n * @param options\n */\nexport async function injectCapacity(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number,\n  fromAddress: Address,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  if (outputIndex >= txSkeleton.get(\"outputs\").size) {\n    throw new Error(\"Invalid output index!\");\n  }\n  const capacity = BI.from(\n    txSkeleton.get(\"outputs\").get(outputIndex)!.cellOutput.capacity\n  );\n  return await transferCompatible(\n    txSkeleton,\n    fromAddress,\n    null,\n    BI.from(capacity),\n    {\n      config,\n      requireToAddress: false,\n    }\n  );\n}\n\n/**\n * prepare for txSkeleton signingEntries, will update txSkeleton.get(\"signingEntries\")\n *\n * @param txSkeleton\n * @param options\n */\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  { config = undefined }: Options = {}\n): TransactionSkeletonType {\n  config = config || getConfig();\n\n  return _prepareSigningEntries(txSkeleton, config, \"SECP256K1_BLAKE160\");\n}\n\nexport default {\n  transfer,\n  transferCompatible,\n  payFee,\n  prepareSigningEntries,\n  injectCapacity,\n  setupInputCell,\n  CellCollector,\n};\n"],"mappings":"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"}