import { TransactionSkeletonType, Options } from "@ckb-lumos/helpers";
import { BytesLike } from "@ckb-lumos/codec";
import { Cell, Script, HexString, PackedSince } from "@ckb-lumos/base";
import { FromInfo } from ".";
import { CellCollectorConstructor } from "./type";
export type OmnilockInfo = {
    auth: {
        flag: "ETHEREUM" | "SECP256K1_BLAKE160";
        /**
         * if auth flag is SECP256K1_BLAKE160, content is publicKeyToBlake160(secp256k1Pubkey)
         * if auth flag is ETHEREUM, content is Ethereum address
         */
        content: BytesLike;
    };
};
/**
 * only support ETHEREUM and SECP256K1_BLAKE160 mode currently
 * refer to: @link https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0042-omnilock/0042-omnilock.md omnilock
 * @param omnilockInfo
 * @param options
 * @returns
 */
export declare function createOmnilockScript(omnilockInfo: OmnilockInfo, options?: Options): Script;
export declare const OmnilockWitnessLock: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    signature: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>>;
    omni_identity: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        identity: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, BytesLike>;
        proofs: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
            mask: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, BytesLike>;
            proof: import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>;
        }>>;
    }>>;
    preimage: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>>;
}>;
export declare const CellCollector: CellCollectorConstructor;
/**
 * Setup input cell infos, such as cell deps and witnesses.
 *
 * @param txSkeleton
 * @param inputCell
 * @param _fromInfo
 * @param options
 */
export declare function setupInputCell(txSkeleton: TransactionSkeletonType, inputCell: Cell, _fromInfo?: FromInfo, { config, defaultWitness, since, }?: Options & {
    defaultWitness?: HexString;
    since?: PackedSince;
}): Promise<TransactionSkeletonType>;
/**
 * prepare for txSkeleton signingEntries, will update txSkeleton.get("signingEntries")
 *
 * @param txSkeleton
 * @param options
 */
export declare function prepareSigningEntries(txSkeleton: TransactionSkeletonType, { config }?: Options): TransactionSkeletonType;
declare const _default: {
    prepareSigningEntries: typeof prepareSigningEntries;
    setupInputCell: typeof setupInputCell;
    CellCollector: CellCollectorConstructor;
    OmnilockWitnessLock: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        signature: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>>;
        omni_identity: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
            identity: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, BytesLike>;
            proofs: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
                mask: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, BytesLike>;
                proof: import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>;
            }>>;
        }>>;
        preimage: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>>;
    }>;
    createOmnilockScript: typeof createOmnilockScript;
};
export default _default;
//# sourceMappingURL=omnilock.d.ts.map