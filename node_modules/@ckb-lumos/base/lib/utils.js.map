{"version":3,"file":"utils.js","names":["_blake2b","_interopRequireDefault","require","_lodash","_jsXxhash","_codec","_bi","blockchain","_interopRequireWildcard","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","bytify","hexify","bytifyRawString","bytes","CKBHasher","constructor","options","outLength","hasher","blake2b","undefined","update","data","digestHex","out","Uint8Array","digest","buffer","exports","ckbHash","computeScriptHash","script","Script","pack","hashCode","xxHash32","toBigUInt64LE","num","toBigUInt64LECompatible","BI","from","buf","Buffer","alloc","writeUInt32LE","and","toNumber","shr","toString","readBigUInt64LE","hex","readBigUInt64LECompatible","toBigInt","slice","readUInt32LE","add","shl","toBigUInt128LE","u128","toBigUInt128LECompatible","U128_MIN_COMPATIBLE","U128_MAX_COMPATIBLE","lt","Error","gt","readBigUInt128LE","leHex","readBigUInt128LECompatible","length","startsWith","assertHexString","debugPath","str","test","assertHexadecimal","isDeepEqual","a","b","isEqual","TYPE_ID_CODE_HASH","generateTypeIdArgs","input","outputIndex","outPointBuf","CellInput","outputIndexBuf","number","Uint64LE","ckbHasher","generateTypeIdScript","args","codeHash","hashType","toCamel","s","replace","$1","toUpperCase","deepCamel","map","item","result","value","deepCamelizeDepGroup","deepCamelizeTransaction"],"sources":["../src/utils.ts"],"sourcesContent":["import blake2b, { Blake2b } from \"blake2b\";\nimport isEqual from \"lodash.isequal\";\nimport { xxHash32 } from \"js-xxhash\";\nimport { bytes, number, BytesLike } from \"@ckb-lumos/codec\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport * as blockchain from \"./blockchain\";\nimport { Script, Input } from \"./api\";\nimport { Hash, HexNumber, HexString } from \"./primitive\";\n\ntype CKBHasherOptions = {\n  outLength?: number;\n};\n\nconst { bytify, hexify, bytifyRawString } = bytes;\nclass CKBHasher {\n  hasher: Blake2b;\n  outLength: number;\n\n  constructor(options: CKBHasherOptions = {}) {\n    const { outLength = 32 } = options;\n    this.outLength = outLength;\n    this.hasher = blake2b(\n      outLength,\n      undefined,\n      undefined,\n      bytifyRawString(\"ckb-default-hash\")\n    );\n  }\n\n  update(data: string | ArrayBuffer): this {\n    this.hasher.update(bytify(data));\n    return this;\n  }\n\n  digestHex(): Hash {\n    const out = new Uint8Array(this.outLength);\n    this.hasher.digest(out);\n    return hexify(out.buffer);\n  }\n}\n\nfunction ckbHash(data: BytesLike): Hash {\n  const hasher = new CKBHasher();\n  hasher.update(bytes.bytify(data));\n  return hasher.digestHex();\n}\n\n/**\n * compute lock/type hash\n *\n * @param script\n */\nfunction computeScriptHash(script: Script): string {\n  return ckbHash(blockchain.Script.pack(script));\n}\n\nfunction hashCode(buffer: Buffer): number {\n  return xxHash32(buffer, 0);\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert bigint to BigUInt64 little-endian hex string\n * @param num\n */\nfunction toBigUInt64LE(num: BIish): HexString {\n  return toBigUInt64LECompatible(num);\n}\n\nfunction toBigUInt64LECompatible(num: BIish): HexString {\n  num = BI.from(num);\n  const buf = Buffer.alloc(8);\n  buf.writeUInt32LE(num.and(\"0xffffffff\").toNumber(), 0);\n  num = num.shr(32);\n  buf.writeUInt32LE(num.and(\"0xffffffff\").toNumber(), 4);\n  return `0x${buf.toString(\"hex\")}`;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert BigUInt64 little-endian hex string to bigint\n *\n * @param hex BigUInt64 little-endian hex string\n */\nfunction readBigUInt64LE(hex: HexString): bigint {\n  return readBigUInt64LECompatible(hex).toBigInt();\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nfunction readBigUInt64LECompatible(hex: HexString): BI {\n  const buf = Buffer.from(hex.slice(2), \"hex\");\n  return BI.from(buf.readUInt32LE()).add(BI.from(buf.readUInt32LE(4)).shl(32));\n}\n\n// const U128_MIN = BigInt(0);\n// const U128_MAX = BigInt(\"340282366920938463463374607431768211455\");\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert bigint to BigUInt128 little-endian hex string\n *\n * @param u128\n */\nfunction toBigUInt128LE(u128: BIish): string {\n  return toBigUInt128LECompatible(u128);\n}\n\nconst U128_MIN_COMPATIBLE = BI.from(0);\nconst U128_MAX_COMPATIBLE = BI.from(\"340282366920938463463374607431768211455\");\nfunction toBigUInt128LECompatible(num: BIish): HexNumber {\n  num = BI.from(num);\n  if (num.lt(U128_MIN_COMPATIBLE)) {\n    throw new Error(`u128 ${num} too small`);\n  }\n\n  if (num.gt(U128_MAX_COMPATIBLE)) {\n    throw new Error(`u128 ${num} too large`);\n  }\n\n  const buf = Buffer.alloc(16);\n  buf.writeUInt32LE(num.and(0xffffffff).toNumber(), 0);\n  num = num.shr(32);\n  buf.writeUInt32LE(num.and(0xffffffff).toNumber(), 4);\n\n  num = num.shr(32);\n  buf.writeUInt32LE(num.and(0xffffffff).toNumber(), 8);\n\n  num = num.shr(32);\n  buf.writeUInt32LE(num.and(0xffffffff).toNumber(), 12);\n  return `0x${buf.toString(\"hex\")}`;\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert BigUInt64 little-endian hex string to bigint\n *\n * @param leHex BigUInt128 little-endian hex string\n */\nfunction readBigUInt128LE(leHex: HexString): bigint {\n  return readBigUInt128LECompatible(leHex).toBigInt();\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nfunction readBigUInt128LECompatible(leHex: HexString): BI {\n  if (leHex.length < 34 || !leHex.startsWith(\"0x\")) {\n    throw new Error(`leHex format error`);\n  }\n\n  const buf = Buffer.from(leHex.slice(2, 34), \"hex\");\n\n  return BI.from(buf.readUInt32LE(0))\n    .shl(0)\n    .add(BI.from(buf.readUInt32LE(4)).shl(32))\n    .add(BI.from(buf.readUInt32LE(8)).shl(64))\n    .add(BI.from(buf.readUInt32LE(12)).shl(96));\n}\n\nfunction assertHexString(debugPath: string, str: string): void {\n  if (!/^0x([0-9a-fA-F][0-9a-fA-F])*$/.test(str)) {\n    throw new Error(`${debugPath} must be a hex string!`);\n  }\n}\n\nfunction assertHexadecimal(debugPath: string, str: string): void {\n  if (!/^0x(0|[0-9a-fA-F]+)$/.test(str)) {\n    throw new Error(`${debugPath} must be a hexadecimal!`);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction isDeepEqual(a: any, b: any): boolean {\n  return isEqual(a, b);\n}\n// Buffer.from('TYPE_ID')\nconst TYPE_ID_CODE_HASH =\n  \"0x00000000000000000000000000000000000000000000000000545950455f4944\";\n\nfunction generateTypeIdArgs(input: Input, outputIndex: HexNumber): HexString {\n  const outPointBuf = blockchain.CellInput.pack(input);\n  const outputIndexBuf = bytes.hexify(number.Uint64LE.pack(outputIndex));\n  const ckbHasher = new CKBHasher();\n  ckbHasher.update(outPointBuf);\n  ckbHasher.update(outputIndexBuf);\n  return ckbHasher.digestHex();\n}\n\nfunction generateTypeIdScript(input: Input, outputIndex = \"0x0\"): Script {\n  blockchain.CellInput.pack(input);\n  assertHexadecimal(\"outputIndex\", outputIndex);\n\n  const args = generateTypeIdArgs(input, outputIndex);\n  return {\n    codeHash: TYPE_ID_CODE_HASH,\n    hashType: \"type\",\n    args,\n  };\n}\n\nfunction toCamel(s: string): string {\n  return s.replace(/([-_][a-z])/gi, ($1) => {\n    return $1.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\");\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCamel(data: any): any {\n  if (Object.prototype.toString.call(data) === \"[object Array]\") {\n    if (data.length === 0) {\n      return data;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return data.map((item: any) => deepCamel(item));\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const result: any = {};\n  if (Object.prototype.toString.call(data) === \"[object Object]\") {\n    for (const key in data) {\n      const value = data[key];\n      if (\n        Object.prototype.toString.call(value) === \"[object Object]\" ||\n        Object.prototype.toString.call(value) === \"[object Array]\"\n      ) {\n        result[toCamel(key)] = deepCamel(value);\n      } else {\n        result[toCamel(key)] = value;\n      }\n    }\n    return result;\n  }\n  return data;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCamelizeDepGroup(data: any): any {\n  if (Object.prototype.toString.call(data) === \"[object Array]\") {\n    if (data.length === 0) {\n      return data;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return data.map((item: any) => deepCamelizeDepGroup(item));\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const result: any = {};\n  if (Object.prototype.toString.call(data) === \"[object Object]\") {\n    for (const key in data) {\n      const value = data[key];\n      if (\n        Object.prototype.toString.call(value) === \"[object Object]\" ||\n        Object.prototype.toString.call(value) === \"[object Array]\"\n      ) {\n        result[key] = deepCamelizeDepGroup(value);\n      } else {\n        result[key] = value === \"dep_group\" ? \"depGroup\" : value;\n      }\n    }\n    return result;\n  }\n  return data;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCamelizeTransaction(data: any): any {\n  return deepCamelizeDepGroup(deepCamel(data));\n}\n\nexport {\n  CKBHasher,\n  ckbHash,\n  deepCamel,\n  deepCamelizeTransaction,\n  toBigUInt64LE,\n  toBigUInt64LECompatible,\n  readBigUInt64LE,\n  readBigUInt64LECompatible,\n  toBigUInt128LE,\n  toBigUInt128LECompatible,\n  readBigUInt128LE,\n  readBigUInt128LECompatible,\n  computeScriptHash,\n  hashCode,\n  assertHexString,\n  assertHexadecimal,\n  isDeepEqual,\n  generateTypeIdScript,\n};\n"],"mappings":"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"}