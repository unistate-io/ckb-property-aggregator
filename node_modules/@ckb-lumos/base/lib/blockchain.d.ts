import { AnyCodec, BytesLike, PackParam, UnpackResult } from "@ckb-lumos/codec";
import { BytesCodec, FixedBytesCodec } from "@ckb-lumos/codec/lib/base";
import type * as api from "./api";
import { BI } from "@ckb-lumos/bi";
type TransactionCodecType = PackParam<typeof BaseTransaction>;
type TransactionUnpackResultType = UnpackResult<typeof BaseTransaction>;
type RawTransactionUnpackResultType = UnpackResult<typeof RawTransaction>;
type HeaderCodecType = PackParam<typeof BaseHeader>;
type HeaderUnpackResultType = UnpackResult<typeof BaseHeader>;
type RawHeaderUnpackResultType = UnpackResult<typeof RawHeader>;
export declare function createFixedHexBytesCodec(byteLength: number): FixedBytesCodec<string, BytesLike>;
/**
 * placeholder codec, generally used as a placeholder
 * ```
 * // for example, when some BytesOpt is not used, it will be filled with this codec
 * // option BytesOpt (Bytes);
 * const UnusedBytesOpt = UnknownOpt
 * ```
 */
export declare const Bytes: BytesCodec<string, BytesLike>;
export declare const BytesOpt: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<BytesCodec<string, BytesLike>>;
export declare const BytesVec: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<BytesCodec<string, BytesLike>>;
export declare const Byte32: FixedBytesCodec<string, BytesLike>;
export declare const Byte32Vec: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<FixedBytesCodec<string, BytesLike>>;
export declare function WitnessArgsOf<LockCodec extends AnyCodec, InputTypeCodec extends AnyCodec, OutputTypeCodec extends AnyCodec>(payload: {
    lock: LockCodec;
    inputType: InputTypeCodec;
    outputType: OutputTypeCodec;
}): BytesCodec<{
    lock?: UnpackResult<LockCodec>;
    inputType?: UnpackResult<InputTypeCodec>;
    outputType?: UnpackResult<OutputTypeCodec>;
}, {
    lock?: PackParam<LockCodec>;
    inputType?: PackParam<InputTypeCodec>;
    outputType?: PackParam<OutputTypeCodec>;
}>;
/**
 *
 * @example
 * ```ts
 * // secp256k1 lock witness
 * WitnessArgs.pack({ lock: '0x' + '00'.repeat(65) })
 * ```
 */
export declare const WitnessArgs: BytesCodec<{
    lock?: string | undefined;
    inputType?: string | undefined;
    outputType?: string | undefined;
}, {
    lock?: BytesLike | undefined;
    inputType?: BytesLike | undefined;
    outputType?: BytesLike | undefined;
}>;
/**
 * <pre>
 *  0b0000000 0
 *    ───┬─── │
 *       │    ▼
 *       │   type - use the default vm version
 *       │
 *       ▼
 * data* - use a particular vm version
 * </pre>
 *
 * Implementation of blockchain.mol
 * https://github.com/nervosnetwork/ckb/blob/5a7efe7a0b720de79ff3761dc6e8424b8d5b22ea/util/types/schemas/blockchain.mol
 */
export declare const HashType: FixedBytesCodec<api.HashType, api.HashType>;
export declare const DepType: FixedBytesCodec<api.DepType, api.DepType>;
export declare const Script: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    codeHash: FixedBytesCodec<string, BytesLike>;
    hashType: FixedBytesCodec<api.HashType, api.HashType>;
    args: BytesCodec<string, BytesLike>;
}>;
export declare const ScriptOpt: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    codeHash: FixedBytesCodec<string, BytesLike>;
    hashType: FixedBytesCodec<api.HashType, api.HashType>;
    args: BytesCodec<string, BytesLike>;
}>>;
export declare const OutPoint: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    txHash: FixedBytesCodec<string, BytesLike>;
    index: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
}> & import("@ckb-lumos/codec/lib/base").Fixed;
export declare const CellInput: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    since: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
    previousOutput: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        txHash: FixedBytesCodec<string, BytesLike>;
        index: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
    }> & import("@ckb-lumos/codec/lib/base").Fixed;
}> & import("@ckb-lumos/codec/lib/base").Fixed;
export declare const CellInputVec: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    since: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
    previousOutput: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        txHash: FixedBytesCodec<string, BytesLike>;
        index: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
    }> & import("@ckb-lumos/codec/lib/base").Fixed;
}> & import("@ckb-lumos/codec/lib/base").Fixed>;
export declare const CellOutput: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    capacity: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
    lock: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        codeHash: FixedBytesCodec<string, BytesLike>;
        hashType: FixedBytesCodec<api.HashType, api.HashType>;
        args: BytesCodec<string, BytesLike>;
    }>;
    type: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        codeHash: FixedBytesCodec<string, BytesLike>;
        hashType: FixedBytesCodec<api.HashType, api.HashType>;
        args: BytesCodec<string, BytesLike>;
    }>>;
}>;
export declare const CellOutputVec: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    capacity: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
    lock: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        codeHash: FixedBytesCodec<string, BytesLike>;
        hashType: FixedBytesCodec<api.HashType, api.HashType>;
        args: BytesCodec<string, BytesLike>;
    }>;
    type: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        codeHash: FixedBytesCodec<string, BytesLike>;
        hashType: FixedBytesCodec<api.HashType, api.HashType>;
        args: BytesCodec<string, BytesLike>;
    }>>;
}>>;
export declare const CellDep: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    outPoint: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        txHash: FixedBytesCodec<string, BytesLike>;
        index: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
    }> & import("@ckb-lumos/codec/lib/base").Fixed;
    depType: FixedBytesCodec<api.DepType, api.DepType>;
}> & import("@ckb-lumos/codec/lib/base").Fixed;
export declare const CellDepVec: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    outPoint: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        txHash: FixedBytesCodec<string, BytesLike>;
        index: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
    }> & import("@ckb-lumos/codec/lib/base").Fixed;
    depType: FixedBytesCodec<api.DepType, api.DepType>;
}> & import("@ckb-lumos/codec/lib/base").Fixed>;
export declare const RawTransaction: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    version: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
    cellDeps: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        outPoint: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
            txHash: FixedBytesCodec<string, BytesLike>;
            index: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
        }> & import("@ckb-lumos/codec/lib/base").Fixed;
        depType: FixedBytesCodec<api.DepType, api.DepType>;
    }> & import("@ckb-lumos/codec/lib/base").Fixed>;
    headerDeps: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<FixedBytesCodec<string, BytesLike>>;
    inputs: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        since: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
        previousOutput: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
            txHash: FixedBytesCodec<string, BytesLike>;
            index: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
        }> & import("@ckb-lumos/codec/lib/base").Fixed;
    }> & import("@ckb-lumos/codec/lib/base").Fixed>;
    outputs: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        capacity: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
        lock: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
            codeHash: FixedBytesCodec<string, BytesLike>;
            hashType: FixedBytesCodec<api.HashType, api.HashType>;
            args: BytesCodec<string, BytesLike>;
        }>;
        type: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
            codeHash: FixedBytesCodec<string, BytesLike>;
            hashType: FixedBytesCodec<api.HashType, api.HashType>;
            args: BytesCodec<string, BytesLike>;
        }>>;
    }>>;
    outputsData: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<BytesCodec<string, BytesLike>>;
}>;
declare const BaseTransaction: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    raw: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        version: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
        cellDeps: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
            outPoint: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
                txHash: FixedBytesCodec<string, BytesLike>;
                index: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
            }> & import("@ckb-lumos/codec/lib/base").Fixed;
            depType: FixedBytesCodec<api.DepType, api.DepType>;
        }> & import("@ckb-lumos/codec/lib/base").Fixed>;
        headerDeps: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<FixedBytesCodec<string, BytesLike>>;
        inputs: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
            since: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
            previousOutput: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
                txHash: FixedBytesCodec<string, BytesLike>;
                index: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
            }> & import("@ckb-lumos/codec/lib/base").Fixed;
        }> & import("@ckb-lumos/codec/lib/base").Fixed>;
        outputs: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
            capacity: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
            lock: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
                codeHash: FixedBytesCodec<string, BytesLike>;
                hashType: FixedBytesCodec<api.HashType, api.HashType>;
                args: BytesCodec<string, BytesLike>;
            }>;
            type: import("@ckb-lumos/codec/lib/molecule/layout").OptionCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
                codeHash: FixedBytesCodec<string, BytesLike>;
                hashType: FixedBytesCodec<api.HashType, api.HashType>;
                args: BytesCodec<string, BytesLike>;
            }>>;
        }>>;
        outputsData: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<BytesCodec<string, BytesLike>>;
    }>;
    witnesses: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<BytesCodec<string, BytesLike>>;
}>;
export declare const Transaction: BytesCodec<Partial<Pick<{
    version: number;
    cellDeps: (Partial<Pick<{
        outPoint: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
        depType: api.DepType;
    }, never>> & Pick<{
        outPoint: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
        depType: api.DepType;
    }, "outPoint" | "depType">)[];
    headerDeps: string[];
    inputs: (Partial<Pick<{
        since: BI;
        previousOutput: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
    }, never>> & Pick<{
        since: BI;
        previousOutput: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
    }, "since" | "previousOutput">)[];
    outputs: (Partial<Pick<{
        capacity: BI;
        lock: Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">;
        type: (Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">) | undefined;
    }, "type">> & Pick<{
        capacity: BI;
        lock: Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">;
        type: (Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">) | undefined;
    }, "capacity" | "lock">)[];
    outputsData: string[];
}, never>> & Pick<{
    version: number;
    cellDeps: (Partial<Pick<{
        outPoint: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
        depType: api.DepType;
    }, never>> & Pick<{
        outPoint: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
        depType: api.DepType;
    }, "outPoint" | "depType">)[];
    headerDeps: string[];
    inputs: (Partial<Pick<{
        since: BI;
        previousOutput: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
    }, never>> & Pick<{
        since: BI;
        previousOutput: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
    }, "since" | "previousOutput">)[];
    outputs: (Partial<Pick<{
        capacity: BI;
        lock: Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">;
        type: (Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">) | undefined;
    }, "type">> & Pick<{
        capacity: BI;
        lock: Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">;
        type: (Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">) | undefined;
    }, "capacity" | "lock">)[];
    outputsData: string[];
}, "version" | "cellDeps" | "headerDeps" | "inputs" | "outputs" | "outputsData"> & {
    witnesses: string[];
}, api.Transaction>;
export declare const TransactionVec: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<BytesCodec<Partial<Pick<{
    version: number;
    cellDeps: (Partial<Pick<{
        outPoint: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
        depType: api.DepType;
    }, never>> & Pick<{
        outPoint: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
        depType: api.DepType;
    }, "outPoint" | "depType">)[];
    headerDeps: string[];
    inputs: (Partial<Pick<{
        since: BI;
        previousOutput: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
    }, never>> & Pick<{
        since: BI;
        previousOutput: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
    }, "since" | "previousOutput">)[];
    outputs: (Partial<Pick<{
        capacity: BI;
        lock: Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">;
        type: (Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">) | undefined;
    }, "type">> & Pick<{
        capacity: BI;
        lock: Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">;
        type: (Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">) | undefined;
    }, "capacity" | "lock">)[];
    outputsData: string[];
}, never>> & Pick<{
    version: number;
    cellDeps: (Partial<Pick<{
        outPoint: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
        depType: api.DepType;
    }, never>> & Pick<{
        outPoint: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
        depType: api.DepType;
    }, "outPoint" | "depType">)[];
    headerDeps: string[];
    inputs: (Partial<Pick<{
        since: BI;
        previousOutput: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
    }, never>> & Pick<{
        since: BI;
        previousOutput: Partial<Pick<{
            txHash: string;
            index: number;
        }, never>> & Pick<{
            txHash: string;
            index: number;
        }, "index" | "txHash">;
    }, "since" | "previousOutput">)[];
    outputs: (Partial<Pick<{
        capacity: BI;
        lock: Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">;
        type: (Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">) | undefined;
    }, "type">> & Pick<{
        capacity: BI;
        lock: Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">;
        type: (Partial<Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, never>> & Pick<{
            codeHash: string;
            hashType: api.HashType;
            args: string;
        }, "codeHash" | "hashType" | "args">) | undefined;
    }, "capacity" | "lock">)[];
    outputsData: string[];
}, "version" | "cellDeps" | "headerDeps" | "inputs" | "outputs" | "outputsData"> & {
    witnesses: string[];
}, api.Transaction>>;
export declare const RawHeader: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    version: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
    compactTarget: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
    timestamp: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
    number: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
    epoch: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
    parentHash: FixedBytesCodec<string, BytesLike>;
    transactionsRoot: FixedBytesCodec<string, BytesLike>;
    proposalsHash: FixedBytesCodec<string, BytesLike>;
    extraHash: FixedBytesCodec<string, BytesLike>;
    dao: FixedBytesCodec<string, BytesLike>;
}> & import("@ckb-lumos/codec/lib/base").Fixed;
export declare const BaseHeader: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    raw: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        version: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
        compactTarget: FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>;
        timestamp: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
        number: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
        epoch: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
        parentHash: FixedBytesCodec<string, BytesLike>;
        transactionsRoot: FixedBytesCodec<string, BytesLike>;
        proposalsHash: FixedBytesCodec<string, BytesLike>;
        extraHash: FixedBytesCodec<string, BytesLike>;
        dao: FixedBytesCodec<string, BytesLike>;
    }> & import("@ckb-lumos/codec/lib/base").Fixed;
    nonce: FixedBytesCodec<BI, import("@ckb-lumos/bi").BIish>;
}> & import("@ckb-lumos/codec/lib/base").Fixed;
export declare const Header: BytesCodec<Partial<Pick<{
    version: number;
    compactTarget: number;
    timestamp: BI;
    number: BI;
    epoch: BI;
    parentHash: string;
    transactionsRoot: string;
    proposalsHash: string;
    extraHash: string;
    dao: string;
}, never>> & Pick<{
    version: number;
    compactTarget: number;
    timestamp: BI;
    number: BI;
    epoch: BI;
    parentHash: string;
    transactionsRoot: string;
    proposalsHash: string;
    extraHash: string;
    dao: string;
}, "number" | "version" | "compactTarget" | "timestamp" | "epoch" | "parentHash" | "transactionsRoot" | "proposalsHash" | "extraHash" | "dao"> & {
    nonce: BI;
    hash: string;
}, api.Header>;
export declare const ProposalShortId: FixedBytesCodec<string, BytesLike>;
export declare const ProposalShortIdVec: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<FixedBytesCodec<string, BytesLike>>;
export declare const UncleBlock: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    header: BytesCodec<Partial<Pick<{
        version: number;
        compactTarget: number;
        timestamp: BI;
        number: BI;
        epoch: BI;
        parentHash: string;
        transactionsRoot: string;
        proposalsHash: string;
        extraHash: string;
        dao: string;
    }, never>> & Pick<{
        version: number;
        compactTarget: number;
        timestamp: BI;
        number: BI;
        epoch: BI;
        parentHash: string;
        transactionsRoot: string;
        proposalsHash: string;
        extraHash: string;
        dao: string;
    }, "number" | "version" | "compactTarget" | "timestamp" | "epoch" | "parentHash" | "transactionsRoot" | "proposalsHash" | "extraHash" | "dao"> & {
        nonce: BI;
        hash: string;
    }, api.Header>;
    proposals: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<FixedBytesCodec<string, BytesLike>>;
}>;
export declare const UncleBlockVec: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    header: BytesCodec<Partial<Pick<{
        version: number;
        compactTarget: number;
        timestamp: BI;
        number: BI;
        epoch: BI;
        parentHash: string;
        transactionsRoot: string;
        proposalsHash: string;
        extraHash: string;
        dao: string;
    }, never>> & Pick<{
        version: number;
        compactTarget: number;
        timestamp: BI;
        number: BI;
        epoch: BI;
        parentHash: string;
        transactionsRoot: string;
        proposalsHash: string;
        extraHash: string;
        dao: string;
    }, "number" | "version" | "compactTarget" | "timestamp" | "epoch" | "parentHash" | "transactionsRoot" | "proposalsHash" | "extraHash" | "dao"> & {
        nonce: BI;
        hash: string;
    }, api.Header>;
    proposals: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<FixedBytesCodec<string, BytesLike>>;
}>>;
export declare const Block: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    header: BytesCodec<Partial<Pick<{
        version: number;
        compactTarget: number;
        timestamp: BI;
        number: BI;
        epoch: BI;
        parentHash: string;
        transactionsRoot: string;
        proposalsHash: string;
        extraHash: string;
        dao: string;
    }, never>> & Pick<{
        version: number;
        compactTarget: number;
        timestamp: BI;
        number: BI;
        epoch: BI;
        parentHash: string;
        transactionsRoot: string;
        proposalsHash: string;
        extraHash: string;
        dao: string;
    }, "number" | "version" | "compactTarget" | "timestamp" | "epoch" | "parentHash" | "transactionsRoot" | "proposalsHash" | "extraHash" | "dao"> & {
        nonce: BI;
        hash: string;
    }, api.Header>;
    uncles: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        header: BytesCodec<Partial<Pick<{
            version: number;
            compactTarget: number;
            timestamp: BI;
            number: BI;
            epoch: BI;
            parentHash: string;
            transactionsRoot: string;
            proposalsHash: string;
            extraHash: string;
            dao: string;
        }, never>> & Pick<{
            version: number;
            compactTarget: number;
            timestamp: BI;
            number: BI;
            epoch: BI;
            parentHash: string;
            transactionsRoot: string;
            proposalsHash: string;
            extraHash: string;
            dao: string;
        }, "number" | "version" | "compactTarget" | "timestamp" | "epoch" | "parentHash" | "transactionsRoot" | "proposalsHash" | "extraHash" | "dao"> & {
            nonce: BI;
            hash: string;
        }, api.Header>;
        proposals: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<FixedBytesCodec<string, BytesLike>>;
    }>>;
    transactions: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<BytesCodec<Partial<Pick<{
        version: number;
        cellDeps: (Partial<Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
            depType: api.DepType;
        }, never>> & Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
            depType: api.DepType;
        }, "outPoint" | "depType">)[];
        headerDeps: string[];
        inputs: (Partial<Pick<{
            since: BI;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
        }, never>> & Pick<{
            since: BI;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
        }, "since" | "previousOutput">)[];
        outputs: (Partial<Pick<{
            capacity: BI;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">) | undefined;
        }, "type">> & Pick<{
            capacity: BI;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">) | undefined;
        }, "capacity" | "lock">)[];
        outputsData: string[];
    }, never>> & Pick<{
        version: number;
        cellDeps: (Partial<Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
            depType: api.DepType;
        }, never>> & Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
            depType: api.DepType;
        }, "outPoint" | "depType">)[];
        headerDeps: string[];
        inputs: (Partial<Pick<{
            since: BI;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
        }, never>> & Pick<{
            since: BI;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
        }, "since" | "previousOutput">)[];
        outputs: (Partial<Pick<{
            capacity: BI;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">) | undefined;
        }, "type">> & Pick<{
            capacity: BI;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">) | undefined;
        }, "capacity" | "lock">)[];
        outputsData: string[];
    }, "version" | "cellDeps" | "headerDeps" | "inputs" | "outputs" | "outputsData"> & {
        witnesses: string[];
    }, api.Transaction>>;
    proposals: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<FixedBytesCodec<string, BytesLike>>;
}>;
export declare const BlockV1: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    header: BytesCodec<Partial<Pick<{
        version: number;
        compactTarget: number;
        timestamp: BI;
        number: BI;
        epoch: BI;
        parentHash: string;
        transactionsRoot: string;
        proposalsHash: string;
        extraHash: string;
        dao: string;
    }, never>> & Pick<{
        version: number;
        compactTarget: number;
        timestamp: BI;
        number: BI;
        epoch: BI;
        parentHash: string;
        transactionsRoot: string;
        proposalsHash: string;
        extraHash: string;
        dao: string;
    }, "number" | "version" | "compactTarget" | "timestamp" | "epoch" | "parentHash" | "transactionsRoot" | "proposalsHash" | "extraHash" | "dao"> & {
        nonce: BI;
        hash: string;
    }, api.Header>;
    uncles: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        header: BytesCodec<Partial<Pick<{
            version: number;
            compactTarget: number;
            timestamp: BI;
            number: BI;
            epoch: BI;
            parentHash: string;
            transactionsRoot: string;
            proposalsHash: string;
            extraHash: string;
            dao: string;
        }, never>> & Pick<{
            version: number;
            compactTarget: number;
            timestamp: BI;
            number: BI;
            epoch: BI;
            parentHash: string;
            transactionsRoot: string;
            proposalsHash: string;
            extraHash: string;
            dao: string;
        }, "number" | "version" | "compactTarget" | "timestamp" | "epoch" | "parentHash" | "transactionsRoot" | "proposalsHash" | "extraHash" | "dao"> & {
            nonce: BI;
            hash: string;
        }, api.Header>;
        proposals: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<FixedBytesCodec<string, BytesLike>>;
    }>>;
    transactions: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<BytesCodec<Partial<Pick<{
        version: number;
        cellDeps: (Partial<Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
            depType: api.DepType;
        }, never>> & Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
            depType: api.DepType;
        }, "outPoint" | "depType">)[];
        headerDeps: string[];
        inputs: (Partial<Pick<{
            since: BI;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
        }, never>> & Pick<{
            since: BI;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
        }, "since" | "previousOutput">)[];
        outputs: (Partial<Pick<{
            capacity: BI;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">) | undefined;
        }, "type">> & Pick<{
            capacity: BI;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">) | undefined;
        }, "capacity" | "lock">)[];
        outputsData: string[];
    }, never>> & Pick<{
        version: number;
        cellDeps: (Partial<Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
            depType: api.DepType;
        }, never>> & Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
            depType: api.DepType;
        }, "outPoint" | "depType">)[];
        headerDeps: string[];
        inputs: (Partial<Pick<{
            since: BI;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
        }, never>> & Pick<{
            since: BI;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: number;
            }, never>> & Pick<{
                txHash: string;
                index: number;
            }, "index" | "txHash">;
        }, "since" | "previousOutput">)[];
        outputs: (Partial<Pick<{
            capacity: BI;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">) | undefined;
        }, "type">> & Pick<{
            capacity: BI;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: api.HashType;
                args: string;
            }, "codeHash" | "hashType" | "args">) | undefined;
        }, "capacity" | "lock">)[];
        outputsData: string[];
    }, "version" | "cellDeps" | "headerDeps" | "inputs" | "outputs" | "outputsData"> & {
        witnesses: string[];
    }, api.Transaction>>;
    proposals: import("@ckb-lumos/codec/lib/molecule/layout").ArrayCodec<FixedBytesCodec<string, BytesLike>>;
    extension: BytesCodec<string, BytesLike>;
}>;
export declare const CellbaseWitness: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
    lock: import("@ckb-lumos/codec/lib/molecule/layout").ObjectCodec<{
        codeHash: FixedBytesCodec<string, BytesLike>;
        hashType: FixedBytesCodec<api.HashType, api.HashType>;
        args: BytesCodec<string, BytesLike>;
    }>;
    message: BytesCodec<string, BytesLike>;
}>;
/**
 * from Transantion defined in  @ckb-lumos/base/lib/api.d.ts
 * ```
 * export interface Transaction {
 *  cellDeps: CellDep[];
 *  hash?: Hash;
 *  headerDeps: Hash[];
 *  inputs: Input[];
 *  outputs: Output[];
 *  outputsData: HexString[];
 *  version: HexNumber;
 *  witnesses: HexString[];
 *}
 * to :
 * interface TransactionCodecType {
 *   raw: {
 *     version: Uint32LE;
 *     cellDeps: DeCellDepVec;
 *     headerDeps: Byte32Vec;
 *     inputs: CellInputVec;
 *     outputs: CellOutputVec;
 *     outputsData: BytesVec;
 *   };
 *   witnesses: BytesVec;
 * }
 * ```
 * @param data Transantion defined in @ckb-lumos/base/lib/api.d.ts
 * @returns TransactionCodecType
 */
export declare function transformTransactionCodecType(data: api.Transaction): TransactionCodecType;
export declare function deTransformTransactionCodecType(data: TransactionUnpackResultType): RawTransactionUnpackResultType & {
    witnesses: string[];
};
export declare function transformHeaderCodecType(data: api.Header): HeaderCodecType;
export declare function deTransformHeaderCodecType(data: HeaderUnpackResultType): RawHeaderUnpackResultType & {
    nonce: BI;
    hash: string;
};
export {};
//# sourceMappingURL=blockchain.d.ts.map