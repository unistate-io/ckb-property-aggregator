{"version":3,"file":"validators.js","names":["assertObject","debugPath","object","Object","Error","assertObjectWithKeys","expectedKeys","optionalKeys","providedKeys","keys","sort","requiredLength","length","maximalLength","errorMessage","join","optionalProvidedKeys","filter","key","includes","find","assertHexString","string","test","assertHash","hash","assertInteger","i","ValidateScript","script","nestedValidation","codeHash","args","hashType","ValidateOutPoint","outPoint","txHash","index","ValidateCellInput","cellInput","since","previousOutput","ValidateCellOutput","cellOutput","capacity","lock","type","ValidateCellDep","cellDep","depType","assertArray","array","validateFunction","Array","isArray","toAssert","value","assertCommonTransaction","rawTransaction","version","cellDeps","headerDeps","inputs","outputs","outputsData","ValidateRawTransaction","ValidateTransaction","transaction","witnesses","assertCommonHeader","rawHeader","compactTarget","timestamp","number","epoch","parentHash","transactionsRoot","proposalsHash","extraHash","dao","ValidateRawHeader","ValidateHeader","header","nonce","assertProposalShortId","shortId","ValidateUncleBlock","uncleBlock","proposals","ValidateBlock","block","uncles","transactions","ValidateCellbaseWitness","cellbaseWitness","message","ValidateWitnessArgs","witnessArgs","inputType","outputType"],"sources":["../src/validators.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n// This package provides validator functions that check JSON objects are\n// following the correct format, so we can submit them to CKB via RPC\n// directly\n\nfunction assertObject(debugPath, object) {\n  if (!(object instanceof Object)) {\n    throw new Error(`${debugPath} is not an object!`);\n  }\n}\n\nfunction assertObjectWithKeys(\n  debugPath,\n  object,\n  expectedKeys,\n  optionalKeys = []\n) {\n  assertObject(debugPath, object);\n  const providedKeys = Object.keys(object).sort();\n  const requiredLength = expectedKeys.length;\n  const maximalLength = expectedKeys.length + optionalKeys.length;\n  const errorMessage = `${debugPath} does not have correct keys! Required keys: [${expectedKeys\n    .sort()\n    .join(\", \")}], optional keys: [${optionalKeys\n    .sort()\n    .join(\", \")}], actual keys: [${providedKeys.join(\", \")}]`;\n  if (\n    providedKeys.length < requiredLength ||\n    providedKeys.length > maximalLength\n  ) {\n    throw new Error(errorMessage);\n  }\n  let optionalProvidedKeys = providedKeys.filter(\n    (key) => !expectedKeys.includes(key)\n  );\n  if (providedKeys.length - optionalProvidedKeys.length !== requiredLength) {\n    throw new Error(errorMessage);\n  }\n  if (optionalProvidedKeys.find((key) => !optionalKeys.includes(key))) {\n    throw new Error(errorMessage);\n  }\n}\n\nfunction assertHexString(debugPath, string) {\n  if (!/^0x([0-9a-fA-F][0-9a-fA-F])*$/.test(string)) {\n    throw new Error(`${debugPath} must be a hex string!`);\n  }\n}\n\nfunction assertHash(debugPath, hash) {\n  assertHexString(debugPath, hash);\n  if (hash.length !== 66) {\n    throw new Error(`${debugPath} must be a hex string of 66 bytes long!`);\n  }\n}\n\nfunction assertInteger(debugPath, i) {\n  if (i === \"0x0\") {\n    return;\n  }\n  if (!/^0x[1-9a-fA-F][0-9a-fA-F]*$/.test(i)) {\n    throw new Error(`${debugPath} must be a hex integer!`);\n  }\n}\n\nexport function ValidateScript(\n  script,\n  { nestedValidation = true, debugPath = \"script\" } = {}\n) {\n  assertObjectWithKeys(debugPath, script, [\"codeHash\", \"hashType\", \"args\"], []);\n  assertHash(`${debugPath}.codeHash`, script.codeHash);\n  assertHexString(`${debugPath}.args`, script.args);\n\n  if (\n    script.hashType !== \"data\" &&\n    script.hashType !== \"type\" &&\n    script.hashType !== \"data1\" &&\n    script.hashType !== \"data2\"\n  ) {\n    throw new Error(`${debugPath}.hashType must be either data or type!`);\n  }\n}\n\nexport function ValidateOutPoint(\n  outPoint,\n  { nestedValidation = true, debugPath = \"outPoint\" } = {}\n) {\n  assertObjectWithKeys(debugPath, outPoint, [\"txHash\", \"index\"], []);\n  assertHash(`${debugPath}.txHash`, outPoint.txHash);\n  assertInteger(`${debugPath}.index`, outPoint.index);\n}\n\nexport function ValidateCellInput(\n  cellInput,\n  { nestedValidation = true, debugPath = \"cellInput\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellInput, [\"since\", \"previousOutput\"], []);\n  assertInteger(`${debugPath}.since`, cellInput.since);\n\n  if (nestedValidation) {\n    ValidateOutPoint(cellInput.previousOutput, {\n      debugPath: `${debugPath}.previousOutput`,\n    });\n  }\n}\n\nexport function ValidateCellOutput(\n  cellOutput,\n  { nestedValidation = true, debugPath = \"cellOutput\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellOutput, [\"capacity\", \"lock\"], [\"type\"]);\n  assertInteger(`${debugPath}.capacity`, cellOutput.capacity);\n\n  if (nestedValidation) {\n    ValidateScript(cellOutput.lock, {\n      debugPath: `${debugPath}.lock`,\n    });\n    if (cellOutput.type) {\n      ValidateScript(cellOutput.type, {\n        debugPath: `${debugPath}.type`,\n      });\n    }\n  }\n}\n\nexport function ValidateCellDep(\n  cellDep,\n  { nestedValidation = true, debugPath = \"cellDep\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellDep, [\"outPoint\", \"depType\"], []);\n  if (cellDep.depType !== \"code\" && cellDep.depType !== \"depGroup\") {\n    throw new Error(`${debugPath}.depType must be either code or depGroup!`);\n  }\n\n  if (nestedValidation) {\n    ValidateOutPoint(cellDep.outPoint, {\n      debugPath: `${debugPath}.outPoint`,\n    });\n  }\n}\n\nfunction assertArray(debugPath, array, validateFunction, nestedValidation) {\n  if (!Array.isArray(array)) {\n    throw new Error(`${debugPath} is not an array!`);\n  }\n  if (nestedValidation) {\n    for (let i = 0; i < array.length; i++) {\n      validateFunction(`${debugPath}[${i}]`, array[i]);\n    }\n  }\n}\n\nfunction toAssert(validateFunction, nestedValidation) {\n  return function (debugPath, value) {\n    validateFunction(value, {\n      nestedValidation: nestedValidation,\n      debugPath: debugPath,\n    });\n  };\n}\n\nfunction assertCommonTransaction(debugPath, rawTransaction, nestedValidation) {\n  assertInteger(`${debugPath}.version`, rawTransaction.version);\n  assertArray(\n    `${debugPath}.cellDeps`,\n    rawTransaction.cellDeps,\n    toAssert(ValidateCellDep, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.headerDeps`,\n    rawTransaction.headerDeps,\n    assertHash,\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.inputs`,\n    rawTransaction.inputs,\n    toAssert(ValidateCellInput, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.outputs`,\n    rawTransaction.outputs,\n    toAssert(ValidateCellOutput, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.outputsData`,\n    rawTransaction.outputsData,\n    assertHexString,\n    nestedValidation\n  );\n}\n\nexport function ValidateRawTransaction(\n  rawTransaction,\n  { nestedValidation = true, debugPath = \"rawTransaction\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    rawTransaction,\n    [\"version\", \"cellDeps\", \"headerDeps\", \"inputs\", \"outputs\", \"outputsData\"],\n    []\n  );\n  assertCommonTransaction(debugPath, rawTransaction, nestedValidation);\n}\n\nexport function ValidateTransaction(\n  transaction,\n  { nestedValidation = true, debugPath = \"transaction\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    transaction,\n    [\n      \"version\",\n      \"cellDeps\",\n      \"headerDeps\",\n      \"inputs\",\n      \"outputs\",\n      \"outputsData\",\n      \"witnesses\",\n    ],\n    []\n  );\n  assertCommonTransaction(debugPath, transaction, nestedValidation);\n  assertArray(\n    `${debugPath}.witnesses`,\n    transaction.witnesses,\n    assertHexString,\n    nestedValidation\n  );\n}\n\nfunction assertCommonHeader(debugPath, rawHeader) {\n  assertInteger(`${debugPath}.version`, rawHeader.version);\n  assertInteger(`${debugPath}.compactTarget`, rawHeader.compactTarget);\n  assertInteger(`${debugPath}.timestamp`, rawHeader.timestamp);\n  assertInteger(`${debugPath}.number`, rawHeader.number);\n  assertInteger(`${debugPath}.epoch`, rawHeader.epoch);\n  assertHash(`${debugPath}.parentHash`, rawHeader.parentHash);\n  assertHash(`${debugPath}.transactionsRoot`, rawHeader.transactionsRoot);\n  assertHash(`${debugPath}.proposalsHash`, rawHeader.proposalsHash);\n  assertHash(`${debugPath}.extraHash`, rawHeader.extraHash);\n  assertHash(`${debugPath}.dao`, rawHeader.dao);\n}\n\nexport function ValidateRawHeader(\n  rawHeader,\n  { nestedValidation = true, debugPath = \"rawHeader\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    rawHeader,\n    [\n      \"version\",\n      \"compactTarget\",\n      \"timestamp\",\n      \"number\",\n      \"epoch\",\n      \"parentHash\",\n      \"transactionsRoot\",\n      \"proposalsHash\",\n      \"extraHash\",\n      \"dao\",\n    ],\n    []\n  );\n  assertCommonHeader(debugPath, rawHeader);\n}\n\nexport function ValidateHeader(\n  header,\n  { nestedValidation = true, debugPath = \"header\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    header,\n    [\n      \"version\",\n      \"compactTarget\",\n      \"timestamp\",\n      \"number\",\n      \"epoch\",\n      \"parentHash\",\n      \"transactionsRoot\",\n      \"proposalsHash\",\n      \"extraHash\",\n      \"dao\",\n      \"nonce\",\n    ],\n    []\n  );\n  assertHexString(`${debugPath}.nonce`, header.nonce);\n  if (header.nonce.length !== 34) {\n    throw new Error(\n      `${debugPath}.nonce must be a hex string of 34 bytes long!`\n    );\n  }\n}\n\nfunction assertProposalShortId(debugPath, shortId) {\n  assertHexString(debugPath, shortId);\n  if (shortId.length !== 22) {\n    throw new Error(`${debugPath} must be a hex string of 22 bytes long!`);\n  }\n}\n\nexport function ValidateUncleBlock(\n  uncleBlock,\n  { nestedValidation = true, debugPath = \"uncleBlock\" } = {}\n) {\n  assertObjectWithKeys(debugPath, uncleBlock, [\"header\", \"proposals\"], []);\n\n  if (nestedValidation) {\n    ValidateHeader(uncleBlock.header, {\n      debugPath: `${debugPath}.header`,\n    });\n  }\n  assertArray(\n    `${debugPath}.proposals`,\n    uncleBlock.proposals,\n    assertProposalShortId,\n    nestedValidation\n  );\n}\n\nexport function ValidateBlock(\n  block,\n  { nestedValidation = true, debugPath = \"block\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    block,\n    [\"header\", \"uncles\", \"transactions\", \"proposals\"],\n    []\n  );\n\n  if (nestedValidation) {\n    ValidateHeader(block.header, {\n      debugPath: `${debugPath}.header`,\n    });\n  }\n  assertArray(\n    `${debugPath}.uncles`,\n    block.uncles,\n    toAssert(ValidateUncleBlock, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.transactions`,\n    block.transactions,\n    toAssert(ValidateTransaction, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.proposals`,\n    block.proposals,\n    assertProposalShortId,\n    nestedValidation\n  );\n}\n\nexport function ValidateCellbaseWitness(\n  cellbaseWitness,\n  { nestedValidation = true, debugPath = \"cellbaseWitness\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellbaseWitness, [\"lock\", \"message\"], []);\n  assertHexString(`${debugPath}.message`, cellbaseWitness.message);\n\n  if (nestedValidation) {\n    ValidateScript(cellbaseWitness.lock, {\n      debugPath: `${debugPath}.lock`,\n    });\n  }\n}\n\nexport function ValidateWitnessArgs(\n  witnessArgs,\n  { nestedValidation = true, debugPath = \"witnessArgs\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    witnessArgs,\n    [],\n    [\"lock\", \"inputType\", \"outputType\"]\n  );\n\n  if (witnessArgs.lock) {\n    assertHexString(`${debugPath}.lock`, witnessArgs.lock);\n  }\n  if (witnessArgs.inputType) {\n    assertHexString(`${debugPath}.inputType`, witnessArgs.inputType);\n  }\n  if (witnessArgs.outputType) {\n    assertHexString(`${debugPath}.outputType`, witnessArgs.outputType);\n  }\n}\n"],"mappings":"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"}