{"version":3,"file":"collector.js","names":["_base","require","_toolkit","_services","_crossFetch","_interopRequireDefault","_ckbIndexerFilter","obj","__esModule","default","CKBCellCollector","constructor","terminableCellFetcher","queries","otherQueryOptions","defaultQuery","lock","undefined","type","argsLen","data","fromBlock","toBlock","order","skip","outputDataLenRange","outputCapacityRange","bufferSize","Array","isArray","map","query","forEach","validateQueryOption","convertQueryOptionToSearchKey","Error","instanceOfScriptWrapper","validators","ValidateScript","script","utils","assertHexadecimal","scriptLenRange","dataLen","getHexStringBytes","unwrapDataWrapper","Number","queryLock","dataLenRange","toString","getLiveCell","lastCursor","searchKeyFilter","sizeLimit","result","getCells","generateSearchKey","count","counter","_cell","collect","request","rpcUrl","res","fetch","method","body","JSON","stringify","headers","status","json","error","getLiveCellWithBlockHash","objects","length","requestData","cell","index","id","jsonrpc","params","blockNumber","blockHashList","ckbRpcUrl","item","rpcResponse","find","responseItem","blockHash","visitedCellKey","Set","collectBySingleQuery","_cell$outPoint","_cell$outPoint2","key","outPoint","txHash","has","add","withBlockHash","getCellWithCursor","cells","filterByLumosQueryOptions","buffer","skippedCount","exports"],"sources":["../src/collector.ts"],"sourcesContent":["import { utils, Cell, BaseCellCollector } from \"@ckb-lumos/base\";\nimport { validators } from \"@ckb-lumos/toolkit\";\nimport {\n  SearchKeyFilter,\n  CKBIndexerQueryOptions,\n  GetCellsResults,\n  Order,\n  OtherQueryOptions,\n  TerminableCellFetcher,\n} from \"./type\";\nimport { generateSearchKey, getHexStringBytes } from \"./services\";\nimport fetch from \"cross-fetch\";\nimport {\n  filterByLumosQueryOptions,\n  instanceOfScriptWrapper,\n  unwrapDataWrapper,\n} from \"./ckbIndexerFilter\";\n\ninterface GetBlockHashRPCResult {\n  jsonrpc: string;\n  id: number;\n  result: string;\n}\n\n/** CellCollector will not get cell with blockHash by default, please use OtherQueryOptions.withBlockHash and OtherQueryOptions.CKBRpcUrl to get blockHash if you need. */\nexport class CKBCellCollector implements BaseCellCollector {\n  public queries: CKBIndexerQueryOptions[];\n  constructor(\n    public terminableCellFetcher: TerminableCellFetcher,\n    queries: CKBIndexerQueryOptions | CKBIndexerQueryOptions[],\n    public otherQueryOptions?: OtherQueryOptions\n  ) {\n    const defaultQuery: CKBIndexerQueryOptions = {\n      lock: undefined,\n      type: undefined,\n      argsLen: -1,\n      data: \"any\",\n      fromBlock: undefined,\n      toBlock: undefined,\n      order: \"asc\",\n      skip: undefined,\n      outputDataLenRange: undefined,\n      outputCapacityRange: undefined,\n      bufferSize: undefined,\n    };\n    this.queries = (Array.isArray(queries) ? queries : [queries]).map(\n      (query) => ({ ...defaultQuery, ...query })\n    );\n\n    this.queries.forEach((query) => {\n      this.validateQueryOption(query);\n    });\n    this.convertQueryOptionToSearchKey();\n  }\n\n  public validateQueryOption(queries: CKBIndexerQueryOptions): void {\n    if (!queries.lock && (!queries.type || queries.type === \"empty\")) {\n      throw new Error(\"Either lock or type script must be provided!\");\n    }\n\n    if (queries.lock) {\n      if (!instanceOfScriptWrapper(queries.lock)) {\n        validators.ValidateScript(queries.lock);\n      } else if (instanceOfScriptWrapper(queries.lock)) {\n        validators.ValidateScript(queries.lock.script);\n      }\n    }\n\n    if (queries.type && queries.type !== \"empty\") {\n      if (\n        typeof queries.type === \"object\" &&\n        !instanceOfScriptWrapper(queries.type)\n      ) {\n        validators.ValidateScript(queries.type);\n      } else if (\n        typeof queries.type === \"object\" &&\n        instanceOfScriptWrapper(queries.type)\n      ) {\n        validators.ValidateScript(queries.type.script);\n      }\n    }\n\n    if (queries.fromBlock) {\n      utils.assertHexadecimal(\"fromBlock\", queries.fromBlock);\n    }\n    if (queries.toBlock) {\n      utils.assertHexadecimal(\"toBlock\", queries.toBlock);\n    }\n    if (queries.order !== \"asc\" && queries.order !== \"desc\") {\n      throw new Error(\"Order must be either asc or desc!\");\n    }\n    if (queries.outputCapacityRange) {\n      utils.assertHexadecimal(\n        \"outputCapacityRange[0]\",\n        queries.outputCapacityRange[0]\n      );\n      utils.assertHexadecimal(\n        \"outputCapacityRange[1]\",\n        queries.outputCapacityRange[1]\n      );\n    }\n\n    if (queries.outputDataLenRange) {\n      utils.assertHexadecimal(\n        \"outputDataLenRange[0]\",\n        queries.outputDataLenRange[0]\n      );\n      utils.assertHexadecimal(\n        \"outputDataLenRange[1]\",\n        queries.outputDataLenRange[1]\n      );\n    }\n    if (queries.scriptLenRange) {\n      utils.assertHexadecimal(\"scriptLenRange[0]\", queries.scriptLenRange[0]);\n      utils.assertHexadecimal(\"scriptLenRange[1]\", queries.scriptLenRange[1]);\n    }\n\n    if (queries.outputDataLenRange && queries.data && queries.data !== \"any\") {\n      const dataLen = getHexStringBytes(unwrapDataWrapper(queries.data));\n      if (\n        dataLen < Number(queries.outputDataLenRange[0]) ||\n        dataLen >= Number(queries.outputDataLenRange[1])\n      ) {\n        throw new Error(\"data length not match outputDataLenRange\");\n      }\n    }\n\n    if (queries.skip && typeof queries.skip !== \"number\") {\n      throw new Error(\"skip must be a number!\");\n    }\n\n    if (queries.bufferSize && typeof queries.bufferSize !== \"number\") {\n      throw new Error(\"bufferSize must be a number!\");\n    }\n  }\n\n  public convertQueryOptionToSearchKey(): void {\n    this.queries.forEach((query) => {\n      const queryLock = query.lock;\n      // unWrap `ScriptWrapper` into `Script`.\n      if (queryLock) {\n        if (instanceOfScriptWrapper(queryLock)) {\n          validators.ValidateScript(queryLock.script);\n          query.lock = queryLock.script;\n        }\n      }\n\n      // unWrap `ScriptWrapper` into `Script`.\n      if (query.type && query.type !== \"empty\") {\n        if (\n          typeof query.type === \"object\" &&\n          instanceOfScriptWrapper(query.type)\n        ) {\n          validators.ValidateScript(query.type.script);\n          query.type = query.type.script;\n        }\n      }\n\n      if (!query.outputDataLenRange) {\n        if (query.data && query.data !== \"any\") {\n          const dataLenRange = getHexStringBytes(unwrapDataWrapper(query.data));\n          query.outputDataLenRange = [\n            \"0x\" + dataLenRange.toString(16),\n            \"0x\" + (dataLenRange + 1).toString(16),\n          ];\n        }\n      }\n\n      if (!query.scriptLenRange && query.type === \"empty\") {\n        query.scriptLenRange = [\"0x0\", \"0x1\"];\n      }\n    });\n  }\n\n  private async getLiveCell(\n    query: CKBIndexerQueryOptions,\n    lastCursor?: string\n  ): Promise<GetCellsResults> {\n    const searchKeyFilter: SearchKeyFilter = {\n      sizeLimit: query.bufferSize,\n      order: query.order as Order,\n      lastCursor,\n    };\n    const result = await this.terminableCellFetcher.getCells(\n      generateSearchKey(query),\n      undefined,\n      searchKeyFilter\n    );\n    return result;\n  }\n\n  async count(): Promise<number> {\n    let counter = 0;\n\n    for await (const _cell of this.collect()) {\n      counter++;\n    }\n    return counter;\n  }\n\n  // eslint-disable-next-line\n  private async request(rpcUrl: string, data: unknown): Promise<any> {\n    const res: Response = await fetch(rpcUrl, {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if (res.status !== 200) {\n      throw new Error(`indexer request failed with HTTP code ${res.status}`);\n    }\n    const result = await res.json();\n    if (result.error !== undefined) {\n      throw new Error(\n        `indexer request rpc failed with error: ${JSON.stringify(result.error)}`\n      );\n    }\n    return result;\n  }\n\n  private async getLiveCellWithBlockHash(\n    query: CKBIndexerQueryOptions,\n    lastCursor?: string\n  ) {\n    if (!this.otherQueryOptions) {\n      throw new Error(\"CKB Rpc URL must provide\");\n    }\n    const result: GetCellsResults = await this.getLiveCell(query, lastCursor);\n    if (result.objects.length === 0) {\n      return result;\n    }\n    const requestData = result.objects.map((cell, index) => {\n      return {\n        id: index,\n        jsonrpc: \"2.0\",\n        method: \"get_block_hash\",\n        params: [cell.blockNumber],\n      };\n    });\n    const blockHashList: GetBlockHashRPCResult[] = await this.request(\n      this.otherQueryOptions.ckbRpcUrl,\n      requestData\n    );\n    result.objects = result.objects.map((item, index) => {\n      const rpcResponse = blockHashList.find(\n        (responseItem: GetBlockHashRPCResult) => responseItem.id === index\n      );\n      const blockHash = rpcResponse && rpcResponse.result;\n      return { ...item, blockHash };\n    });\n    return result;\n  }\n\n  /**\n   * collect cells without blockHash by default.if you need blockHash, please add OtherQueryOptions.withBlockHash and OtherQueryOptions.ckbRpcUrl when constructor CellCollect.\n   * don't use OtherQueryOption if you don't need blockHash,cause it will slowly your collect.\n   */\n  async *collect(): AsyncGenerator<Cell> {\n    const visitedCellKey = new Set<string>();\n\n    for (const query of this.queries) {\n      for await (const cell of this.collectBySingleQuery(query)) {\n        const key = `${cell.outPoint?.txHash}-${cell.outPoint?.index}`;\n        if (visitedCellKey.has(key)) {\n          continue;\n        } else {\n          visitedCellKey.add(key);\n          yield cell;\n        }\n      }\n    }\n  }\n\n  private async *collectBySingleQuery(\n    query: CKBIndexerQueryOptions\n  ): AsyncGenerator<Cell> {\n    //TODO: fix return type\n    const withBlockHash =\n      this.otherQueryOptions &&\n      \"withBlockHash\" in this.otherQueryOptions &&\n      this.otherQueryOptions.withBlockHash;\n    let lastCursor: undefined | string = undefined;\n    const getCellWithCursor = async (): Promise<Cell[]> => {\n      const result: GetCellsResults = await (withBlockHash\n        ? this.getLiveCellWithBlockHash(query, lastCursor)\n        : this.getLiveCell(query, lastCursor));\n      lastCursor = result.lastCursor;\n      return result.objects;\n    };\n    let cells: Cell[] = await getCellWithCursor();\n    // filter cells by lumos query options\n    cells = filterByLumosQueryOptions(cells, query);\n\n    if (cells.length === 0) {\n      return;\n    }\n\n    let buffer: Promise<Cell[]> = getCellWithCursor();\n    let index = 0;\n    let skippedCount = 0;\n    while (true) {\n      if (query.skip && skippedCount < query.skip) {\n        skippedCount++;\n      } else {\n        yield cells[index];\n      }\n      index++;\n      //reset index and exchange `cells` and `buffer` after yield last cell\n      if (index === cells.length) {\n        index = 0;\n        cells = await buffer;\n        // break if can not get more cells\n        if (cells.length === 0) {\n          break;\n        }\n        buffer = getCellWithCursor();\n      }\n    }\n  }\n}\n"],"mappings":"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"}