"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CKBCellCollector = void 0;
var _base = require("@ckb-lumos/base");
var _toolkit = require("@ckb-lumos/toolkit");
var _services = require("./services");
var _crossFetch = _interopRequireDefault(require("cross-fetch"));
var _ckbIndexerFilter = require("./ckbIndexerFilter");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** CellCollector will not get cell with blockHash by default, please use OtherQueryOptions.withBlockHash and OtherQueryOptions.CKBRpcUrl to get blockHash if you need. */
class CKBCellCollector {
  constructor(terminableCellFetcher, queries, otherQueryOptions) {
    this.terminableCellFetcher = terminableCellFetcher;
    this.otherQueryOptions = otherQueryOptions;
    const defaultQuery = {
      lock: undefined,
      type: undefined,
      argsLen: -1,
      data: "any",
      fromBlock: undefined,
      toBlock: undefined,
      order: "asc",
      skip: undefined,
      outputDataLenRange: undefined,
      outputCapacityRange: undefined,
      bufferSize: undefined
    };
    this.queries = (Array.isArray(queries) ? queries : [queries]).map(query => ({
      ...defaultQuery,
      ...query
    }));
    this.queries.forEach(query => {
      this.validateQueryOption(query);
    });
    this.convertQueryOptionToSearchKey();
  }
  validateQueryOption(queries) {
    if (!queries.lock && (!queries.type || queries.type === "empty")) {
      throw new Error("Either lock or type script must be provided!");
    }
    if (queries.lock) {
      if (!(0, _ckbIndexerFilter.instanceOfScriptWrapper)(queries.lock)) {
        _toolkit.validators.ValidateScript(queries.lock);
      } else if ((0, _ckbIndexerFilter.instanceOfScriptWrapper)(queries.lock)) {
        _toolkit.validators.ValidateScript(queries.lock.script);
      }
    }
    if (queries.type && queries.type !== "empty") {
      if (typeof queries.type === "object" && !(0, _ckbIndexerFilter.instanceOfScriptWrapper)(queries.type)) {
        _toolkit.validators.ValidateScript(queries.type);
      } else if (typeof queries.type === "object" && (0, _ckbIndexerFilter.instanceOfScriptWrapper)(queries.type)) {
        _toolkit.validators.ValidateScript(queries.type.script);
      }
    }
    if (queries.fromBlock) {
      _base.utils.assertHexadecimal("fromBlock", queries.fromBlock);
    }
    if (queries.toBlock) {
      _base.utils.assertHexadecimal("toBlock", queries.toBlock);
    }
    if (queries.order !== "asc" && queries.order !== "desc") {
      throw new Error("Order must be either asc or desc!");
    }
    if (queries.outputCapacityRange) {
      _base.utils.assertHexadecimal("outputCapacityRange[0]", queries.outputCapacityRange[0]);
      _base.utils.assertHexadecimal("outputCapacityRange[1]", queries.outputCapacityRange[1]);
    }
    if (queries.outputDataLenRange) {
      _base.utils.assertHexadecimal("outputDataLenRange[0]", queries.outputDataLenRange[0]);
      _base.utils.assertHexadecimal("outputDataLenRange[1]", queries.outputDataLenRange[1]);
    }
    if (queries.scriptLenRange) {
      _base.utils.assertHexadecimal("scriptLenRange[0]", queries.scriptLenRange[0]);
      _base.utils.assertHexadecimal("scriptLenRange[1]", queries.scriptLenRange[1]);
    }
    if (queries.outputDataLenRange && queries.data && queries.data !== "any") {
      const dataLen = (0, _services.getHexStringBytes)((0, _ckbIndexerFilter.unwrapDataWrapper)(queries.data));
      if (dataLen < Number(queries.outputDataLenRange[0]) || dataLen >= Number(queries.outputDataLenRange[1])) {
        throw new Error("data length not match outputDataLenRange");
      }
    }
    if (queries.skip && typeof queries.skip !== "number") {
      throw new Error("skip must be a number!");
    }
    if (queries.bufferSize && typeof queries.bufferSize !== "number") {
      throw new Error("bufferSize must be a number!");
    }
  }
  convertQueryOptionToSearchKey() {
    this.queries.forEach(query => {
      const queryLock = query.lock;
      // unWrap `ScriptWrapper` into `Script`.
      if (queryLock) {
        if ((0, _ckbIndexerFilter.instanceOfScriptWrapper)(queryLock)) {
          _toolkit.validators.ValidateScript(queryLock.script);
          query.lock = queryLock.script;
        }
      }

      // unWrap `ScriptWrapper` into `Script`.
      if (query.type && query.type !== "empty") {
        if (typeof query.type === "object" && (0, _ckbIndexerFilter.instanceOfScriptWrapper)(query.type)) {
          _toolkit.validators.ValidateScript(query.type.script);
          query.type = query.type.script;
        }
      }
      if (!query.outputDataLenRange) {
        if (query.data && query.data !== "any") {
          const dataLenRange = (0, _services.getHexStringBytes)((0, _ckbIndexerFilter.unwrapDataWrapper)(query.data));
          query.outputDataLenRange = ["0x" + dataLenRange.toString(16), "0x" + (dataLenRange + 1).toString(16)];
        }
      }
      if (!query.scriptLenRange && query.type === "empty") {
        query.scriptLenRange = ["0x0", "0x1"];
      }
    });
  }
  async getLiveCell(query, lastCursor) {
    const searchKeyFilter = {
      sizeLimit: query.bufferSize,
      order: query.order,
      lastCursor
    };
    const result = await this.terminableCellFetcher.getCells((0, _services.generateSearchKey)(query), undefined, searchKeyFilter);
    return result;
  }
  async count() {
    let counter = 0;
    for await (const _cell of this.collect()) {
      counter++;
    }
    return counter;
  }

  // eslint-disable-next-line
  async request(rpcUrl, data) {
    const res = await (0, _crossFetch.default)(rpcUrl, {
      method: "POST",
      body: JSON.stringify(data),
      headers: {
        "Content-Type": "application/json"
      }
    });
    if (res.status !== 200) {
      throw new Error(`indexer request failed with HTTP code ${res.status}`);
    }
    const result = await res.json();
    if (result.error !== undefined) {
      throw new Error(`indexer request rpc failed with error: ${JSON.stringify(result.error)}`);
    }
    return result;
  }
  async getLiveCellWithBlockHash(query, lastCursor) {
    if (!this.otherQueryOptions) {
      throw new Error("CKB Rpc URL must provide");
    }
    const result = await this.getLiveCell(query, lastCursor);
    if (result.objects.length === 0) {
      return result;
    }
    const requestData = result.objects.map((cell, index) => {
      return {
        id: index,
        jsonrpc: "2.0",
        method: "get_block_hash",
        params: [cell.blockNumber]
      };
    });
    const blockHashList = await this.request(this.otherQueryOptions.ckbRpcUrl, requestData);
    result.objects = result.objects.map((item, index) => {
      const rpcResponse = blockHashList.find(responseItem => responseItem.id === index);
      const blockHash = rpcResponse && rpcResponse.result;
      return {
        ...item,
        blockHash
      };
    });
    return result;
  }

  /**
   * collect cells without blockHash by default.if you need blockHash, please add OtherQueryOptions.withBlockHash and OtherQueryOptions.ckbRpcUrl when constructor CellCollect.
   * don't use OtherQueryOption if you don't need blockHash,cause it will slowly your collect.
   */
  async *collect() {
    const visitedCellKey = new Set();
    for (const query of this.queries) {
      for await (const cell of this.collectBySingleQuery(query)) {
        var _cell$outPoint, _cell$outPoint2;
        const key = `${(_cell$outPoint = cell.outPoint) === null || _cell$outPoint === void 0 ? void 0 : _cell$outPoint.txHash}-${(_cell$outPoint2 = cell.outPoint) === null || _cell$outPoint2 === void 0 ? void 0 : _cell$outPoint2.index}`;
        if (visitedCellKey.has(key)) {
          continue;
        } else {
          visitedCellKey.add(key);
          yield cell;
        }
      }
    }
  }
  async *collectBySingleQuery(query) {
    //TODO: fix return type
    const withBlockHash = this.otherQueryOptions && "withBlockHash" in this.otherQueryOptions && this.otherQueryOptions.withBlockHash;
    let lastCursor = undefined;
    const getCellWithCursor = async () => {
      const result = await (withBlockHash ? this.getLiveCellWithBlockHash(query, lastCursor) : this.getLiveCell(query, lastCursor));
      lastCursor = result.lastCursor;
      return result.objects;
    };
    let cells = await getCellWithCursor();
    // filter cells by lumos query options
    cells = (0, _ckbIndexerFilter.filterByLumosQueryOptions)(cells, query);
    if (cells.length === 0) {
      return;
    }
    let buffer = getCellWithCursor();
    let index = 0;
    let skippedCount = 0;
    while (true) {
      if (query.skip && skippedCount < query.skip) {
        skippedCount++;
      } else {
        yield cells[index];
      }
      index++;
      //reset index and exchange `cells` and `buffer` after yield last cell
      if (index === cells.length) {
        index = 0;
        cells = await buffer;
        // break if can not get more cells
        if (cells.length === 0) {
          break;
        }
        buffer = getCellWithCursor();
      }
    }
  }
}
exports.CKBCellCollector = CKBCellCollector;
//# sourceMappingURL=collector.js.map