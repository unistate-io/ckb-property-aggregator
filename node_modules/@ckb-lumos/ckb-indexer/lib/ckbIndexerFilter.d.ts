import { Cell, DataWithSearchMode, Script, ScriptWrapper } from "@ckb-lumos/base";
import { CKBIndexerQueryOptions, SearchFilter, SearchKey } from "./type";
/**
 * @description the following fields are not supported:
 * 1. `fromBlock` pending cells don't have block number
 * 2. `toBlock` pending cells don't have block number
 * 3. `skip` not search key, shoule be implmented in cell collector
 * 4. `order` not search key, shoule be implmented in cell collector
 */
type LumosQueryOptions = Pick<CKBIndexerQueryOptions, "lock" | "type" | "data" | "argsLen" | "outputDataLenRange" | "outputCapacityRange" | "scriptLenRange">;
/**
 * @description `blockRange` is not supported, because pending cells don't have block number
 */
type LumosSearchFilter = Pick<SearchFilter, "script" | "scriptLenRange" | "outputCapacityRange" | "outputDataLenRange">;
type LumosSearchKey = Pick<SearchKey, "script" | "scriptType" | "scriptSearchMode"> & {
    filter?: LumosSearchFilter;
};
declare function convertQueryOptionToLumosSearchKey(queryOptions: LumosQueryOptions): LumosSearchKey;
declare function filterByLumosQueryOptions(cells: Cell[], options: LumosQueryOptions): Cell[];
declare function instanceOfScriptWrapper(object: unknown): object is ScriptWrapper;
declare function instanceOfDataWithSearchMode(object: unknown): object is DataWithSearchMode;
declare const unwrapScriptWrapper: (inputScript: ScriptWrapper | Script) => Script;
declare const unwrapDataWrapper: (input: DataWithSearchMode | string) => string;
export { filterByLumosQueryOptions, convertQueryOptionToLumosSearchKey, instanceOfDataWithSearchMode, instanceOfScriptWrapper, unwrapScriptWrapper, unwrapDataWrapper, };
//# sourceMappingURL=ckbIndexerFilter.d.ts.map