import { Cell, BaseCellCollector } from "@ckb-lumos/base";
import { CKBIndexerQueryOptions, OtherQueryOptions, TerminableCellFetcher } from "./type";
/** CellCollector will not get cell with blockHash by default, please use OtherQueryOptions.withBlockHash and OtherQueryOptions.CKBRpcUrl to get blockHash if you need. */
export declare class CKBCellCollector implements BaseCellCollector {
    terminableCellFetcher: TerminableCellFetcher;
    otherQueryOptions?: OtherQueryOptions | undefined;
    queries: CKBIndexerQueryOptions[];
    constructor(terminableCellFetcher: TerminableCellFetcher, queries: CKBIndexerQueryOptions | CKBIndexerQueryOptions[], otherQueryOptions?: OtherQueryOptions | undefined);
    validateQueryOption(queries: CKBIndexerQueryOptions): void;
    convertQueryOptionToSearchKey(): void;
    private getLiveCell;
    count(): Promise<number>;
    private request;
    private getLiveCellWithBlockHash;
    /**
     * collect cells without blockHash by default.if you need blockHash, please add OtherQueryOptions.withBlockHash and OtherQueryOptions.ckbRpcUrl when constructor CellCollect.
     * don't use OtherQueryOption if you don't need blockHash,cause it will slowly your collect.
     */
    collect(): AsyncGenerator<Cell>;
    private collectBySingleQuery;
}
//# sourceMappingURL=collector.d.ts.map