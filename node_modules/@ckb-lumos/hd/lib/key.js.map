{"version":3,"file":"key.js","names":["_base","require","_elliptic","_helper","ec","EC","signRecoverable","message","privateKey","utils","assertHexString","assertPrivateKey","key","keyFromPrivate","slice","r","s","recoveryParam","sign","canonical","Error","fmtR","toString","padStart","fmtS","fmtRecoverableParam","recoverFromSignature","signature","msgBuffer","Buffer","from","sigBuffer","point","recoverPubKey","publicKey","encode","toLowerCase","privateToPublic","pkBuffer","length","publickey","getPublic","publicKeyToBlake160","assertPublicKey","blake160","CKBHasher","update","digestHex","privateKeyToBlake160","_default","exports","default"],"sources":["../src/key.ts"],"sourcesContent":["import { HexString, utils } from \"@ckb-lumos/base\";\nimport { ec as EC, SignatureInput } from \"elliptic\";\nimport { assertPrivateKey, assertPublicKey } from \"./helper\";\n\nconst ec = new EC(\"secp256k1\");\n\nexport function signRecoverable(\n  message: HexString,\n  privateKey: HexString\n): HexString {\n  utils.assertHexString(\"message\", message);\n  assertPrivateKey(privateKey);\n\n  const key = ec.keyFromPrivate(privateKey.slice(2));\n  const { r, s, recoveryParam } = key.sign(message.slice(2), {\n    canonical: true,\n  });\n  if (recoveryParam === null) {\n    throw new Error(\"Sign message failed!\");\n  }\n  const fmtR = r.toString(16).padStart(64, \"0\");\n  const fmtS = s.toString(16).padStart(64, \"0\");\n  const fmtRecoverableParam = recoveryParam.toString(16).padStart(2, \"0\");\n  return \"0x\" + fmtR + fmtS + fmtRecoverableParam;\n}\n\nexport function recoverFromSignature(\n  message: HexString,\n  signature: HexString\n): HexString {\n  utils.assertHexString(\"message\", message);\n  utils.assertHexString(\"signature\", signature);\n\n  const msgBuffer = Buffer.from(message.slice(2), \"hex\");\n  const sigBuffer = Buffer.from(signature.slice(2), \"hex\");\n\n  const sign: SignatureInput = {\n    r: sigBuffer.slice(0, 32),\n    s: sigBuffer.slice(32, 64),\n    recoveryParam: sigBuffer[64],\n  };\n\n  const point = ec.recoverPubKey(msgBuffer, sign, sign.recoveryParam!);\n  const publicKey = \"0x\" + point.encode(\"hex\", true).toLowerCase();\n  return publicKey;\n}\n\nexport function privateToPublic(privateKey: Buffer): Buffer;\nexport function privateToPublic(privateKey: HexString): HexString;\n\nexport function privateToPublic(\n  privateKey: Buffer | HexString\n): Buffer | HexString {\n  let pkBuffer = privateKey;\n  if (typeof privateKey === \"string\") {\n    assertPrivateKey(privateKey);\n    pkBuffer = Buffer.from(privateKey.slice(2), \"hex\");\n  }\n  if (pkBuffer.length !== 32) {\n    throw new Error(\"Private key must be 32 bytes!\");\n  }\n\n  const publickey = ec.keyFromPrivate(pkBuffer).getPublic(true, \"hex\");\n  if (typeof privateKey === \"string\") {\n    return \"0x\" + publickey;\n  }\n  return Buffer.from(publickey, \"hex\");\n}\n\nexport function publicKeyToBlake160(publicKey: HexString): HexString {\n  assertPublicKey(publicKey);\n\n  const blake160: string = new utils.CKBHasher()\n    .update(publicKey)\n    .digestHex()\n    .slice(0, 42);\n\n  return blake160;\n}\n\nexport function privateKeyToBlake160(privateKey: HexString): HexString {\n  const publicKey: HexString = privateToPublic(privateKey);\n  return publicKeyToBlake160(publicKey);\n}\n\nexport default {\n  signRecoverable,\n  recoverFromSignature,\n  privateToPublic,\n  publicKeyToBlake160,\n  privateKeyToBlake160,\n};\n"],"mappings":"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"}